-- Migration: Enhance invoices table and add invoice-related request statuses
-- Date: 2025-10-12
-- Description: Adds comprehensive invoicing fields, status synchronization, and AI features
--
-- ⚠️ IMPORTANT NOTES:
-- - This migration DOES NOT modify RLS (Row Level Security) policies
-- - This migration DOES NOT modify Realtime publication settings
-- - Existing RLS policies on invoices and requests will remain intact
-- - Existing Realtime subscriptions on requests will continue to work
-- - If you need to enable Realtime on invoices table, run separately:
--   ALTER PUBLICATION supabase_realtime ADD TABLE ONLY public.invoices;

-- ============================================================================
-- PART 1: Enhance invoices table with detailed billing fields
-- ============================================================================

-- Add line items as JSONB array (flexible structure for itemized billing)
ALTER TABLE public.invoices
  ADD COLUMN line_items JSONB;

COMMENT ON COLUMN public.invoices.line_items IS
  'Array of line items: [{description, quantity, unit_price, total}, ...]';

-- Add financial calculation fields
ALTER TABLE public.invoices
  ADD COLUMN subtotal NUMERIC(10,2),
  ADD COLUMN tax_rate NUMERIC(5,2) DEFAULT 0.13,  -- Default to 13% (adjust for your region)
  ADD COLUMN tax_amount NUMERIC(10,2),
  ADD COLUMN total NUMERIC(10,2);

COMMENT ON COLUMN public.invoices.tax_rate IS 'Tax rate as decimal (e.g., 0.13 for 13% tax)';
COMMENT ON COLUMN public.invoices.subtotal IS 'Sum of all line items before tax';
COMMENT ON COLUMN public.invoices.tax_amount IS 'Calculated tax amount (subtotal * tax_rate)';
COMMENT ON COLUMN public.invoices.total IS 'Final amount (subtotal + tax_amount)';

-- Add payment tracking fields
ALTER TABLE public.invoices
  ADD COLUMN paid_at TIMESTAMP WITH TIME ZONE,
  ADD COLUMN payment_method TEXT CHECK (payment_method IN ('stripe', 'check', 'cash', 'etransfer', 'other')),
  ADD COLUMN stripe_payment_intent_id TEXT;

COMMENT ON COLUMN public.invoices.paid_at IS 'Timestamp when payment was received';
COMMENT ON COLUMN public.invoices.payment_method IS 'How customer paid: stripe, check, cash, etransfer, other';
COMMENT ON COLUMN public.invoices.stripe_payment_intent_id IS 'Stripe Payment Intent ID for online payments';

-- Add notes and AI fields
ALTER TABLE public.invoices
  ADD COLUMN notes TEXT,
  ADD COLUMN ai_generated BOOLEAN DEFAULT FALSE,
  ADD COLUMN ai_variance_explanation TEXT;

COMMENT ON COLUMN public.invoices.notes IS 'Admin notes or additional information for customer';
COMMENT ON COLUMN public.invoices.ai_generated IS 'True if invoice was generated by AI agent';
COMMENT ON COLUMN public.invoices.ai_variance_explanation IS 'AI-generated explanation for quote-to-invoice differences';

-- Update status to use proper constraint
ALTER TABLE public.invoices
  DROP CONSTRAINT IF EXISTS invoices_status_check;

ALTER TABLE public.invoices
  ADD CONSTRAINT invoices_status_check
  CHECK (status IN ('draft', 'sent', 'paid', 'overdue', 'cancelled', 'disputed', 'partially_paid'));

COMMENT ON COLUMN public.invoices.status IS
  'Invoice status: draft, sent, paid, overdue, cancelled, disputed, partially_paid';

-- ============================================================================
-- PART 2: Add invoice_id reference to requests table
-- ============================================================================

ALTER TABLE public.requests
  ADD COLUMN invoice_id UUID;

-- Add foreign key relationship
ALTER TABLE public.requests
  ADD CONSTRAINT fk_requests_invoice
  FOREIGN KEY (invoice_id) REFERENCES public.invoices(id)
  ON DELETE SET NULL;

COMMENT ON COLUMN public.requests.invoice_id IS 'Reference to associated invoice (if created)';

-- ============================================================================
-- PART 3: Add new invoice-related statuses to requests table
-- ============================================================================

-- Note: We can't directly modify an existing CHECK constraint, so we'll drop and recreate it
-- First, check if a constraint exists (it might not if status is just TEXT without constraint)

-- Add the new statuses to the allowed values
-- This assumes 'status' column exists as TEXT. If there's an existing constraint, drop it first.
DO $$
BEGIN
  -- Try to drop existing constraint if it exists
  ALTER TABLE public.requests DROP CONSTRAINT IF EXISTS requests_status_check;
  EXCEPTION WHEN OTHERS THEN NULL;
END $$;

-- Add new constraint with expanded status options
ALTER TABLE public.requests
  ADD CONSTRAINT requests_status_check
  CHECK (status IN (
    'new',          -- Initial submission
    'viewed',       -- Admin or customer viewed the request ✨ EXISTING
    'quoted',       -- Quote sent to customer
    'accepted',     -- Customer accepted quote
    'scheduled',    -- Job scheduled with technician
    'in_progress',  -- Work in progress
    'completed',    -- Work finished
    'invoiced',     -- Invoice created and sent ✨ NEW
    'paid',         -- Customer paid invoice ✨ NEW
    'overdue',      -- Invoice past due date ✨ NEW
    'disputed',     -- Customer disputed charges ✨ NEW
    'cancelled'     -- Request cancelled
  ));

COMMENT ON COLUMN public.requests.status IS
  'Request lifecycle status: new → viewed → quoted → accepted → scheduled → in_progress → completed → invoiced → paid/overdue/disputed';

-- ============================================================================
-- PART 4: Create indexes for performance
-- ============================================================================

-- Index for filtering invoices by status (frequently queried)
CREATE INDEX IF NOT EXISTS idx_invoices_status ON public.invoices(status);

-- Index for finding overdue invoices
CREATE INDEX IF NOT EXISTS idx_invoices_due_date ON public.invoices(due_date) WHERE status = 'sent';

-- Index for finding invoices by payment status
CREATE INDEX IF NOT EXISTS idx_invoices_paid_at ON public.invoices(paid_at);

-- Index for request-invoice lookups
CREATE INDEX IF NOT EXISTS idx_requests_invoice_id ON public.requests(invoice_id);

-- Index for Stripe payment intent lookups
CREATE INDEX IF NOT EXISTS idx_invoices_stripe_payment_intent ON public.invoices(stripe_payment_intent_id);

-- ============================================================================
-- PART 5: Create helper function to sync invoice status to request status
-- ============================================================================

-- This function automatically updates request.status when invoice.status changes
CREATE OR REPLACE FUNCTION sync_invoice_status_to_request()
RETURNS TRIGGER AS $$
BEGIN
  -- Only update request status if invoice status changed
  IF (TG_OP = 'UPDATE' AND OLD.status IS DISTINCT FROM NEW.status) OR TG_OP = 'INSERT' THEN

    -- Update the associated request's status based on invoice status
    UPDATE public.requests
    SET status = CASE NEW.status
      WHEN 'sent' THEN 'invoiced'
      WHEN 'paid' THEN 'paid'
      WHEN 'overdue' THEN 'overdue'
      WHEN 'disputed' THEN 'disputed'
      WHEN 'cancelled' THEN 'completed'  -- Return to completed if invoice cancelled
      ELSE status  -- Keep current status for 'draft' and other states
    END
    WHERE id = (
      SELECT id FROM public.requests WHERE invoice_id = NEW.id
    );

  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

COMMENT ON FUNCTION sync_invoice_status_to_request IS
  'Automatically updates request.status when invoice.status changes';

-- ============================================================================
-- PART 6: Create trigger to activate the sync function
-- ============================================================================

-- Drop trigger if it exists (for re-running migration)
DROP TRIGGER IF EXISTS trigger_sync_invoice_status ON public.invoices;

-- Create trigger that fires after invoice status changes
CREATE TRIGGER trigger_sync_invoice_status
  AFTER INSERT OR UPDATE OF status ON public.invoices
  FOR EACH ROW
  EXECUTE FUNCTION sync_invoice_status_to_request();

COMMENT ON TRIGGER trigger_sync_invoice_status ON public.invoices IS
  'Syncs invoice status changes to associated request status';

-- ============================================================================
-- PART 7: Update amount_due to match total (for consistency)
-- ============================================================================

-- Rename amount_due to be clearer (optional - keeps backward compatibility)
COMMENT ON COLUMN public.invoices.amount_due IS
  'DEPRECATED: Use total instead. Kept for backward compatibility.';

-- ============================================================================
-- Migration complete!
-- ============================================================================

-- Verify the migration
SELECT
  'Invoices table columns' as check_type,
  COUNT(*) as column_count
FROM information_schema.columns
WHERE table_name = 'invoices'
  AND table_schema = 'public';

SELECT
  'Requests invoice_id column' as check_type,
  COUNT(*) as exists
FROM information_schema.columns
WHERE table_name = 'requests'
  AND table_schema = 'public'
  AND column_name = 'invoice_id';

SELECT
  'Invoice status trigger' as check_type,
  COUNT(*) as exists
FROM information_schema.triggers
WHERE trigger_name = 'trigger_sync_invoice_status';

-- ============================================================================
-- OPTIONAL: Enable Realtime on invoices table (run if needed)
-- ============================================================================
--
-- If you want real-time updates for invoices (recommended for live invoice status):
--
-- ALTER PUBLICATION supabase_realtime ADD TABLE ONLY public.invoices;
--
-- Note: This is commented out by default. Uncomment and run separately if needed.
-- Current Realtime-enabled tables: requests, quotes, quote_attachments, request_notes
