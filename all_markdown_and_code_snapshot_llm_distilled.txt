# All Markdown Files Snapshot (LLM-Distilled)

Generated On: 2025-09-01T21:49:01.860Z

# Mnemonic Weight (Token Count): ~133,715 tokens

# Directory Structure (relative to project root)
  ./.DS_Store
  ./.gitignore
  ./PROMPTS/
  ./PROMPTS/meta-agent-prompt.md
  ./README.md
  ./RequirementsAndGoals/
  ./RequirementsAndGoals/ARCHITECTURAL_REFACTOR_MANDATE.md
  ./RequirementsAndGoals/PlumbingAgentRequirements.md
  ./RequirementsAndGoals/consulting_launch_blueprint.md
  ./RequirementsAndGoals/transcript.md
  ./SUPABASE_TABLES.sql
  ./TASKS.md
  ./agents/
  ./agents/.DS_Store
  ./agents/AGENT_REPOS.md
  ./agents/README2.md
  ./agents/backend-architect-mcp-agent.js
  ./agents/backend-architect-mcp.md
  ./agents/browserAuth.js
  ./agents/feedback/
  ./agents/feedback/.DS_Store
  ./agents/feedback/archive/
  ./agents/feedback/archive/ui-feedback-2025-08-30T20-13-29.101Z.json
  ./agents/feedback/archive/ui-feedback-2025-08-30T20-24-09.859Z.json
  ./agents/feedback/archive/ui-feedback-2025-08-30T20-28-32.043Z.json
  ./agents/feedback/archive/ui-feedback-2025-08-30T20-43-35.608Z.json
  ./agents/feedback/archive/ui-feedback-2025-08-30T20-48-12.876Z.json
  ./agents/feedback/archive/ui-feedback-2025-08-30T20-50-58.626Z.json
  ./agents/feedback/archive/ui-feedback-2025-08-30T21-11-18.780Z.json
  ./agents/feedback/archive/ui-feedback-2025-08-30T21-37-59.686Z.json
  ./agents/frontend-developer-mcp-agent.js
  ./agents/frontend-developer-mcp.md
  ./agents/project-manager-mcp-agent.js
  ./agents/project-manager-mcp.md
  ./agents/projectFileManifest.js
  ./agents/screenshots/
  ./agents/screenshots/after-user-menu-click.png
  ./agents/screenshots/before-user-menu-full.png
  ./agents/screenshots/dashboard-analysis.png
  ./agents/screenshots/login-failure-debug.png
  ./agents/screenshots/login-modal-debug.png
  ./agents/screenshots/login-success-debug.png
  ./agents/screenshots/logout-failure-debug.png
  ./agents/screenshots/quote-agent-modal-analysis.png
  ./agents/ui-designer-mcp-agent.js
  ./agents/ui-designer-mcp.md
  ./all_markdown_and_code_snapshot_llm_distilled.txt
  ./blueprint.md
  ./capture_code_snapshot.js
  ./netlify/
  ./netlify/functions/
  ./netlify/functions/api.js
  ./netlify.toml
  ./package-lock.json
  ./package.json
  ./scripts/
  ./startup.sh
  ./supabase/
  ./supabase/.temp/
  ./supabase/.temp/cli-latest
  ./supabase/.temp/gotrue-version
  ./supabase/.temp/pooler-url
  ./supabase/.temp/postgres-version
  ./supabase/.temp/project-ref
  ./supabase/.temp/rest-version
  ./supabase/.temp/storage-version
  ./supabase/SUPABASE_DATABASE_AND_AUTH_SETUP.md
  ./supabase/SUPABASE_QUOTE_ATTACHMENTS_TABLE.sql
  ./supabase/SUPABASE_TABLES.sql
  ./supabase/functions/
  ./supabase/migrations/
  ./supabase/migrations/20250830004708_add_profitability_score_to_requests_table.sql
  ./vite-app/
  ./vite-app/.env
  ./vite-app/api/
  ./vite-app/api/README.md
  ./vite-app/api/config/
  ./vite-app/api/config/supabase.js
  ./vite-app/api/controllers/
  ./vite-app/api/controllers/followUpController.js
  ./vite-app/api/controllers/requestController.js
  ./vite-app/api/controllers/triageController.js
  ./vite-app/api/controllers/userController.js
  ./vite-app/api/middleware/
  ./vite-app/api/middleware/authMiddleware.js
  ./vite-app/api/middleware/validationMiddleware.js
  ./vite-app/api/routes/
  ./vite-app/api/routes/followUpRoutes.js
  ./vite-app/api/routes/requestRoutes.js
  ./vite-app/api/routes/triageRoutes.js
  ./vite-app/api/routes/userRoutes.js
  ./vite-app/api/server.js
  ./vite-app/api/services/
  ./vite-app/api/services/emailService.js
  ./vite-app/api/validation/
  ./vite-app/api/validation/schemas.js
  ./vite-app/index.html
  ./vite-app/package-lock.json
  ./vite-app/public/
  ./vite-app/public/plumber.jpg
  ./vite-app/src/
  ./vite-app/src/features/
  ./vite-app/src/features/auth/
  ./vite-app/src/features/auth/AuthContext.tsx
  ./vite-app/src/features/auth/components/
  ./vite-app/src/features/auth/components/AuthModal.tsx
  ./vite-app/src/features/auth/components/UserMenu.tsx
  ./vite-app/src/features/landing/
  ./vite-app/src/features/landing/components/
  ./vite-app/src/features/landing/components/AboutSection.tsx
  ./vite-app/src/features/landing/components/ContactSection.tsx
  ./vite-app/src/features/landing/components/ReviewsSection.tsx
  ./vite-app/src/features/landing/components/ServicesSection.tsx
  ./vite-app/src/features/profile/
  ./vite-app/src/features/profile/components/
  ./vite-app/src/features/profile/components/ProfileModal.tsx
  ./vite-app/src/features/requests/
  ./vite-app/src/features/requests/components/
  ./vite-app/src/features/requests/components/AITriageSummary.tsx
  ./vite-app/src/features/requests/components/AttachmentSection.tsx
  ./vite-app/src/features/requests/components/CommunicationLog.tsx
  ./vite-app/src/features/requests/components/CustomerInfoSection.tsx
  ./vite-app/src/features/requests/components/Dashboard.tsx
  ./vite-app/src/features/requests/components/ModalFooter.tsx
  ./vite-app/src/features/requests/components/ModalHeader.tsx
  ./vite-app/src/features/requests/components/MyRequests.tsx
  ./vite-app/src/features/requests/components/QuoteAgentModal.tsx
  ./vite-app/src/features/requests/components/QuoteFormModal.tsx
  ./vite-app/src/features/requests/components/QuoteList.tsx
  ./vite-app/src/features/requests/components/RequestActions.tsx
  ./vite-app/src/features/requests/components/RequestDetailModal.tsx
  ./vite-app/src/features/requests/components/RequestProblemDetails.tsx
  ./vite-app/src/features/requests/hooks/
  ./vite-app/src/features/requests/hooks/useRequests.ts
  ./vite-app/src/features/requests/types/
  ./vite-app/src/features/requests/types/index.ts
  ./vite-app/src/lib/
  ./vite-app/src/lib/apiClient.ts
  ./vite-app/src/lib/serviceQuoteQuestions.ts
  ./vite-app/src/lib/servicesData.ts
  ./vite-app/src/lib/statusColors.ts
  ./vite-app/src/lib/supabaseClient.ts
  ./vite-app/src/main.tsx
  ./vite-app/tsconfig.json
  ./vite-app/vite.config.js

--- START OF FILE PROMPTS/meta-agent-prompt.md ---



# Plumbing Quote Intake Agent Prompt (v4): Fullstack Modular POC

## Role Assignment
You are an expert AI Solutions Architect with 20 years of simulated experience as a Master Plumber and quoting specialist for a residential service company. Your task is to combine deep plumbing domain knowledge with expertise in fullstack development, GPT agent creation, and Supabase/Node/React services to build a modular, scalable quoting agent POC.

## Context Layering
- Project Goal: Build a fullstack web application (Vite + React + Express/Node) that acts as an intelligent, qualifying chatbot for a plumbing business.
- Core Business Logic: The bot must ask the right questions to accurately assess job complexity, urgency, and material needs, allowing the business to send a prepared technician and a more accurate quote.
- Technology Stack: Vite, React, Express/Node (API), Tailwind CSS, Supabase, OpenAI.
- Modular Structure: Organize code into `src/` (frontend), `api/` (backend), and `plumbing_agent/` (agent logic) for maintainability and future POCs.

## Domain Expertise & Questioning Logic (The Plumber's Brain)
The conversational flow is driven by expert logic to triage and qualify leads:

- **Triage Urgency First:** An active leak is an emergency. A dripping faucet is not. The bot must determine this immediately to set the right priority.
- **Identify Service Category:** Broadly categorize the job (Leak, Clog, Installation, Repair, Inspection).
- **Drill Down with Contextual Questions:** Based on the category, ask specific qualifying questions:
	- If Leak: Where is the leak? (e.g., faucet, toilet, under sink, ceiling, wall). Is water actively running?
	- If Clog: Which fixture is clogged? (e.g., toilet, kitchen sink, shower). Is it draining slowly or completely stopped?
	- If Installation: What fixture are you installing? (e.g., toilet, hot water tank, faucet). Do you already have the new fixture? Is it a replacement for an existing one?
- **Gather Property Context:** Is this a house or an apartment/condo? (Access issues). Are you the homeowner? (Authorization).

## Task Decomposition: Smart Conversational Flow
Implement the following flow in the app:
1. Greeting & Initial Triage
2. Basic Info (name, address)
3. Core Problem Category
4. Intelligent Drill-Down (contextual questions)
5. Scheduling & Contact
6. Final Details
7. Summary & Close
8. Display JSON and send to backend/API

## Data Structure (JSON Output)
The final JSON should be rich with qualified data:
```json
{
	"isEmergency": true,
	"customerName": "Jane Smith",
	"serviceAddress": "456 Oak Ave, Victoria BC",
	"contactInfo": "555-987-6543",
	"problemCategory": "Leak Repair",
	"problemDetails": {
		"location": "Under kitchen sink",
		"description": "User stated water is actively leaking from the pipes."
	},
	"propertyType": "House",
	"isHomeowner": true,
	"preferredTiming": "ASAP",
	"additionalNotes": "Side door is the best entrance."
}
```


## Implementation Guidance
- Use Vite + React for frontend UI and modular components
- Use Express/Node for backend API routes
- Integrate OpenAI and Supabase in backend for quoting and data storage
- Organize code for easy iteration and future POCs
- Incrementally add features (auth, quote history, reviews, etc.) as needed

## Design Guidance for Professional Plumbing Business Website

**Core Features:**
- Hero section with clear call-to-action
- Service tiles showcasing key plumbing services
- About us section building trust and credibility
- Quote request form for lead generation
- Contact information and business details
- Testimonials section for social proof
- Emergency services highlight
- Mobile-responsive design

**Design Elements:**
- Professional color scheme with blues (#1E40AF, #3B82F6) and whites for trust and reliability
- Clean typography with proper hierarchy and spacing
- Service cards with hover effects and clear icons
- Smooth animations and micro-interactions
- Contact form with validation styling
- Professional imagery placeholders from Pexels or local assets
- Clear call-to-action buttons throughout
- Responsive grid layouts for all screen sizes

--- END OF FILE PROMPTS/meta-agent-prompt.md ---

--- START OF FILE README.md ---

# PlumbingPOC: AI-Powered Client Management & Quoting Platform

**PlumbingPOC** is an end-to-end, fullstack client management and quoting platform built for local trades businesses. It transforms the initial point of contact from a simple form into an intelligent, AI-driven conversation, and extends into a full client portal for managing the entire job lifecycle.

Beyond intelligent lead qualification, it provides a secure command center for business owners to manage job statuses, create quotes, and communicate directly with clients. The platform features a responsive Vite + React frontend, a scalable MVC-patterned Node.js/Express backend, and deep integrations with OpenAI and Supabase for its core functionality.

## Features

-   **Modern Frontend:** A fully responsive web app built with Vite, React, and Tailwind CSS (TypeScript/TSX).
-   **Intelligent Quoting Agent:** A guided, conversational modal that uses expert logic and dynamic, AI-generated questions to ensure every lead is perfectly qualified.
-   **Scalable MVC Backend:** A robust Express/Node API architected for maintainability, featuring separate layers for routing, controllers, middleware, and validation.
-   **Secure Database & Auth:** Full integration with Supabase for user profiles, requests, quotes, notes, file storage, and secure authentication (Email/Password, Google, and Azure/Microsoft).
-   **Comprehensive Admin Dashboard:** A "Command Center" for business owners to view, manage, and act on all incoming quote requests in a professional, interactive UI.
-   **Interactive Job Management:** Update the status of any job (`new`, `quoted`, `scheduled`, `completed`) directly from the dashboard.
-   **Integrated Quoting & Communication:** Admins can create official quotes and both parties can add notes, creating a persistent, secure communication log for each job.

## Project Structure

The repository is organized for clarity and professional development standards.

```
.
├── PROMPTS/ # Prompt engineering & agent logic
├── vite-app/
│ ├── public/ # Static assets (images, etc.)
│ ├── src/ # Frontend React application (TSX)
│ ├── api/ # Backend API (Express/Node)
│ │ ├── controllers/ # Contains the core business logic for each route.
│ │ ├── middleware/ # Handles auth, validation, etc. before the controller.
│ │ ├── routes/ # Defines API endpoints and connects them to controllers.
│ │ ├── validation/ # Holds all Zod data validation schemas.
│ │ ├── README.md # Detailed API architecture documentation.
│ │ └── server.js # Initializes and wires up the Express server.
│ ├── SUPABASE_DATABASE_AND_AUTH_SETUP.md # Full setup guide for Supabase
│ └── ... # Vite config, etc.
├── blueprint.md # The original "Operation Overmatch" strategic plan
└── startup.sh # Convenience script for local development
```

---

---

## Local Development & Setup

### 1. Prerequisites

-   Node.js (v20 or higher recommended)
-   npm (or yarn/pnpm)
-   A Supabase account (free tier is sufficient)
-   An OpenAI API key

### 2. Initial Setup

1.  **Clone the repository:**
    ```sh
    git clone [your-repo-url]
    cd PlumbingPOC
    ```

2.  **Configure Supabase:**
    Follow the detailed instructions in `vite-app/SUPABASE_DATABASE_AND_AUTH_SETUP.md`. Run the **Master SQL Setup Script** to create all tables and apply the necessary Row Level Security (RLS) policies.

3.  **Set Up Environment Variables:**
    Navigate to the `vite-app/` directory, create a copy of `.env.example` named `.env`, and fill in your Supabase and OpenAI API keys.

        ### Netlify Deployment & Environment Variables
        - Netlify does **not** automatically use your local `.env` files for builds. You must manually add all required environment variables in the Netlify dashboard under "Site settings > Environment variables".
        - For frontend (Vite/React), all variables must be prefixed with `VITE_` (e.g., `VITE_SUPABASE_URL`, `VITE_SUPABASE_ANON_KEY`).
        - For backend (Node/Express), use non-prefixed variables (e.g., `SUPABASE_URL`, `SUPABASE_SERVICE_ROLE_KEY`, `OPENAI_API_KEY`).
        - **Supabase anon keys are not secrets**: The `VITE_SUPABASE_ANON_KEY` is designed to be public and is required for client-side Supabase usage. Netlify's secrets scanning may flag it, but you can safely ignore this warning. You do not need to treat it as a secret.
        - The Netlify config file (`netlify.toml`) is ignored for secrets scanning if you do not use the `[secrets]` section or related settings. Instead, manage all secrets and public variables in the Netlify dashboard.
        - If you see build failures due to secrets scanning, ensure your public keys (like `VITE_SUPABASE_ANON_KEY`) are not marked as secrets, or add them to the omit list if needed.

        ### Netlify Production Domain & Supabase Settings
        - Your production domain is: `https://plumbingpoc.netlify.app`
        - In your Supabase project settings, set:
            - **Site URL:** `https://plumbingpoc.netlify.app`
            - **Redirect URLs:** `https://plumbingpoc.netlify.app/*`
        - This ensures authentication and redirects work correctly in production. You can confirm the app is running and sign-in works at this domain.

4.  **Install Dependencies:**
    ```sh
    cd vite-app
    npm install
    ```

### 3. Running the Application

Both the backend API and the frontend server must be running simultaneously.

#### Recommended Method: Startup Script

From the project root directory, run the convenience script:
```sh
./startup.sh
```
This script will start both services in the background and provide you with the URLs. It will also give you a command to stop both services when you're done.

#### Manual Method

1.  **Start the Backend API Server:**
    In your first terminal, from the `vite-app/` directory:
    ```sh
    npm run start:api
    ```
    The API will start, typically on `http://your-local-backend-url/`.

2.  **Start the Frontend Vite Server:**
    In a second terminal, from the `vite-app/` directory:
    ```sh
    npm run dev
    ```
    The frontend will start, typically on `http://your-local-frontend-url/`.

3.  **Access the App:**
    Open your browser and navigate to `http://your-local-frontend-url/`.

---

## Application Flows
### 1. The AI-Powered Intake Flow
This diagram illustrates the initial, intelligent lead qualification process.
The intelligent agent is the core of this POC. Here's how it works:

```mermaid
sequenceDiagram
    participant User
    participant Frontend
    participant Backend API
    participant OpenAI API
    participant Supabase

    User->>Frontend: Signs in or registers
    Frontend->>Supabase: Authenticates user, gets session
    Supabase-->>Frontend: Returns user session & profile

    User->>Frontend: Clicks "Request a Quote"
    Frontend->>User: Asks initial, pre-defined questions
    User-->>Frontend: Provides answers

    Frontend->>Backend API: POST /api/requests/gpt-follow-up (with answers)
    activate Backend API
    Backend API->>OpenAI API: Packages info and asks GPT-4 for follow-up questions
    activate OpenAI API
    OpenAI API-->>Backend API: Returns context-aware questions (or confirms none needed)
    deactivate OpenAI API
    Backend API-->>Frontend: Relays follow-up questions
    deactivate Backend API
    
    loop Until GPT has no more questions
        Frontend->>User: Asks AI-generated follow-up question
        User-->>Frontend: Provides answer
    end
    
    Frontend->>User: Displays a final summary for confirmation

    User->>Frontend: Confirms and submits the final request
    Frontend->>Backend API: POST /api/requests/submit (with all data)
    activate Backend API
    Backend API->>Supabase: Inserts the new row into 'requests' table
    
    opt User uploaded a file
        Frontend->>Backend API: POST /api/requests/attachments (with file)
        Backend API->>Supabase: Uploads file to Storage & inserts record into 'quote_attachments'
    end

    Backend API-->>Frontend: Returns success confirmation
    deactivate Backend API
    Frontend->>User: Displays "Thank you" message
```

### 2. The Client & Admin Management Flow

This diagram shows how admins and clients interact with a request after it has been submitted, turning the app into a client portal.

```mermaid
sequenceDiagram
    participant Admin
    participant Customer
    participant Frontend
    participant Backend API
    participant Supabase

    Admin->>Frontend: Logs in and navigates to Dashboard
    Frontend->>Backend API: GET /api/requests (fetch all data)
    Backend API->>Supabase: SELECT * from requests with joins
    Supabase-->>Backend API: Returns all request data
    Backend API-->>Frontend: Sends data to dashboard
    Frontend->>Admin: Displays list of active requests

    Admin->>Frontend: Clicks on a request to open details modal
    Admin->>Frontend: Adds a new note in the modal
    Frontend->>Backend API: POST /api/requests/:id/notes (with note text)
    activate Backend API
    Backend API->>Supabase: INSERT new row into 'request_notes'
    Supabase-->>Backend API: Confirms note saved
    Backend API-->>Frontend: Returns new note data
    deactivate Backend API
    Frontend->>Admin: UI updates instantly with the new note

    Customer->>Frontend: Logs in and views their request
    Frontend->>Backend API: GET /api/requests/:id (fetch single request)
    Backend API->>Supabase: SELECT request data for this user
    Supabase-->>Backend API: Returns request, including admin's note
    Backend API-->>Frontend: Sends data to client view
    Frontend->>Customer: Displays the conversation log
```

### 3. The AI-Powered Triage Process

After a new service request is submitted, the system automatically initiates an AI-powered triage process. This leverages OpenAI's powerful language models to analyze the request details, summarize the problem, and assign a priority score.

```mermaid
sequenceDiagram
    participant Admin
    participant Backend API
    participant Supabase
    participant OpenAI API

    Admin->>Backend API: POST /api/triage/:requestId (triggers triage)
    activate Backend API
    
    Backend API->>Supabase: Fetch request details (problem_category, answers)
    Supabase-->>Backend API: Returns request data
    
    Backend API->>OpenAI API: Send prompt with request details to GPT-4
    activate OpenAI API
    OpenAI API-->>Backend API: Returns JSON: { triage_summary, priority_score }
    deactivate OpenAI API
    
    Backend API->>Supabase: Update 'requests' table with triage_summary and priority_score
    Supabase-->>Backend API: Confirms update
    
    Backend API-->>Admin: Returns success message with triage results
    deactivate Backend API
```
### 4. MVC architecture with react (Hook-Powered MVC Cycle)

```mermaid
sequenceDiagram
    participant User
    participant ReactView as "React View (JSX)"
    participant ReactController as "React Controller (Hooks & Handlers)"
    participant NodeController as "Node.js Controller (API)"
    participant SupabaseModel as "Supabase (Model)"

    User->>ReactView: 1. Clicks "Add Note" button
    
    ReactView->>ReactController: 2. Triggers onClick handler
    
    ReactController->>NodeController: 3. `useRequests` hook calls apiClient.post('/api/.../notes')
    
    NodeController->>SupabaseModel: 4. Inserts new note into database
    
    SupabaseModel-->>NodeController: 5. Confirms success
    
    NodeController-->>ReactController: 6. Returns 201 Created response
    
    Note over ReactController: 7. Realtime subscription fires, hook re-fetches data
    
    ReactController->>ReactController: 8. Updates state with useState()
    
    ReactController->>ReactView: 9. Triggers a re-render with new notes
    
    ReactView-->>User: 10. User sees the new note appear instantly
```
--- END OF FILE README.md ---

--- START OF FILE RequirementsAndGoals/ARCHITECTURAL_REFACTOR_MANDATE.md ---

# Architectural Refactoring Mandate: PlumbingPOC v2.0

**Objective:** To refactor the PlumbingPOC application to align with modern React best practices, focusing on modularity, reusability, and long-term maintainability. This mandate will transition the project from a component-centric structure to a professional, feature-based architecture powered by custom hooks.

**Primary AI Agent:** Gemini CLI 2.5
**Human Steward:** Richard Fremmerlid

---

## I. Core Philosophy & Guiding Principles

This refactoring is guided by the following principles:

1.  **Component-Based Architecture:** Continue to break down large components into smaller, single-responsibility components.
2.  **Feature-Based Organization:** Co-locate all files related to a single feature (components, hooks, types) to improve developer experience and scalability.
3.  **Logic Encapsulation via Custom Hooks:** Abstract all complex, non-visual logic (especially data fetching and real-time subscriptions) into reusable custom hooks.
4.  **One-Way Data Flow:** Maintain the predictable pattern of data flowing down through props and events flowing up through callbacks.

---

## II. Mandate 1: Implement a Feature-Based Directory Structure

The current `src/` directory will be reorganized into a feature-based structure.

**Action:**
Restructure the `vite-app/src/` directory to match the following target layout. You will need to create new directories and move existing files accordingly. Update all import paths across the application to reflect the new file locations.

**Target Directory Structure:**

```
vite-app/src/
├── features/
│   ├── auth/
│   │   ├── components/
│   │   │   ├── AuthModal.tsx
│   │   │   └── UserMenu.tsx
│   │   └── AuthContext.tsx  // Keep AuthContext here for now
│   ├── profile/
│   │   └── components/
│   │       └── ProfileModal.tsx
│   └── requests/
│       ├── components/
│       │   ├── Dashboard.tsx
│       │   ├── MyRequests.tsx
│       │   ├── RequestDetailModal.tsx
│       │   ├── QuoteList.tsx
│       │   ├── CommunicationLog.tsx
│       │   └── ... (all other request-related components)
│       ├── hooks/
│       │   └── useRequests.ts  // To be created in Mandate 2
│       └── types/
│           └── index.ts        // To be created in Mandate 3
├── hooks/ 
│   └── (empty for now, will contain useRequests.ts)
├── lib/
│   ├── apiClient.ts
│   ├── supabaseClient.ts
│   └── ... (other shared library files)
└── main.tsx
```
*(Note: I have moved the empty `hooks/` directory to the `requests` feature folder for better co-location, which is a refinement of our initial discussion.)*

---

## III. Mandate 2: Create the `useRequests` Custom Hook

**Action:**
Create a new file at `vite-app/src/features/requests/hooks/useRequests.ts`. This hook will encapsulate all data fetching and real-time subscription logic for quote requests.

**`useRequests.ts` Implementation:**

```typescript
// vite-app/src/features/requests/hooks/useRequests.ts

import { useState, useEffect, useCallback } from 'react';
import { supabase } from '../../../lib/supabaseClient';
import { QuoteRequest } from '../types'; // Will be created in the next mandate

export function useRequests(userId?: string) {
  const [requests, setRequests] = useState<QuoteRequest[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchRequests = useCallback(async () => {
    if (requests.length === 0) setLoading(true);
    setError(null);

    try {
      let query = supabase
        .from('requests')
        .select(`*, user_profiles!inner(name, email, phone), quote_attachments(*), quotes(*), request_notes(*)`)
        .order('created_at', { ascending: false });

      if (userId) {
        query = query.eq('user_id', userId);
      }

      const { data, error: fetchError } = await query;

      if (fetchError) throw fetchError;
      setRequests((data as QuoteRequest[]) || []);
    } catch (err: any) {
      console.error("useRequests hook error:", err);
      setError("Failed to fetch requests.");
    } finally {
      setLoading(false);
    }
  }, [userId, requests.length]);

  useEffect(() => {
    fetchRequests();
  }, [fetchRequests]);

  useEffect(() => {
    const channelId = userId ? `user-requests-${userId}` : 'admin-dashboard';
    const channel = supabase.channel(channelId);

    const handleUpdate = (payload: any) => {
      console.log(`Realtime update on channel ${channelId}:`, payload);
      fetchRequests();
    };

    channel
      .on('postgres_changes', { event: '*', schema: 'public', table: 'requests' }, handleUpdate)
      .on('postgres_changes', { event: '*', schema: 'public', table: 'request_notes' }, handleUpdate)
      .on('postgres_changes', { event: '*', schema: 'public', table: 'quotes' }, handleUpdate)
      .on('postgres_changes', { event: '*', schema: 'public', table: 'quote_attachments' }, handleUpdate)
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [userId, fetchRequests]);

  return { requests, loading, error, refreshRequests: fetchRequests };
}
```

---

## IV. Mandate 3: Centralize Type Definitions

**Action:**
Create a new file at `vite-app/src/features/requests/types/index.ts`. Move all request-related TypeScript interfaces (`QuoteRequest`, `Quote`, `RequestNote`) from `Dashboard.tsx` into this new file and export them.

**`features/requests/types/index.ts` Implementation:**

```typescript
// vite-app/src/features/requests/types/index.ts

export interface Quote { 
  id: string; 
  quote_amount: number; 
  details: string; 
  status: string; 
  created_at: string; 
}

export interface RequestNote { 
  id: string; 
  note: string; 
  author_role: 'admin' | 'customer'; 
  created_at: string; 
}

export interface QuoteAttachment {
  id: string;
  file_name: string;
  file_url: string;
  mime_type: string;
  quote_id?: string;
}

export interface QuoteRequest {
  id: string;
  created_at: string;
  customer_name: string;
  problem_category: string;
  status: string;
  is_emergency: boolean;
  answers: { question: string; answer: string }[];
  quote_attachments: QuoteAttachment[];
  user_profiles: { name: string; email: string; phone: string; [key: string]: any; } | null;
  service_address: string;
  quotes: Quote[];
  request_notes: RequestNote[];
  scheduled_start_date: string | null;
  triage_summary: string | null;
  priority_score: number | null;
  priority_explanation: string | null;
  profitability_score: number | null;
  profitability_explanation: string | null;
}
```

---

## V. Mandate 4: Refactor `Dashboard.tsx` and `MyRequests.tsx`

**Action:**
Update both `Dashboard.tsx` and `MyRequests.tsx` to use the new `useRequests` hook and import types from the new central location. This will dramatically simplify both components.

*   **Remove all `useState`, `useEffect`, and `useCallback` hooks related to data fetching and subscriptions from both files.**
*   **Replace them with a single call to the `useRequests` hook.**
*   **Update all type imports to point to `../types`.**

**Example (`Dashboard.tsx`):**
```typescript
import { useRequests } from '../hooks/useRequests';
import { QuoteRequest, Quote, RequestNote } from '../types'; // New import

// ...

const Dashboard: React.FC = () => {
  const { profile } = useAuth();
  // ... state for modal ...

  // All data logic is now clean and encapsulated!
  const { requests: allRequests, loading, error, refreshRequests } = useRequests();

  // ... rest of the component ...
};
```

---

## VI. Future Considerations (For the Steward)

This mandate focuses on the most critical refactoring. Long-term, we should also consider:
*   **`useAuth` Hook:** Refactoring the `AuthContext.tsx` into a more conventional `useAuth.ts` hook.
*   **TanStack Query:** Investigating this library to further simplify data fetching and caching, which would replace the custom `useRequests` hook with an even more powerful, industry-standard solution.

Execute these mandates in order. This will result in a more professional, scalable, and maintainable codebase.

--- END OF FILE RequirementsAndGoals/ARCHITECTURAL_REFACTOR_MANDATE.md ---

--- START OF FILE RequirementsAndGoals/PlumbingAgentRequirements.md ---

# Plumbing Quote Agent Requirements

## 1. User Registration & Profile
- Users must register and be signed in to request a quote.
- The agent pulls contact info from the user profile to complete the quote request.
- A profile with contact info is required.

## 2. Efficient Questioning & Cost Reduction
- The agent reduces chattiness with GPT-4 to minimize API costs.
- Common questions are anticipated and built into the app.
- The first question is: "What would you like a quote for?" (user selects from a list of service types).

## 3. Service Quote Request Types & Common Questions
- Maintain a separate JSON/TypeScript file of service quote request types (e.g., bathroom reno, perimeter drains, water heater install, etc.).
- For each type, maintain a list of common anticipated questions. Example for bathroom reno:
  - What specific fixtures does the homeowner plan to use, or would they like options/recommendations?
  - Are there any special requirements or features the homeowner is interested in, such as water-saving or smart fixtures?
  - Is there an existing blueprint or design plan to follow for the renovation?
  - Will any additional renovations be happening simultaneously that might affect the plumbing work?
  - Are there any known issues with the existing plumbing that might complicate the renovation process?
- Maintain similar common questions for other service types.

## 4. Conversational Flow
- Ask all questions one at a time in a chat-style conversation.
- Use a text box at the bottom for user answers.

## 5. Profile Data Usage
- Pull user profile information into the quote request.
- Do not ask for information already known.

## 6. Privacy & GPT Interaction
- Do not share personal information (name, phone, email, address) with GPT.
- Only send context-specific info needed for follow-up questions.

## 7. Packaging & Submitting the Quote
- Package the quote for GPT with all answers and known info, formatted efficiently.
- Ask GPT if additional questions are required for the current context.
- If GPT returns more questions, ask them in the same conversational style (user is unaware they are talking to GPT).
- Repeat until GPT confirms all key questions are answered.

## 8. Final Summary & Submission
- Package a summary of the request in a user-readable format, including contact info.
- Display the summary to the user before submission.
- On submission, show: "Submitting request for quote. We will get back to you with a quote soon. Thank you very much."
--- END OF FILE RequirementsAndGoals/PlumbingAgentRequirements.md ---

--- START OF FILE RequirementsAndGoals/consulting_launch_blueprint.md ---

# 72-Hour Consulting Launch: Mission Blueprint
**Version:** 6.0 (Full Arsenal Showcase)
**Codename:** Operation Overmatch
**Objective:** Secure a high-value barter agreement by demonstrating an overwhelmingly superior, end-to-end client management solution to a local tradesperson in Victoria, B.C.

---

## I. Mission Profile & Strategy

*   **Primary Target:** Owner-operated local trades & home service businesses.
*   **Core Pain Point:** Wasting billable hours on unqualified leads, losing jobs due to slow quoting, and lacking a central system to track jobs from intake to completion.
*   **Your Solution (The Weapon):** A fully functional Proof of Concept of an **AI-Powered Client Management Platform**. This is not a demo; it is a working, end-to-end application with a database backend, multi-provider authentication, file uploads, and an internal command center.
*   **Acquisition Tactic (Shock & Awe):**
    1.  Lead with your most impressive asset to immediately establish yourself as a high-tier expert.
    2.  Demonstrate undeniable, end-to-end value by showing how your platform automates their *entire* client intake and management process.
    3.  Frame the barter offer as a unique, one-time opportunity for them to acquire a complete business operating system that puts them years ahead of their competition.
*   **Authority Signal:** A powerful, 2-minute "Full Arsenal" video demo of your working application.

---

## II. Execution Plan: Tactical Breakdown

### **Day 1: FORGE A SUPERIOR WEAPON (40 Hours) — ✅ COMPLETED**

You have successfully forged a complete, end-to-end client management platform. This far exceeds the original objective and provides a decisive strategic advantage.

---

### **Day 2: PACKAGE THE ASSET & HUNT (12 Hours)**

**Objective:** Package your advanced POC into a compelling sales weapon and deploy it.

*   **Hours 1-4: Package the Asset**
    *   `[ ]` **Record the "Full Arsenal" Demo (2 Minutes):** Use Loom or OBS. This must be a smooth, professional recording that tells a complete story.
        *   **Shot 1: The Customer Experience (First 60 seconds)**
            *   Show the professional landing page. A customer clicks "Request a Quote."
            *   Show the customer logging in effortlessly with their **Google account**.
            *   Show them navigating the AI-powered intake, answering questions, and **uploading a photo** of the issue.
            *   Show the final, clean summary and the "Submitted" confirmation.
        *   **Shot 2: The Owner's Experience (Next 60 seconds)**
            *   Switch views to the **Admin Dashboard**. Show the new request appearing at the top of the list.
            *   Click the "AI Triage" button. Show the **triage summary and priority score** appearing instantly. This is a key "wow" moment.
            *   Open the request details. Show all the customer's answers, the uploaded photo, and the communication log.
            *   Show yourself adding a quote and changing the status to "Quoted."
            *   Briefly show the customer's "My Requests" view, now updated with the new quote and status.
    *   `[ ]` **Host the Video:** Upload to YouTube/Vimeo as an "unlisted" link.
    *   `[ ]` **Build the One-Page Showcase:** Use Carrd. The existing blueprint copy is perfect.

*   **Hours 5-12: Build Target List & Execute Outreach**
    *   `[ ]` This part of the plan remains unchanged. Compile the list of 50 businesses and execute the outreach using the existing, high-quality email script.

---

### **Day 3: ENGAGE, CLOSE, & UPSELL (12 Hours)**

**Objective:** Convert interest into a high-value agreement by demonstrating overwhelming value and a clear future roadmap.

*   **Hours 1-4: Follow-up & Response Management**
    *   `[ ]` Unchanged. Execute as planned.

*   **Hours 5-12: Conduct Discovery Calls & Close (with Hardened Script)**
    *   `[ ]` Get on the phone/Zoom with interested prospects.
    *   `[ ]` **Follow the Hardened Call Script v6.0:**
        1.  **Rapport (2 mins):** Unchanged. Build connection.
        2.  **Diagnose Pain (5 mins):** Unchanged. Let them articulate their frustrations.
        3.  **Present Solution - "Full Arsenal" (3 mins):** "That's the exact problem I built this to solve, from end to end." Share your screen and play your **2-minute "Full Arsenal" demo**. Narrate it, emphasizing the AI Triage and the seamless admin dashboard. "This isn't just a contact form; it's a complete command center for your business."
        4.  **The Upsell - Introduce the "Automation & Growth Engine":** "What I've just shown you is the core operating system. As part of our partnership, we would enable the **'Automation & Growth Engine.'** This is where the system starts working for you proactively."
            *   **Automated Follow-ups:** "Imagine the system automatically sending polite follow-up emails to clients who haven't responded to a quote, saving you hours of administrative work."
            *   **Automated Invoicing:** "Once a job is marked 'Completed,' the system can automatically generate a professional PDF invoice and email it to the client."
            *   **Business Intelligence:** "It can even export all your job data to Excel or Google Sheets, giving you a clear overview of your revenue, job types, and most profitable clients."
        5.  **Frame the Barter (3 mins):** "A complete, custom end-to-end system like this—the AI-powered front door, the internal command center, *and* the future automation engine—is a project I would typically scope at **$10,000-$15,000**. What would be the approximate value for the **[their service]** work I need done? If the values are in the same ballpark, a direct trade could be a massive win for both of us."
        6.  **Pivot to Cash (if needed):** Unchanged. The pilot program offer is a strong fallback.
        7.  **Close the Deal:** Unchanged. Draft the agreement outlining the full scope.

--- END OF FILE RequirementsAndGoals/consulting_launch_blueprint.md ---

--- START OF FILE RequirementsAndGoals/transcript.md ---

### **"Full Arsenal" Demo Script (v1.0)**

**(Total Estimated Time: ~2 minutes)**

**Instructions:**
*   Have your two browser windows open and ready: **Customer View** (logged out) and **Admin View** (logged in).
*   Speak clearly and naturally. Imagine you're showing this to a friend who runs a plumbing business.
*   Follow the **[ACTION]** cues precisely.

---

**(Start Recording)**

**(Shot 1: Customer Experience - Start on your landing page)**

**YOU:**
"Hi, I wanted to show you a quick look at an AI-powered system I've built to help local trades businesses save time and win more jobs."

"This is the professional homepage your customers would see. Let's walk through how a new customer requests a quote."

**[ACTION]: Click "Request a Quote".  This will ask a user to login so the quote request is associated with a person you can contact**

"First, the customer can sign in instantly and securely using their own Google or Microsoft accounts, or a standard email and password. There's no new account for them to manage."

**[ACTION]: Click "Continue with Google" and quickly complete the login.**

"Once they're in, they start a conversation with your AI assistant. The assistant's first job is to understand exactly what they need."

**[ACTION]: Select a service category, like "Perimeter Drains".**

"The AI starts with the standard questions for that service. But here's where it gets smart."

**[ACTION]: Answer the initial questions quickly.**

*(Pause for a moment as the "Thinking..." message appears)*

"Right now, the AI is analyzing the customer's answers. It understands the context and generates intelligent, follow-up questions to get all the details you'd normally have to ask over the phone."

**[ACTION]: Show the new AI-generated questions appearing. Answer them.**

"The customer can also upload photos of the problem area directly from their phone or computer, which gives you eyes on the job before you even send a quote."

**[ACTION]: Upload your dummy `leak.jpg` file.**

"Finally, the system gives them a clean summary to review. Once they confirm, the job is done for them, and you get a perfect lead."

**[ACTION]: Click "Confirm & Submit Request". Show the "Thank you" screen.**

---

**(Shot 2: Owner's Experience - Switch to your Admin Browser Window)**

**YOU:**
"Now, let's look at what you see as the business owner. This is your command center."

**[ACTION]: Refresh the Admin Dashboard. The new request should appear at the top.**

"The new request from our customer appears instantly. But instead of just raw data, you have an AI partner."

**[ACTION]: Click the "AI Triage" button for the new request. Let the results appear.**

"With one click, your AI assistant analyzes the entire request and gives you a triage summary, a priority score, and even a profitability score, so you know exactly which jobs to focus on first."

**[ACTION]: Click on the request to open the Job Docket modal.**

"Inside the docket, you have everything you need, perfectly organized: all the customer's answers, the photos they sent, and a full communication log."

**[ACTION]: Scroll down, showing the different sections.**

"From here, you can add your official quote and update the job status with a single click."

**[ACTION]: Quickly create a simple quote. Change the status from "New" to "Quoted".**

"The best part is, this is a full client portal. The customer can log back in anytime to see the status of their request and review the quote you just sent."

**[ACTION]: Briefly switch back to the Customer View and refresh the "My Requests" page to show the new "Quoted" status and quote amount.**

---

**(Final Shot: Back on Admin View, ready to close)**

**YOU:**
"So, in under two minutes, the system handled a new lead, qualified them with AI, triaged the job for you, and organized everything into a simple command center, all without a single phone call."

"This is the kind of tool that saves hours every week and puts you ahead of the competition."

**(End Recording)**
--- END OF FILE RequirementsAndGoals/transcript.md ---

--- START OF FILE SUPABASE_TABLES.sql ---

-- 1. Drop the helper function if you created it.
DROP FUNCTION IF EXISTS get_my_claim(TEXT);

-- 2. Drop the separate SELECT policies just in case they are still around.
DROP POLICY IF EXISTS "Allow individual users to view their own profile" ON public.user_profiles;
DROP POLICY IF EXISTS "Allow admins to view all profiles" ON public.user_profiles;

-- 3. **CRITICAL FIX:** Drop the consolidated policy IF IT EXISTS before creating it.
DROP POLICY IF EXISTS "Enable read access for users and admins" ON public.user_profiles;

-- 4. Create the ONE consolidated SELECT policy that handles both cases.
CREATE POLICY "Enable read access for users and admins"
ON public.user_profiles
FOR SELECT
TO authenticated
USING (
  -- CASE 1: The logged-in user is requesting their OWN profile.
  (auth.uid() = user_id)
  
  OR
  
  -- CASE 2: The logged-in user is an admin.
  ((auth.jwt() -> 'raw_user_meta_data' ->> 'role') = 'admin')
);

-- Add last_follow_up_sent_at column to requests table
ALTER TABLE public.requests
ADD COLUMN last_follow_up_sent_at TIMESTAMPTZ;

-- Add triage_summary and priority_score columns to requests table
ALTER TABLE public.requests
ADD COLUMN triage_summary TEXT,
ADD COLUMN priority_score INTEGER;
--- END OF FILE SUPABASE_TABLES.sql ---

--- START OF FILE TASKS.md ---

# Plumbing Quote Agent Project Tracker

This file tracks all major requirements, tasks, and progress for the Plumbing Quote Agent project. Use this checklist to monitor work, add new tasks, and check off completed items.

## Key Instructions & Project Context
- The goal is to build an AI-powered intake and quoting assistant for local trades (plumbing) businesses.
- Use MCP agents to automate, evaluate, and accelerate development:
  - `project-manager-mcp`: Tracks requirements, assigns tasks, monitors progress, and summarizes work.
  - `ui-designer-mcp`: Evaluates UI/UX and suggests improvements.
  - `frontend-developer-mcp`: Implements UI/UX improvements and optimizes frontend.
  - `backend-architect-mcp`: Reviews backend, APIs, and database models.
- Start with the project manager agent to organize and track all work.
- Update this checklist as tasks are completed or new ones are added.
- Privacy: Do not share personal info with GPT; only send context-specific info needed for follow-up questions.
- Minimize unnecessary GPT-4 API calls to reduce costs.

## Task Checklist

### User Registration & Profile
**User Registration & Profile (All Flows Working):**
- [x] Sign-in working
- [x] Sign-out working
- [x] Register new user with Google working
- [x] Register new user with Microsoft working
- [x] Create new profile with email/password working
- [x] Create new profile working
- [x] Update existing profile working
- [x] Ensure user profile includes contact info
- [x] Pull profile info into quote requests (Admins can now see all user profiles)

### Service Quote Request Flow
- [x] Create service quote request types (JSON/TypeScript)
- [x] Maintain common questions for each service type
- [x] Build first question: "What would you like a quote for?" (service type selection)
- [x] Ask questions one at a time in chat-style conversation
- [x] Use text box for user answers
- [x] Do not ask for info already known from profile
- [ ] Review UI to confirm all anticipated questions are surfaced for each service type

### Privacy & GPT Interaction
- [x] Do not share personal info (name, phone, email, address) with GPT
- [x] Only send context-specific info for follow-up questions
- [x] Efficiently package quote info for GPT
- [x] Ask GPT if additional questions are needed
- [x] Repeat until GPT confirms all key questions are answered
- [ ] Add backend comment/validation to enforce privacy in GPT prompt (optional)

### Final Summary & Submission
- [x] Package a user-readable summary of the request (including contact info)
- [x] Display summary to user before submission
- [x] On submission, show confirmation message
- [ ] Test summary and confirmation flow for completeness

### UI/UX & Frontend
- [ ] Update the frontend to use the deployed backend URL (http://your-local-frontend-url or https://plumbingpoc.netlify.app/)
- [ ] Implement prioritized improvements
- [x] Modular frontend structure with forms, modals, dashboard
- [x] File upload for quote attachments
- [x] Display quote status as colored chip in quote list (RequestDetailModal)
- [x] Display quote status as colored chip in QuoteFormModal header
- [x] Ensure status chip colors are consistent across all components
- [ ] Create a Kanban board view for the dashboard
- [ ] Optimize for performance, accessibility, and responsiveness

### Backend & API
- [x] MVC pattern with controllers, routes, middleware, validation
- [x] Supabase integration for data storage and authentication
- [x] API endpoints for requests, profiles, notes, attachments
- [x] Filter dashboard requests by user_id for regular users
- [x] Add 'Accepted' status to request workflow
- [x] Implement 'Accept Quote' functionality (marks specific quote as accepted, others as rejected, updates request status)
- [x] Make quotes read-only after request status is 'Accepted', 'Scheduled', or 'Completed'
- [x] Implement email notifications for request submission
- [x] Implement email notifications for status updates
- [x] Implement email notifications for quote additions
- [x] Implement email notifications for new notes in communication log
- [x] Add RESEND_ENABLED feature flag for email sending
- [x] Include link to request in notification emails
- [x] Correct RLS policies for `user_profiles` to allow admin access
- [ ] Implement automated follow-up emails for quoted requests
- [x] Add AI-powered triage summary and priority score to requests
- [ ] Review backend for scalability, security, and maintainability (agent-driven)
- [ ] Configure Resend domain verification (manual step for user)

### Deployment
- [x] Setup hosting for the POC on Netlify
- [ ] Create a Netlify Scheduled Function for automated follow-ups
- [ ] Move the follow-up email logic from the Express controller to the new Netlify function
- [ ] Remove the old /api/follow-up route and controller
- [x] Publish the POC to Netlify

### Iteration & Progress Tracking
- [x] Checklist created and updated for baseline
- [ ] Regularly update this checklist and agent assignments
- [ ] Add new tasks as needed
- [x] Check off completed items

## Baseline Notes (for GitHub Copilot)


## Progress Summary (August 29, 2025)

**Completed:**
- All core flows for user registration, profile, quote request, and privacy enforcement are implemented.
- All anticipated service questions are surfaced in the UI via `serviceQuoteQuestions.ts` and dynamic modal logic.
- Privacy requirements are enforced in both frontend (no personal info sent to GPT) and backend (validation, RLS, and middleware).
- Summary and confirmation flows are present and tested.
- Modular frontend and backend structure is in place.
- **New:** Comprehensive attachment management, including display, upload, and a reusable component.
- **New:** Robust status management for requests and quotes, including an "Accepted" status, automatic status updates, and quote locking.
- **New:** Full email notification system for key events (request submission, status changes, quote additions, new notes) with a feature flag and direct links.
- **New:** Dashboard now correctly filters requests for regular users.
- **New:** Corrected RLS policies to ensure admins can view all user profiles, resolving a critical data access issue.

**Outstanding Work:**
- Implement prioritized UI/UX improvements (see agent recommendations).
- Optimize frontend for performance, accessibility, and responsiveness.
- Review backend for scalability, security, and maintainability.
- Configure Resend domain verification (manual step for user).
- Implement automated follow-up emails.
- Implement AI-powered triage and priority scoring.
- Create a Kanban board view for the dashboard.
- Setup hosting for the POC on Netlify.
- Create a Netlify Scheduled Function for automated follow-ups.
- Move the follow-up email logic from the Express controller to the new Netlify function.
- Remove the old /api/follow-up route and controller.
- Publish the POC to Netlify.
- Add new tasks as requirements evolve.

**Agent Assignments:**
- `project-manager-mcp`: Progress tracking, checklist updates, agent coordination.
- `ui-designer-mcp`: UI/UX evaluation and improvement recommendations.
- `frontend-developer-mcp`: UI/UX implementation, performance/accessibility optimization.
- `backend-architect-mcp`: Backend review, privacy enforcement, scalability/security.

**Recommended Next Steps:**
1. Run `ui-designer-mcp` to evaluate UI/UX and generate prioritized improvement list.
2. Assign improvements to `frontend-developer-mcp` for implementation.
3. Run `backend-architect-mcp` to review backend for scalability, security, and privacy.
4. Continue regular updates to this checklist and agent assignments.

---

## How to Use This File
- Reference this file at the start of each session.
- Add new tasks as requirements evolve.
- Check off items as they are completed.
- Use agent prompts and CLI commands as documented in `agents/README.md`.
--- END OF FILE TASKS.md ---

--- START OF FILE agents/AGENT_REPOS.md ---

# Plumbing Quote Agent MCP Persona Repos

This document lists the MCP agent personas used in this project and provides links to relevant GitHub repositories for browser automation and agent frameworks.

## Browser Automation & Testing MCP Agents

For all browser automation and testing tasks, use Playwright-based MCP servers. Playwright is the recommended and standardized solution for browser interaction, web scraping, and UI testing in the MCP ecosystem.

**Recommended MCP Server:**
- [Playwright MCP Server](https://mcp.so/server/playwright-mcp/microsoft)

**Why Playwright?**
- Cross-browser support (Chromium, Firefox, WebKit)
- Modern automation features
- Robust integration with LLMs and MCP clients
- Active community and ongoing development

**Usage:**
Integrate Playwright MCP servers for any agent requiring browser automation, UI testing, or web scraping. Other tools (e.g., Puppeteer) are available but Playwright is preferred for consistency and reliability.

---
# Plumbing Quote Agent MCP Persona Repos

This document lists the MCP agent personas used in this project and provides links to relevant GitHub repositories for browser automation and agent frameworks.

## Agent Personas & Recommended MCP Server Repos

### 1. Project Manager Agent (`project-manager-mcp`)
- **Role:** Project manager and task tracker
- **Recommended Repo:** No direct MCP server; use a generic agent framework or [MCP-Agent](https://github.com/lastmile-ai/mcp-agent)

### 2. UI Designer Agent (`ui-designer-mcp`)
- **Role:** Visionary UI designer
- **Recommended Browser MCP Server:**
  - [Playwright MCP Server](https://github.com/executeautomation/mcp-playwright)
  - [Browser-Use MCP Server (Playwright/Chromium)](https://github.com/co-browser/browser-use-mcp-server)
  - [Puppeteer Vision MCP Server](https://github.com/djannot/puppeteer-vision-mcp)

### 3. Frontend Developer Agent (`frontend-developer-mcp`)
- **Role:** Elite frontend developer
- **Recommended Browser MCP Server:**
  - [Playwright MCP Server](https://github.com/executeautomation/mcp-playwright)
  - [Browser-Use MCP Server](https://github.com/co-browser/browser-use-mcp-server)

### 4. Backend Architect Agent (`backend-architect-mcp`)
- **Role:** Backend architect
- **Recommended Repo:**
  - [MCP-Agent](https://github.com/lastmile-ai/mcp-agent) (for agent orchestration)
  - [MCP-Framework](https://mcp-framework.com/) (TypeScript server framework)

## MCP Client Frameworks

## Notes

## Playwright MCP Server Installation & Usage

**Recommended: Install globally. You can run these commands from any folder.**

### Steps:
1. **Install Node.js** (if not already installed)
  - On macOS: `brew install node`

2. **Install Playwright MCP server globally:**
  - `sudo npm install -g @executeautomation/playwright-mcp-server`

3. **Start the Playwright MCP server:**
  - `npx playwright run-server`

4. **Verify the server is running:**
  - You should see output indicating the server has started, including port and endpoint details.

---
**Tip:** You do not need to clone the repo or build manually. The global install provides the CLI entry point for the server.

**Testing:**
- After running `playwright-mcp-server`, check the terminal for startup messages. If you see a message like "Playwright MCP server started" or similar, the server is working.

**Update this file as new agents or MCP server repos are added to your workflow.**
**Update this file as new agents or MCP server repos are added to your workflow.**
---
**Update this file as new agents or MCP server repos are added to your workflow.**

--- END OF FILE agents/AGENT_REPOS.md ---

--- START OF FILE agents/README2.md ---

# AI Agent-Driven Development Workflow

This document provides a comprehensive guide to setting up and running the AI agent-driven development workflow for the PlumbingPOC project. The workflow leverages a multi-agent system to automate UI/UX analysis, code implementation, and task management in a state-aware loop.

## 1. Prerequisites

Before you begin, ensure you have the following:
*   **Node.js** (v18 or higher recommended).
*   **npm** (comes with Node.js).
*   A running instance of the **PlumbingPOC web application**.

## 2. One-Time Setup

These steps only need to be performed once to prepare your environment.

### Step 1: Install Node.js Dependencies

Install all necessary Node.js packages by running the following command from the **project root directory** (`PlumbingPOC/`):

```bash
npm install playwright @google/generative-ai --legacy-peer-deps dotenv
```

This command installs:
*   `playwright`: For browser automation.
*   `@google/generative-ai`: For integrating with the Gemini API.
*   `dotenv`: For loading environment variables from the `.env` file.

### Step 2: Configure Environment Variables

The agents require API keys and URLs to function.

1.  Create a file named `.env` in the **project root directory**.
2.  Copy and paste the following content into the `.env` file, replacing the placeholder values with your actual keys and URLs.

    ```
    # Your Gemini API Key from Google AI Studio
    GEMINI_API_KEY=<YOUR_GEMINI_API_KEY>

    # The full URL where your local Vite/React app is running
    VITE_FRONTEND_BASE_URL=http://localhost:5173

    # The WebSocket endpoint for the Playwright server (default)
    PLAYWRIGHT_SERVER_URL=http://localhost:49982/
    ```

### Step 3: Run the Playwright Server

For the agents to control a browser, the Playwright server must be running. Open a **separate, dedicated terminal** and run the following command. Leave this terminal running in the background.

```bash
npx playwright run-server
```
*Note: This uses the official, built-in Playwright server, which is simpler and more reliable than third-party alternatives.*

### Step 4:  run the chrome as a host for testing
```bash
/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --remote-debugging-port=9222 --user-data-dir=/tmp/chrome-mcp
```

---

## 3. The End-to-End AI Workflow

This is the main, orchestrated workflow that uses the Project Manager agent to automate the entire UI improvement lifecycle.

### How It Works: The State-Aware Feedback Loop

This workflow is designed to prevent duplicate work and create a clear audit trail.

1.  **Task Generation:** The `project-manager-mcp-agent` first calls the `ui-designer-mcp-agent`. The designer analyzes the UI and creates a `ui-feedback.json` file with a `status` of `"pending"`.
2.  **Task Assignment:** The Project Manager reads the pending feedback and formally assigns the implementation task.
3.  **Implementation & State Update:** The `frontend-developer-mcp-agent` is called. It checks the file's status. Since it's `"pending"`, it implements the code change and then updates the `ui-feedback.json` file's `status` to `"implemented"`.
4.  **Verification & Archiving:** The Project Manager agent takes over again, verifies the status is now `"implemented"`, and archives the completed feedback file to a `feedback/archive/` directory with a timestamp. This "closes the ticket" and prepares the system for the next run.

### Running the Workflow

To run the entire automated workflow, execute the following command from the **project root directory**. Replace `<email>` and `<password>` with valid login credentials for your application.

```bash
node agents/project-manager-mcp-agent.js run-workflow <email> <password>
```

---

## 4. Standalone Agent Commands (for Testing & Debugging)

You can also run the agents individually. **Note:** Always run these commands from the `PlumbingPOC/` root directory.

### UI Designer Agent

Generates a new `ui-feedback.json` file.

```bash
node agents/ui-designer-mcp-agent.js analyze-ui <email> <password>
```

### Frontend Developer Agent

Implements the feedback from an existing `ui-feedback.json` file.

```bash
node agents/frontend-developer-mcp-agent.js implement-feedback --feedback-file agents/feedback/ui-feedback.json
```

### Backend Architect Agent

Performs a high-level review of your actual backend code.

```bash
node agents/backend-architect-mcp-agent.js review-backend
```

---

## 5. How It Works: Technical Diagrams

### High-Level Workflow Orchestration

This diagram illustrates the new, state-aware workflow managed by the Project Manager agent.

```mermaid
sequenceDiagram
    participant User
    participant project-manager-mcp-agent.js
    participant ui-designer-mcp-agent.js
    participant frontend-developer-mcp-agent.js
    participant "File System (feedback.json)"

    User->>project-manager-mcp-agent.js: Run workflow command
    project-manager-mcp-agent.js->>ui-designer-mcp-agent.js: 1. Analyze UI
    ui-designer-mcp-agent.js->>"File System (feedback.json)": 2. Create feedback (status: pending)
    
    project-manager-mcp-agent.js->>"File System (feedback.json)": 3. Read & verify status is 'pending'
    project-manager-mcp-agent.js->>frontend-developer-mcp-agent.js: 4. Implement feedback
    
    frontend-developer-mcp-agent.js->>"File System (feedback.json)": 5. Read feedback & implement change
    frontend-developer-mcp-agent.js->>"File System (feedback.json)": 6. Update status to 'implemented'
    
    project-manager-mcp-agent.js->>"File System (feedback.json)": 7. Verify status is 'implemented' & archive file
    project-manager-mcp-agent.js->>User: 8. Report completion```

### Technical: Playwright Connection

This diagram shows how the agent scripts connect to and control the browser via the Playwright server.

```mermaid
sequenceDiagram
    participant Agent Script (e.g., ui-designer-mcp-agent.js)
    participant Playwright Library
    participant Playwright Server (npx playwright run-server)
    participant Browser (Chrome/Chromium)

    Agent Script->>Playwright Library: Use chromium.connectOverCDP()
    Playwright Library->>Playwright Server: Connect via WebSocket (CDP URL)
    Playwright Server->>Browser: Establishes and manages control session
    Browser-->>Playwright Server: Ready for automation
    Playwright Server-->>Playwright Library: Connection successful
    Playwright Library-->>Agent Script: Returns 'browser' object for automation
    Agent Script->>Agent Script: Executes automation steps (login, screenshot, etc.)
```
--- END OF FILE agents/README2.md ---

--- START OF FILE agents/backend-architect-mcp-agent.js ---

/**
 * =====================================================================================
 * AGENT NAME: Backend Architect MCP Agent
 * FILE:       agents/backend-architect-mcp-agent.js
 * =====================================================================================
 *
 * @description
 * This script acts as an autonomous Backend Architect agent. It reviews the project's
 * database schema and API routes, identifies a potential improvement, and generates
 * a structured feedback file with a specific, actionable code change. It is guided
 * by a manifest of valid files to prevent hallucinations.
 *
 * @usage
 * This script is intended to be run from inside the 'agents/' directory.
 *
 * COMMAND:
 * node backend-architect-mcp-agent.js review-backend
 *
 * =====================================================================================
 */
const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');
const path = require('path');
const { editableFileManifest } = require('./projectFileManifest.ts'); // <-- IMPORT THE MANIFEST

require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

/**
 * ======================================================
 * FUNCTION: reviewBackend
 * PURPOSE:  Loads persona and backend files, sends them to Gemini for an
 *           expert review, and generates a JSON feedback file with a proposed change.
 * ======================================================
 */
async function reviewBackend() {
  console.log('============================================');
  console.log('🚀 STARTING BACKEND ARCHITECTURE REVIEW');
  console.log('============================================');

  try {
    const projectRoot = path.resolve(__dirname, '..');
    const dbSchemaPath = path.join(projectRoot, 'SUPABASE_TABLES.sql');
    const apiRoutesDir = path.join(projectRoot, 'vite-app', 'api', 'routes');

    if (!fs.existsSync(dbSchemaPath) || !fs.existsSync(apiRoutesDir)) {
      console.error(`Error: Could not find required backend files.`);
      console.error(`Checked for: ${dbSchemaPath}`);
      console.error(`Checked for: ${apiRoutesDir}`);
      return;
    }

    const dbSchemaContent = fs.readFileSync(dbSchemaPath, 'utf8');
    
    const routeFiles = fs.readdirSync(apiRoutesDir).filter(f => f.endsWith('.js'));
    let apiRoutesContent = '';
    for (const file of routeFiles) {
      const content = fs.readFileSync(path.join(apiRoutesDir, file), 'utf8');
      apiRoutesContent += `\n\n--- START OF FILE ${file} ---\n\n${content}\n\n--- END OF FILE ${file} ---`;
    }
    
    console.log('✅ Successfully loaded database schema and API routes.');

    const model = genAI.getGenerativeModel({ model: "gemini-2.5-pro" });
    console.log('Successfully initialized Gemini 2.5 Pro model.');
    
    const personaFilePath = path.join(__dirname, 'backend-architect-mcp.md');
    const personaContent = fs.readFileSync(personaFilePath, 'utf8');
    console.log('Successfully loaded Backend Architect persona.');

    const prompt = `
      ${personaContent}

      ---------------------------
      CONTEXT: VALID FILE PATHS
      ---------------------------
      Here is a complete list of all the files you are allowed to modify. You MUST choose a file path from this list.
      \`\`\`json
      ${JSON.stringify(editableFileManifest, null, 2)}
      \`\`\`

      ---------------------------
      YOUR CURRENT TASK
      ---------------------------
      As the Backend Architect, you are to review the provided database schema and API routes. Your goal is to identify one specific, high-impact improvement related to scalability, security, or best practices and propose a single-line code change to implement it.

      **Database Schema (SUPABASE_TABLES.sql):**
      \`\`\`sql
      ${dbSchemaContent}
      \`\`\`

      **API Route Definitions (from vite-app/api/routes/):**
      \`\`\`javascript
      ${apiRoutesContent}
      \`\`\`

      **Instructions:**
      Your response MUST be a single JSON object with the following structure. The 'file_path' you choose MUST exist in the list of valid files provided above.
      {
        "status": "pending",
        "analysis": "A detailed, expert-level explanation of the architectural issue or improvement you identified. Explain the problem and how your proposed change will solve it, referencing your core principles (e.g., security, performance, scalability).",
        "improvement": {
          "file_path": "The path to the file that needs to be changed, relative to the project root. CHOOSE FROM THE LIST ABOVE.",
          "old_string": "The exact line of code that needs to be replaced.",
          "new_string": "The new line of code that should replace the old one."
        }
      }

      Analyze the backend code and provide your feedback in the specified JSON format.
    `;

    console.log('\nAsking Gemini for a backend architecture review...');
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const rawText = response.text();
    const jsonMatch = rawText.match(/```json\n([\s\S]*?)\n```|({[\s\S]*})/);
    const text = jsonMatch ? (jsonMatch[1] || jsonMatch[2]) : rawText;

    // --- SAVE THE STRUCTURED FEEDBACK ---
    const feedbackDir = path.join(__dirname, 'feedback');
    if (!fs.existsSync(feedbackDir)) fs.mkdirSync(feedbackDir, { recursive: true });

    const feedbackFilePath = path.join(feedbackDir, 'backend-feedback.json');
    fs.writeFileSync(feedbackFilePath, JSON.stringify(JSON.parse(text), null, 2));
    
    console.log(`\n✅ Backend feedback file generated at ${feedbackFilePath} with status 'pending'.`);
    console.log('============================================');
    console.log('🎉 BACKEND REVIEW COMPLETE');
    console.log('============================================');

  } catch (error) {
    console.error('\n============================================');
    console.error('❌ BACKEND REVIEW FAILED');
    console.error('============================================');
    console.error('An error occurred during the review process:', error);
  }
}

/**
 * ======================================================
 * SCRIPT ENTRY POINT (CLI HANDLER)
 * ======================================================
 */
const [,, command] = process.argv;

if (command === 'review-backend') {
  reviewBackend();
} else {
  console.log('Usage: node backend-architect-mcp-agent.js review-backend');
}
--- END OF FILE agents/backend-architect-mcp-agent.js ---

--- START OF FILE agents/backend-architect-mcp.md ---

# -------------------------------------------------------------
# MCP Backend Architect Sub-Agent Persona
# -------------------------------------------------------------
# Name: backend-architect-mcp
# Description: This agent specializes in designing, building, and optimizing backend architectures for scalable, secure, and maintainable applications. It excels at:
#   - API design, database modeling, and cloud infrastructure
#   - Implementing best practices for security, performance, and reliability
#   - Collaborating with frontend and UI designer agents for seamless integration
# Usage:
#   1. Use this agent to architect backend systems, review API designs, and optimize infrastructure.
#   2. Integrate with other agents to ensure end-to-end technical excellence.
# Example CLI prompt:
#   mcp-browser-cli run-browser-agent "Use the backend-architect-mcp persona to review backend architecture, suggest improvements, and ensure best practices for scalability and security." -e agents/.env
# -------------------------------------------------------------

name: backend-architect-mcp
color: green
description: |
  Backend architect agent for designing scalable, secure, and maintainable server-side systems. Specializes in:
    - API design (REST, GraphQL), database modeling (SQL, NoSQL)
    - Cloud infrastructure (AWS, GCP, Azure), CI/CD pipelines
    - Security, performance, and reliability best practices
    - Collaboration with frontend and UI designer agents
persona: |
  You are a backend architecture expert with deep experience in designing robust APIs, scalable databases, and cloud-native infrastructure. You ensure backend systems are secure, performant, and easy to maintain, collaborating closely with frontend and design teams for seamless integration.

  Your primary responsibilities:
    1. API Design & Implementation
    2. Database Modeling & Optimization
    3. Cloud Infrastructure & DevOps
    4. Security & Compliance
    5. Performance & Reliability
    6. Collaboration & Integration

  Your goal: Architect backend systems that power modern applications, enabling rapid development and long-term scalability. Provide actionable feedback and implementation-ready specs for every backend review.

# Tools leveraged: Write, Read, MultiEdit, Bash, Grep, Glob, WebFetch

--- END OF FILE agents/backend-architect-mcp.md ---

--- START OF FILE agents/browserAuth.js ---

/**
 * ======================================================
 * FUNCTION: clickSignInButton
 * PURPOSE:  Click the 'Sign In' button in the navigation bar by its text.
 * PARAMETERS:
 * @param {import('playwright').Page} page - Playwright page instance
 * @returns {Promise<void>}
 * ======================================================
 */
async function clickSignInButton(page) {
  try {
    await page.waitForSelector('role=button[name="Sign In"]', { timeout: 5000 });
    await page.getByRole('button', { name: /sign in/i }).click();
  } catch (err) {
    throw new Error('Could not find or click the Sign In button');
  }
}

/**
 * ======================================================
 * FUNCTION: signOut
 * PURPOSE:  Automate logout and report success.
 * PARAMETERS: 
 * @param {import('playwright').Browser} browser - Playwright browser instance
 * @param {string} baseUrl - Base URL of the frontend
 * @param {object} [options] - Optional selectors and paths
 * @returns {Promise<boolean>} - Resolves true if logout successful, false otherwise
 * ======================================================
*/
async function signOut(browser, baseUrl, options = {}) {
  const page = options.page;
  if (!page) {
    console.error("signOut requires a page object in options.");
    return false;
  }
  const loginSelector = 'role=button[name="Sign In"]'; 

  let success = false;
  try {
    console.log('Attempting to click user menu button...');
    const userMenuButtonSelector = 'button:has(svg.lucide-chevron-down)';
    await page.waitForSelector(userMenuButtonSelector, { timeout: 5000 });
    await page.click(userMenuButtonSelector);

    console.log('Waiting for sign out button to appear...');
    const signOutButtonSelector = 'button:has-text("Sign Out")';
    await page.waitForSelector(signOutButtonSelector, { timeout: 2000 });

    console.log('Attempting to click "Sign Out" button...');
    await page.click(signOutButtonSelector);
    
    await page.waitForSelector(loginSelector, { timeout: 5000 });
    console.log('Logout successful');
    success = true;
  } catch (err) {
    console.log('Logout failed');
    await page.screenshot({ path: 'screenshots/logout-failure-debug.png' });
    console.log('Screenshot saved as screenshots/logout-failure-debug.png');
    console.error(err);
  }
  return success;
}

/**
 * ======================================================
 * FUNCTION: signInEmailPassword (UPDATED for Admin & Regular Users)
 * PURPOSE:  Ensures the user is logged in, regardless of role. It checks
 *           for the universal User Menu button as a success indicator.
 * ======================================================
 */
async function signInEmailPassword(browser, baseUrl, email, password, options = {}) {
  const page = await browser.newPage();
  const loginPath = options.loginPath || '/';
  const emailSelector = options.emailSelector || 'input[type="email"]';
  const passwordSelector = options.passwordSelector || 'input[type="password"]';
  
  // --- THE FIX IS HERE ---
  // The new success selector is not role-specific. It looks for the user menu button
  // that appears for ANY successfully logged-in user.
  const successSelector = options.successSelector || 'button:has(svg.lucide-chevron-down)';

  await page.goto(baseUrl + loginPath);

  try {
    // First, check if we are ALREADY logged in by looking for the universal success selector.
    console.log(`Checking for existing login session by looking for: "User Menu Button"`);
    await page.waitForSelector(successSelector, { timeout: 3000 }); // Short timeout
    
    // If the selector is found, we're already logged in.
    console.log('✅ Already logged in. Skipping login flow.');
    return { success: true, page };

  } catch (e) {
    // If the success selector is not found, it means we are not logged in.
    console.log('Not logged in. Proceeding with sign-in flow...');
    try {
      console.log('Attempting to click Sign In button...');
      await clickSignInButton(page);
      
      console.log('Waiting for email input to appear...');
      await page.waitForSelector(emailSelector, { timeout: 10000 });
      
      console.log('Filling email and password...');
      await page.fill(emailSelector, email);
      await page.fill(passwordSelector, password);
      
      console.log('Clicking "Sign In with Email" button...');
      await page.getByRole('button', { name: /sign in with email/i }).click();

      console.log('Waiting for login success indicator (User Menu)...');
      await page.waitForSelector(successSelector, { timeout: 10000 });
      
      console.log('Login successful for', email);
      return { success: true, page };

    } catch (loginErr) {
      console.log('Login failed for', email);
      await page.screenshot({ path: 'screenshots/login-failure-debug.png' });
      console.log('Screenshot saved as agents/screenshots/login-failure-debug.png');
      return { success: false, page };
    }
  }
}

module.exports = { signInEmailPassword, signOut, clickSignInButton };
--- END OF FILE agents/browserAuth.js ---

--- START OF FILE agents/feedback/archive/ui-feedback-2025-08-30T20-13-29.101Z.json ---

{
  "status": "implemented",
  "analysis": "The \"My Quote Requests\" section presents a significant UI layout flaw that compromises visual hierarchy and user focus. The quote request card and the \"Emergency Line\" button are placed within a flex container using `justify-between`, pushing them to opposite ends of the content area. This creates a visually jarring, unbalanced composition with excessive negative space. The high-contrast red \"Emergency Line\" button visually competes with the user's primary information (the quote request card), creating confusion about the relationship between the two elements and disrupting the logical flow. This layout fails the design principle of proximity (grouping related items) and is not scalable for multiple quote requests.",
  "improvement": {
    "file_path": "vite-app/src/components/MyRequests.tsx",
    "old_string": "      <div className=\"mt-8 flex items-center justify-between\">",
    "new_string": "      <div className=\"mt-8 flex flex-col items-center gap-6\">"
  }
}
--- END OF FILE agents/feedback/archive/ui-feedback-2025-08-30T20-13-29.101Z.json ---

--- START OF FILE agents/feedback/archive/ui-feedback-2025-08-30T20-24-09.859Z.json ---

{
  "status": "implemented",
  "analysis": "The 'Emergency Line' button within the 'My Quote Requests' section currently uses a destructive (bright red) style, giving it excessive visual prominence. This is a significant UI/UX issue because its placement next to a specific quote request creates ambiguity about its function—it's a general action misplaced in a specific context. The high-contrast color distracts the user from the primary task of this section, which is to review the status of their quotes. This violates the principle of clear visual hierarchy, as the red color incorrectly signals a primary or dangerous action related to the quote itself, rather than a secondary contact option.",
  "improvement": {
    "file_path": "vite-app/src/components/Dashboard.tsx",
    "old_string": "          <Button variant=\"destructive\"><Phone className=\"mr-2 h-4 w-4\" /> Emergency Line</Button>",
    "new_string": "          <Button variant=\"outline\"><Phone className=\"mr-2 h-4 w-4\" /> Emergency Line</Button>"
  }
}
--- END OF FILE agents/feedback/archive/ui-feedback-2025-08-30T20-24-09.859Z.json ---

--- START OF FILE agents/feedback/archive/ui-feedback-2025-08-30T20-28-32.043Z.json ---

{
  "status": "implemented",
  "analysis": "The primary UI/UX issue identified is the placement and styling of the 'Emergency Line' button within the 'My Quote Requests' component. From a design principles perspective, this element introduces several problems:\n1.  **Visual Hierarchy Disruption:** The button utilizes a high-contrast, red 'destructive' variant, which immediately draws the user's eye. This color and prominence should be reserved for critical, contextual actions (like deleting a request). Here, it's used for a global, non-contextual action, creating a distracting focal point that pulls attention away from the primary content—the quote requests themselves.\n2.  **Contextual Irrelevance:** A user viewing their quote requests is in a management or review mindset. Placing an urgent, top-level 'Emergency' CTA here is illogical and confusing. Global CTAs for this purpose are already correctly placed in the header and footer, following standard design patterns.\n3.  **Scalability Issues:** The current layout implies that an 'Emergency Line' button will be rendered for each quote request in the list. This is highly redundant and would severely clutter the interface if a user has multiple requests.\nRemoving this button is a high-impact, quick-win improvement. It will declutter the interface, strengthen the visual hierarchy, and allow the user to focus on the primary task of reviewing their quotes, leading to a more streamlined and intuitive experience.",
  "improvement": {
    "file_path": "vite-app/src/components/MyRequests.tsx",
    "old_string": "        <Button variant=\"destructive\"><Phone className=\"mr-2 h-4 w-4\" /> Emergency Line</Button>",
    "new_string": "        {/* <Button variant=\"destructive\"><Phone className=\"mr-2 h-4 w-4\" /> Emergency Line</Button> */}"
  }
}
--- END OF FILE agents/feedback/archive/ui-feedback-2025-08-30T20-28-32.043Z.json ---

--- START OF FILE agents/feedback/archive/ui-feedback-2025-08-30T20-43-35.608Z.json ---

{
  "status": "implemented",
  "analysis": "The user menu in the header presents a significant UI/UX issue. It currently displays a generic label 'User' and the user's full email address. This approach is problematic for several reasons: 1) **Redundancy & Clutter:** The word 'User' is superfluous as the person icon already signifies a user profile. The full email address is lengthy and creates visual imbalance in an otherwise clean header. 2) **Poor Information Scent:** It displays identifying information ('ziazdamauler@yahoo.ca') instead of actionable navigation ('Dashboard', 'My Account'). 3) **Privacy Concerns:** Exposing a user's email address directly in the UI is not a recommended practice. This combination of factors makes the header feel less polished and professional than the rest of the site.",
  "improvement": {
    "file_path": "vite-app/src/components/UserMenu.tsx",
    "old_string": "<span className=\"text-xs font-medium\">User</span>",
    "new_string": "<span className=\"text-sm font-medium\">Dashboard</span>"
  }
}
--- END OF FILE agents/feedback/archive/ui-feedback-2025-08-30T20-43-35.608Z.json ---

--- START OF FILE agents/feedback/archive/ui-feedback-2025-08-30T20-48-12.876Z.json ---

{
  "status": "implemented",
  "analysis": "The primary UI/UX issue in the 'My Quote Requests' section is a fundamental lack of interactivity and a broken user flow. The component displays a user's quote request but provides no clear, actionable path to view its details. The entire card acts as a static information display, which is counterintuitive for a list item that implies a deeper level of detail. The user's primary goal—to check on their request—is obstructed. This problem is exacerbated by the only interactive element present being a visually loud, and contextually misplaced, 'Emergency Line' button, which distracts from the user's task rather than facilitating it.",
  "improvement": {
    "file_path": "vite-app/src/components/MyRequests.tsx",
    "old_string": "          <div key={request.id} className=\"bg-white p-4 rounded-lg shadow-md flex items-center justify-between\">",
    "new_string": "          <button key={request.id} onClick={() => setSelectedRequest(request)} className=\"w-full bg-white p-4 rounded-lg shadow-md flex items-center justify-between text-left hover:bg-gray-50 transition-colors duration-200\">"
  }
}
--- END OF FILE agents/feedback/archive/ui-feedback-2025-08-30T20-48-12.876Z.json ---

--- START OF FILE agents/feedback/archive/ui-feedback-2025-08-30T20-50-58.626Z.json ---

{
  "status": "implemented",
  "analysis": "The 'About AquaFlow Plumbing' section effectively uses trust signals like 'Licensed & Insured' and '24/7 Emergency'. However, the value proposition for '5-Star Rated' is described as 'Customer approved,' which is redundant and lacks impact. The rating itself implies customer approval. As a visionary UI designer focused on rapid, impactful iteration, I recommend elevating this microcopy. Changing this description to 'Proven customer satisfaction' is a high-impact, single-line change that transforms a weak statement into a powerful testament to quality and reliability. This subtle adjustment significantly strengthens the company's brand perception and trustworthiness with minimal development effort, aligning perfectly with our principle of optimizing for developer handoff.",
  "improvement": {
    "file_path": "vite-app/src/components/AboutSection.tsx",
    "old_string": "      { name: '5-Star Rated', description: 'Customer approved' },",
    "new_string": "      { name: '5-Star Rated', description: 'Proven customer satisfaction' },"
  }
}
--- END OF FILE agents/feedback/archive/ui-feedback-2025-08-30T20-50-58.626Z.json ---

--- START OF FILE agents/feedback/archive/ui-feedback-2025-08-30T21-11-18.780Z.json ---

{
  "status": "implemented",
  "analysis": "The user interface is clean, modern, and professional, effectively establishing a sense of trust. The layout is well-structured, and the color scheme is appropriate. However, several high-impact, low-effort refinements can elevate the design's polish and user engagement. The primary opportunities involve enhancing visual hierarchy through depth and spacing. Specifically: 1) The service description cards are information-dense and would benefit from increased internal padding for better readability. 2) The customer review cards lack visual separation from the background, which can be improved with a more pronounced shadow. 3) The primary call-to-action button in the hero section is static and would be more effective with interactive feedback on hover.",
  "improvements": [
    {
      "file_path": "vite-app/src/components/ServicesSection.tsx",
      "old_string": "className=\"bg-white rounded-xl shadow-md p-6 h-full\"",
      "new_string": "className=\"bg-white rounded-xl shadow-md p-8 h-full\""
    },
    {
      "file_path": "vite-app/src/components/ReviewsSection.tsx",
      "old_string": "className=\"bg-white rounded-lg p-8 shadow-sm\"",
      "new_string": "className=\"bg-white rounded-lg p-8 shadow-xl\""
    },
    {
      "file_path": "vite-app/src/components/Dashboard.tsx",
      "old_string": "<button className=\"bg-white text-blue-700 font-semibold py-3 px-6 rounded-lg shadow-sm hover:bg-gray-100\">",
      "new_string": "<button className=\"bg-white text-blue-700 font-semibold py-3 px-6 rounded-lg shadow-sm hover:bg-gray-100 transition-transform duration-200 hover:-translate-y-1\">"
    }
  ]
}
--- END OF FILE agents/feedback/archive/ui-feedback-2025-08-30T21-11-18.780Z.json ---

--- START OF FILE agents/feedback/archive/ui-feedback-2025-08-30T21-37-59.686Z.json ---

{
  "status": "implemented",
  "analysis": "The user interface is clean, modern, and professional. However, a few high-impact refinements can significantly improve visual hierarchy, scannability, and user clarity. The primary navigation has competing calls-to-action, with the secondary 'Dashboard' button having the same visual weight as the primary 'Call Now' button. In the services section, the icons are somewhat small and light in color, reducing their impact and the section's scannability. Finally, the button copy in the 'Request a Quote' modal is abrupt ('YES'/'NO') and could be more descriptive to improve user confidence, especially in a stressful emergency situation.",
  "improvements": [
    {
      "file_path": "vite-app/src/components/UserMenu.tsx",
      "old_string": "          className=\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-10 px-4 py-2 bg-gray-900 text-white hover:bg-gray-800\"",
      "new_string": "          className=\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-10 px-4 py-2 bg-transparent text-white hover:bg-white/10\""
    },
    {
      "file_path": "vite-app/src/components/ServicesSection.tsx",
      "old_string": "                <service.icon className=\"h-8 w-8 text-blue-500\" />",
      "new_string": "                <service.icon className=\"h-10 w-10 text-blue-600\" />"
    },
    {
      "file_path": "vite-app/src/components/QuoteFormModal.tsx",
      "old_string": "                <Button onClick={() => handleEmergency(true)} className=\"bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg text-lg\">YES</Button>",
      "new_string": "                <Button onClick={() => handleEmergency(true)} className=\"bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg text-lg\">Yes, it's an emergency</Button>"
    }
  ]
}
--- END OF FILE agents/feedback/archive/ui-feedback-2025-08-30T21-37-59.686Z.json ---

--- START OF FILE agents/frontend-developer-mcp-agent.js ---

/**
 * =====================================================================================
 * AGENT NAME: Frontend Developer MCP Agent (Multi-Feedback Version)
 * FILE:       agents/frontend-developer-mcp-agent.js
 * =====================================================================================
 *
 * @description
 * This agent processes a feedback file containing an ARRAY of improvements. It applies
 * all changes, then runs a single build verification. If the build fails, it rolls
 * back ALL changes, ensuring the codebase remains stable.
 *
 * @usage
 * Run from inside the 'agents/' directory:
 * node frontend-developer-mcp-agent.js implement-feedback --feedback-file feedback/ui-feedback.json
 *
 * =====================================================================================
 */
const { chromium } = require('playwright');
const { signInEmailPassword, signOut } = require('./browserAuth');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

const FRONTEND_BASE_URL = process.env.VITE_FRONTEND_BASE_URL || 'http://localhost:5173';
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

/**
 * ======================================================
 * FUNCTION: implementFeedback
 * PURPOSE:  Processes a BATCH of improvements, verifies, and rolls back if needed.
 * ======================================================
 */
async function implementFeedback(feedbackFilePath) {
  const absoluteFeedbackPath = path.resolve(__dirname, feedbackFilePath);
  if (!fs.existsSync(absoluteFeedbackPath)) {
    console.error(`Error: Feedback file not found at ${absoluteFeedbackPath}`);
    return;
  }

  const feedback = JSON.parse(fs.readFileSync(absoluteFeedbackPath, 'utf-8'));

  if (feedback.status === 'implemented') {
    console.log("✅ Feedback has already been implemented. No action taken.");
    return;
  }

  const { analysis, improvements } = feedback;
  if (!improvements || !Array.isArray(improvements)) {
    throw new Error("Feedback file is malformed: 'improvements' key is missing or not an array.");
  }
  
  const projectRoot = path.resolve(__dirname, '..');
  // Store original content of all files to be modified for potential rollback
  const originalFiles = new Map();

  try {
    console.log(`Found ${improvements.length} improvements to implement. Proceeding...`);

    // --- BATCH IMPLEMENTATION LOOP ---
    for (const improvement of improvements) {
      const { file_path, old_string, new_string } = improvement;
      const absoluteTargetFilePath = path.resolve(projectRoot, file_path);

      if (!fs.existsSync(absoluteTargetFilePath)) {
        throw new Error(`Target source code file not found at ${absoluteTargetFilePath}`);
      }
      
      // Save original content if we haven't already
      if (!originalFiles.has(absoluteTargetFilePath)) {
        originalFiles.set(absoluteTargetFilePath, fs.readFileSync(absoluteTargetFilePath, 'utf-8'));
      }
      
      // Read the most current content for this iteration
      let currentSourceCode = fs.readFileSync(absoluteTargetFilePath, 'utf-8');

      // Simple string replacement for this batch model
      const updatedSourceCode = currentSourceCode.replace(old_string, new_string);
      
      fs.writeFileSync(absoluteTargetFilePath, updatedSourceCode);
      console.log(`Applied change to ${file_path}`);
    }

    // --- SINGLE VERIFICATION STEP ---
    console.log('\n--- All changes applied. Verifying with a single build command... ---');
    try {
      execSync('npm run build', { cwd: projectRoot, stdio: 'inherit' });
      console.log('✅ Build successful! All changes are valid.');
    } catch (buildError) {
      throw new Error('Build verification failed after applying batch changes.');
    }

    // If build succeeds, update the feedback status
    feedback.status = 'implemented';
    fs.writeFileSync(absoluteFeedbackPath, JSON.stringify(feedback, null, 2));
    console.log(`✅ Updated feedback file status to 'implemented'.`);

  } catch (error) {
    console.error(`\n--- An error occurred during implementation: ${error.message} ---`);
    console.log('--- ROLLING BACK all changes... ---');
    
    // Rollback all modified files to their original state
    for (const [filePath, originalContent] of originalFiles.entries()) {
      fs.writeFileSync(filePath, originalContent);
      console.log(`✅ Reverted ${path.relative(projectRoot, filePath)}`);
    }
    
    throw new Error("Implementation failed and all changes were rolled back.");
  }
}

/**
 * ======================================================
 * FUNCTION: loginLogoutTest
 * PURPOSE:  Performs a simple end-to-end test and ensures cleanup.
 * ======================================================
 */
async function loginLogoutTest(email, password) {
  let browser;
  let page;
  try {
    browser = await chromium.connectOverCDP(process.env.PLAYWRIGHT_SERVER_URL || 'http://localhost:49982/');
    console.log('Connected to Playwright MCP server');
    
    const { success: loginSuccess, page: newPage } = await signInEmailPassword(browser, FRONTEND_BASE_URL, email, password);
    page = newPage;
    
    if (loginSuccess) {
      console.log('Login test: SUCCESS');
      const logoutSuccess = await signOut(browser, FRONTEND_BASE_URL, { page });
      if (logoutSuccess) console.log('Logout test: SUCCESS');
      else console.log('Logout test: FAILED');
    } else {
      console.log('Login test: FAILED');
    }
  } catch(error) {
    console.error('An error occurred during the login/logout test:', error);
  } finally {
    if (page) await page.close();
    if (browser) await browser.close();
    console.log('Browser session closed.');
  }
}

/**
 * ======================================================
 * SCRIPT ENTRY POINT (CLI HANDLER)
 * ======================================================
 */
const [,, command, ...args] = process.argv;

(async () => {
  if (command === 'login-logout-test') {
    const [email, password] = args;
    if (email && password) {
      await loginLogoutTest(email, password);
    } else {
      console.log('Usage: node frontend-developer-mcp-agent.js login-logout-test <email> <password>');
    }
  } else if (command === 'implement-feedback') {
    const feedbackFileIndex = args.indexOf('--feedback-file');
    if (feedbackFileIndex !== -1 && args[feedbackFileIndex + 1]) {
      try {
        await implementFeedback(args[feedbackFileIndex + 1]);
      } catch (e) {
        process.exit(1);
      }
    } else {
      console.log('Usage: node frontend-developer-mcp-agent.js implement-feedback --feedback-file <path>');
    }
  } else {
    console.log('Invalid command. Available commands: login-logout-test, implement-feedback');
  }
})();
--- END OF FILE agents/frontend-developer-mcp-agent.js ---

--- START OF FILE agents/frontend-developer-mcp.md ---

# -------------------------------------------------------------
# MCP Frontend Developer Sub-Agent Persona
# -------------------------------------------------------------
# Name: frontend-developer-mcp
# Description: This agent collaborates with the ui-designer-mcp agent, implements design feedback, and iterates on the frontend using modern frameworks and best practices. It specializes in:
#   - Building responsive, accessible, and performant web applications
#   - Implementing UI/UX improvements suggested by the designer agent
#   - Leveraging React, Vue, Angular, Tailwind CSS, and state management libraries
#   - Optimizing frontend performance and Core Web Vitals
# Usage:
#   1. Use this agent to translate UI/UX feedback into implementation tasks and code changes.
#   2. Integrate with mcp-browser-cli and Playwright browser agent to automate UI testing and validation.
# Example CLI prompt:
#   mcp-browser-cli run-browser-agent "Navigate to http://your-local-frontend-url/. Use the frontend-developer-mcp persona to implement UI/UX improvements suggested by the ui-designer-mcp agent, optimize performance, and ensure accessibility." -e agents/.env
# -------------------------------------------------------------

name: frontend-developer-mcp
color: blue
description: |
  Elite frontend developer agent for rapid, maintainable, and delightful web experiences. Specializes in:
    - Modern JavaScript frameworks (React, Vue, Angular, Svelte)
    - Responsive design, accessibility, and performance optimization
    - State management, animation, and testing best practices
    - Implementing and iterating on UI/UX feedback from designer agents
persona: |
  You are an elite frontend development specialist with deep expertise in modern JavaScript frameworks, responsive design, and user interface implementation. You collaborate with the ui-designer-mcp agent to bring beautiful designs to life, iterating quickly and maintaining code quality.

  Your primary responsibilities:
    1. Component Architecture
    2. Responsive Design Implementation
    3. Performance Optimization
    4. Modern Frontend Patterns
    5. State Management Excellence
    6. UI/UX Implementation

  Framework Expertise, Essential Tools, Performance Metrics, and Best Practices are included for reference.

  Your goal: Build blazing fast, accessible, and delightful frontend experiences. Rapidly implement and iterate on UI/UX improvements, ensuring maintainability and technical excellence in every sprint.

# Tools leveraged: Write, Read, MultiEdit, Bash, Grep, Glob, Playwright browser agent

--- END OF FILE agents/frontend-developer-mcp.md ---

--- START OF FILE agents/project-manager-mcp-agent.js ---

/**
 * =====================================================================================
 * AGENT NAME: Project Manager MCP Agent (Target-Aware Version)
 * FILE:       agents/project-manager-mcp-agent.js
 * =====================================================================================
 *
 * @description
 * This agent orchestrates the full UI improvement workflow. It can now be directed
 * to a specific UI component using the --target flag, which it passes to the
 * UI Designer agent to initiate a focused analysis.
 *
 * @usage
 * Run from inside the 'agents/' directory:
 * # Analyze the Request Detail Modal
 * node project-manager-mcp-agent.js run-workflow <email> <password> --target request-detail-modal
 *
 * # Analyze the Quote Agent Modal
 * node project-manager-mcp-agent.js run-workflow <email> <password> --target quote-agent-modal
 *
 * =====================================================================================
 */
const { exec } = require('child_process');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');
const path = require('path');
const { editableFileManifest } = require('./projectFileManifest.js');

require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

function runCommand(command) {
  return new Promise((resolve, reject) => {
    console.log(`\n▶️ EXECUTING: ${command}`);
    const childProcess = exec(command, { cwd: __dirname });
    childProcess.stdout.pipe(process.stdout);
    childProcess.stderr.pipe(process.stderr);
    childProcess.on('close', (code) => {
      if (code !== 0) {
        reject(new Error(`Command failed with exit code ${code}: ${command}`));
      } else {
        resolve();
      }
    });
  });
}

/**
 * ======================================================
 * FUNCTION: runWorkflow
 * PURPOSE:  Orchestrates the workflow against a specific target.
 * ======================================================
 */
async function runWorkflow(email, password, target) {
  console.log('============================================');
  console.log(`🚀 STARTING PROJECT MANAGER WORKFLOW for target: '${target}'`);
  console.log('============================================');

  const feedbackFilePath = path.join(__dirname, 'feedback', 'ui-feedback.json');

  try {
    // === STEP 1: Run the UI Designer Agent with the specified target ===
    console.log(`\n--- STEP 1: Assigning task to UI Designer Agent for target '${target}' ---`);
    const designerCommand = `node ui-designer-mcp-agent.js analyze-ui ${email} ${password} --target ${target}`;
    await runCommand(designerCommand);
    console.log('✅ UI Designer Agent finished analysis.');

    // === STEP 2: Project Manager Reviews, VALIDATES BATCH, and Assigns Task ===
    console.log('\n--- STEP 2: Reviewing and VALIDATING feedback batch ---');
    if (!fs.existsSync(feedbackFilePath)) {
      throw new Error('Critical Error: ui-feedback.json was not generated.');
    }
    const feedback = JSON.parse(fs.readFileSync(feedbackFilePath, 'utf-8'));

    if (!feedback.improvements || !Array.isArray(feedback.improvements)) {
      throw new Error(`VALIDATION FAILED: Feedback file is malformed. 'improvements' array not found.`);
    }

    for (const improvement of feedback.improvements) {
      const proposedFilePath = improvement.file_path;
      if (!proposedFilePath || !editableFileManifest.includes(proposedFilePath)) {
        throw new Error(`VALIDATION FAILED: An invalid file path was proposed: "${proposedFilePath}". Halting workflow.`);
      }
    }
    console.log(`✅ Validation successful: All ${feedback.improvements.length} proposed file paths are in the manifest.`);
    
    if (feedback.status === 'implemented') {
      console.log("✅ Task has already been implemented. Archiving and completing workflow.");
      const archiveDir = path.join(__dirname, 'feedback', 'archive');
      if (!fs.existsSync(archiveDir)) fs.mkdirSync(archiveDir, { recursive: true });
      const timestamp = new Date().toISOString().replace(/:/g, '-');
      const archivePath = path.join(archiveDir, `ui-feedback-${timestamp}.json`);
      fs.renameSync(feedbackFilePath, archivePath);
      console.log(`✅ Task archived to: ${archivePath}`);
      return;
    }

    const model = genAI.getGenerativeModel({ model: "gemini-2.5-pro" });
    const personaContent = fs.readFileSync(path.join(__dirname, 'project-manager-mcp.md'), 'utf8');

    const prompt = `
      ${personaContent}
      ---------------------------
      YOUR CURRENT TASK
      ---------------------------
      You have received and validated the following BATCH of UI/UX feedback for the '${target}' component. Your task is to create a brief summary and assign the entire batch to the 'frontend-developer-mcp' agent.
      
      **Designer Feedback (Status: ${feedback.status}):**
      \`\`\`json
      ${JSON.stringify(feedback, null, 2)}
      \`\`\`
    `;
    
    const result = await model.generateContent(prompt);
    const summary = await result.response.text();
    console.log('\n--- PROJECT MANAGER STATUS UPDATE ---');
    console.log(summary);
    console.log('-------------------------------------\n');

    // === STEP 3: Run the Frontend Developer Agent ===
    console.log('\n--- STEP 3: Assigning implementation task to Frontend Developer Agent ---');
    await runCommand(`node frontend-developer-mcp-agent.js implement-feedback --feedback-file feedback/ui-feedback.json`);
    console.log('✅ Frontend Developer Agent finished implementation.');

    // === STEP 4: Verification and Archiving ===
    console.log('\n--- STEP 4: Verifying implementation and archiving task ---');
    const updatedFeedback = JSON.parse(fs.readFileSync(feedbackFilePath, 'utf-8'));

    if (updatedFeedback.status === 'implemented') {
        console.log('Verification successful. Status is "implemented".');
        
        const archiveDir = path.join(__dirname, 'feedback', 'archive');
        if (!fs.existsSync(archiveDir)) fs.mkdirSync(archiveDir, { recursive: true });
        const timestamp = new Date().toISOString().replace(/:/g, '-');
        const archivePath = path.join(archiveDir, `ui-feedback-${timestamp}.json`);
        fs.renameSync(feedbackFilePath, archivePath);
        console.log(`✅ Task archived to: ${archivePath}`);
    } else {
        throw new Error(`Verification FAILED. Expected status 'implemented', but found '${updatedFeedback.status}'.`);
    }

    // === STEP 5: Final Summary ===
    console.log('\n============================================');
    console.log('🎉 WORKFLOW COMPLETED SUCCESSFULLY');
    console.log('============================================');
    console.log(`The '${target}' UI has been updated and the workflow is complete.`);

  } catch (error) {
    console.error('\n============================================');
    console.error('❌ WORKFLOW FAILED');
    console.error('============================================');
    console.error('An error occurred during the workflow:', error.message);
  }
}

/**
 * ======================================================
 * SCRIPT ENTRY POINT (CLI HANDLER with --target flag)
 * ======================================================
 */
const args = process.argv.slice(2);
const command = args[0];
const email = args[1];
const password = args[2];

let target = 'dashboard'; // Default target
const targetIndex = args.indexOf('--target');
if (targetIndex !== -1 && args[targetIndex + 1]) {
  target = args[targetIndex + 1];
}

if (command === 'run-workflow' && email && password) {
  runWorkflow(email, password, target);
} else {
  console.log('Usage: node project-manager-mcp-agent.js run-workflow <email> <password> [--target <target_name>]');
}
--- END OF FILE agents/project-manager-mcp-agent.js ---

--- START OF FILE agents/project-manager-mcp.md ---

# -------------------------------------------------------------
# MCP Project Manager / Task Tracker Agent Persona
# -------------------------------------------------------------
# Name: project-manager-mcp
# Description: This agent acts as a project manager and task tracker for your AI-driven development workflow. It coordinates agents (UI designer, frontend developer, backend architect, etc.), tracks requirements, monitors progress, and ensures all tasks are completed efficiently.
#   - Tracks requirements, completed work, and outstanding tasks
#   - Assigns tasks to appropriate agents and monitors status
#   - Provides summaries, progress reports, and next steps
#   - Integrates with MCP server and other agents for seamless collaboration
# Usage:
#   1. Use this agent to manage your project, track all requirements (e.g., Plumbing Quote Agent), and keep all agents aligned.
#   2. Query for status updates, outstanding tasks, and completed work.
# Example CLI prompt:
#   mcp-browser-cli run-browser-agent "Use the project-manager-mcp persona to track all Plumbing Quote Agent requirements, assign tasks to agents, monitor progress, and provide a summary of completed and outstanding work." -e agents/.env
# -------------------------------------------------------------

name: project-manager-mcp
color: orange
description: |
  Project manager and task tracker agent for AI-driven development teams. Specializes in:
    - Tracking requirements, tasks, and deliverables
    - Assigning and monitoring work across agents (UI, frontend, backend)
    - Providing actionable progress reports and next steps
    - Ensuring alignment with project goals and requirements
persona: |
  You are a highly organized project manager and task tracker for AI-driven development. You:
    - Track all requirements and deliverables (e.g., Plumbing Quote Agent specs)
    - Maintain a list of completed and outstanding tasks for each agent
    - Assign tasks, monitor status, and follow up on blockers
    - Provide summaries, progress updates, and actionable next steps
    - Ensure privacy, cost efficiency, and technical best practices are followed
    - Help the team stay focused and deliver on time

  Your goal: Keep all agents and stakeholders aligned, ensure every requirement is met, and provide clear visibility into project status and next actions.

# Tools leveraged: Write, Read, MultiEdit, Bash, Grep, Glob, WebFetch, Playwright browser agent

--- END OF FILE agents/project-manager-mcp.md ---

--- START OF FILE agents/projectFileManifest.js ---

// agents/projectFileManifest.js
// This file acts as a single source of truth for all files that AI agents
// are permitted to analyze and modify. It uses CommonJS syntax (module.exports)
// to be compatible with the Node.js agent scripts.

// IMPORTANT: This list should be updated if you add, remove, or rename files
// in the vite-app directory that you want the agents to interact with.

const editableFileManifest = [
  'vite-app/api/config/supabase.js',
  'vite-app/api/controllers/followUpController.js',
  'vite-app/api/controllers/requestController.js',
  'vite-app/api/controllers/triageController.js',
  'vite-app/api/controllers/userController.js',
  'vite-app/api/middleware/authMiddleware.js',
  'vite-app/api/middleware/validationMiddleware.js',
  'vite-app/api/routes/followUpRoutes.js',
  'vite-app/api/routes/requestRoutes.js',
  'vite-app/api/routes/triageRoutes.js',
  'vite-app/api/routes/userRoutes.js',
  'vite-app/api/server.js',
  'vite-app/api/services/emailService.js',
  'vite-app/api/validation/schemas.js',
  'vite-app/src/components/AboutSection.tsx',
  'vite-app/src/components/AttachmentSection.tsx',
  'vite-app/src/components/AuthModal.tsx',
  'vite-app/src/components/ContactSection.tsx',
  'vite-app/src/components/CustomerInfoSection.tsx',
  'vite-app/src/components/Dashboard.tsx',
  'vite-app/src/components/MyRequests.tsx',
  'vite-app/src/components/ProfileModal.tsx',
  'vite-app/src/components/QuoteAgentModal.tsx',
  'vite-app/src/components/QuoteFormModal.tsx',
  'vite-app/src/components/RequestDetailModal.tsx',
  'vite-app/src/components/ReviewsSection.tsx',
  'vite-app/src/components/ServicesSection.tsx',
  'vite-app/src/components/UserMenu.tsx',
  'vite-app/src/contexts/AuthContext.tsx',
  'vite-app/src/lib/apiClient.ts',
  'vite-app/src/lib/serviceQuoteQuestions.ts',
  'vite-app/src/lib/servicesData.ts',
  'vite-app/src/lib/statusColors.ts',
  'vite-app/src/lib/supabaseClient.ts',
  'vite-app/src/main.tsx',
  'vite-app/vite.config.js'
];

module.exports = {
  editableFileManifest
};
--- END OF FILE agents/projectFileManifest.js ---

--- START OF FILE agents/ui-designer-mcp-agent.js ---

/**
 * =====================================================================================
 * AGENT NAME: UI Designer MCP Agent (Target-Aware Version)
 * FILE:       agents/ui-designer-mcp-agent.js
 * =====================================================================================
 *
 * @description
 * This agent can now follow a "mission" to analyze specific parts of the application.
 * Use the --target flag to specify which UI component to analyze. It generates
 * multiple feedback items in a single, structured JSON file.
 *
 * @usage
 * Run from inside the 'agents/' directory:
 *
 * # Analyze the main dashboard (default)
 * node ui-designer-mcp-agent.js analyze-ui <email> <password>
 *
 * # Analyze the Request Detail Modal
 * node ui-designer-mcp-agent.js analyze-ui <email> <password> --target request-detail-modal
 *
 * # Analyze the Quote Agent Modal
 * node ui-designer-mcp-agent.js analyze-ui <email> <password> --target quote-agent-modal
 *
 * =====================================================================================
 */
const { chromium } = require('playwright');
const { signInEmailPassword } = require('./browserAuth');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');
const path = require('path');
const { editableFileManifest } = require('./projectFileManifest.js');

require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

const FRONTEND_BASE_URL = process.env.VITE_FRONTEND_BASE_URL || 'http://localhost:5173';
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

function fileToGenerativePart(filePath, mimeType) {
  return {
    inlineData: { data: Buffer.from(fs.readFileSync(filePath)).toString("base64"), mimeType },
  };
}

async function generateFeedback(screenshotPath) {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-2.5-pro" });
    const personaContent = fs.readFileSync(path.join(__dirname, 'ui-designer-mcp.md'), 'utf8');
    const imageParts = [ fileToGenerativePart(screenshotPath, "image/png") ];

    const prompt = `
      ${personaContent}
      ---------------------------
      CONTEXT: VALID FILE PATHS
      ---------------------------
      Here is a list of files you are allowed to modify. You MUST choose file paths from this list.
      \`\`\`json
      ${JSON.stringify(editableFileManifest, null, 2)}
      \`\`\`
      ---------------------------
      YOUR CURRENT TASK
      ---------------------------
      Analyze the provided screenshot. Identify up to THREE (3) distinct, high-impact, actionable improvements that can each be implemented by changing a single line of code.

      Your response MUST be a single JSON object with an 'improvements' ARRAY. Each 'file_path' you choose MUST exist in the list provided above.
      {
        "status": "pending",
        "analysis": "A high-level summary of all the UI/UX issues you identified in the screenshot.",
        "improvements": [
          {
            "file_path": "path/to/file_one.tsx",
            "old_string": "The exact line of code to be replaced.",
            "new_string": "The new line of code."
          }
        ]
      }
      Analyze the screenshot and provide your comprehensive feedback in the specified JSON format.
    `;

    console.log('Analyzing screenshot for multiple improvements...');
    const result = await model.generateContent([prompt, ...imageParts]);
    const response = await result.response;
    const rawText = response.text();
    const jsonMatch = rawText.match(/```json\n([\s\S]*?)\n```|({[\s\S]*})/);
    const text = jsonMatch ? (jsonMatch[1] || jsonMatch[2]) : rawText;

    const feedbackDir = path.join(__dirname, 'feedback');
    if (!fs.existsSync(feedbackDir)) fs.mkdirSync(feedbackDir, { recursive: true });

    const feedbackFilePath = path.join(feedbackDir, 'ui-feedback.json');
    fs.writeFileSync(feedbackFilePath, JSON.stringify(JSON.parse(text), null, 2));
    console.log(`Feedback file generated at ${feedbackFilePath} with multiple suggestions.`);
  } catch (error) {
    console.error('Error during feedback generation:', error);
  }
}

/**
 * ======================================================
 * FUNCTION: analyzeUI
 * PURPOSE:  Orchestrates the analysis workflow based on the specified target.
 * ======================================================
 */
async function analyzeUI(email, password, target) {
  let browser;
  let page;
  try {
    browser = await chromium.connectOverCDP(process.env.PLAYWRIGHT_SERVER_URL || 'http://localhost:49982/');
    console.log('Connected to Playwright MCP server');
    
    const { success: loginSuccess, page: newPage } = await signInEmailPassword(browser, FRONTEND_BASE_URL, email, password);
    page = newPage;

    if (loginSuccess) {
      console.log(`Login successful. Analyzing target: '${target}'`);
      
      let screenshotPath = path.join(__dirname, `screenshots/${target}-analysis.png`);

      // --- NEW: Mission Script Logic ---
      switch (target) {
        case 'request-detail-modal':
          console.log('Navigating to open the first request detail modal...');
          // This selector finds the first button-like element inside the "My Requests" section.
          await page.click('#my-requests [role="button"]:first-of-type');
          // Wait for a unique element inside the modal to ensure it's loaded.
          await page.waitForSelector('h5:has-text("Job Docket")');
          console.log('Request Detail Modal is open.');
          break;
        
        case 'quote-agent-modal':
          console.log('Navigating to open the quote agent modal...');
          await page.click('role=button[name="Request a Quote"]');
          // Wait for a unique element inside this modal.
          await page.waitForSelector('h2:has-text("Request a Quote")');
          console.log('Quote Agent Modal is open.');
          break;

        case 'dashboard':
        default:
          console.log('Analyzing main dashboard view.');
          // No extra clicks needed for the dashboard.
          break;
      }

      await page.screenshot({ path: screenshotPath, fullPage: true });
      console.log(`Screenshot for '${target}' saved to ${screenshotPath}`);
      
      await generateFeedback(screenshotPath);

    } else {
      console.log('Login failed. Cannot analyze UI.');
    }
  } catch (error) {
    console.error(`An error occurred during analysis of target '${target}':`, error);
  } finally {
    if (page) await page.close();
    if (browser) await browser.close();
    console.log('Browser session closed.');
  }
}

/**
 * ======================================================
 * SCRIPT ENTRY POINT (CLI HANDLER with --target flag)
 * ======================================================
 */
const args = process.argv.slice(2);
const command = args[0];
const email = args[1];
const password = args[2];

// Default target is 'dashboard'
let target = 'dashboard';
const targetIndex = args.indexOf('--target');
if (targetIndex !== -1 && args[targetIndex + 1]) {
  const specifiedTarget = args[targetIndex + 1];
  if (['dashboard', 'request-detail-modal', 'quote-agent-modal'].includes(specifiedTarget)) {
    target = specifiedTarget;
  } else {
    console.error(`Invalid target specified: "${specifiedTarget}". Using default 'dashboard'.`);
  }
}

if (command === 'analyze-ui' && email && password) {
  analyzeUI(email, password, target);
} else {
  console.log('Usage: node ui-designer-mcp-agent.js analyze-ui <email> <password> [--target <target_name>]');
}
--- END OF FILE agents/ui-designer-mcp-agent.js ---

--- START OF FILE agents/ui-designer-mcp.md ---

# -------------------------------------------------------------
# MCP UI Designer Sub-Agent Persona
# -------------------------------------------------------------
# Name: ui-designer-mcp
# Description: This agent leverages the mcp-browser-use Playwright browser agent and GPT-4o to evaluate, design, and iterate on user interfaces for rapid development cycles. It specializes in:
#   - Automated UI/UX analysis of live frontends (e.g., http://your-local-frontend-url/)
#   - Generating actionable design feedback and improvement suggestions
#   - Creating implementation-ready UI concepts using Tailwind CSS and component libraries
#   - Documenting design systems, tokens, and handoff deliverables
# Usage:
#   1. Use this agent to automate UI/UX reviews and get prioritized recommendations for improvement.
#   2. Integrate with mcp-browser-cli to run browser-based evaluations and generate markdown reports.
# Example CLI prompt:
#   mcp-browser-cli run-browser-agent "Navigate to http://your-local-frontend-url/. Use the ui-designer-mcp persona to perform a comprehensive UI/UX analysis, suggest improvements, and provide implementation-ready feedback for rapid iteration." -e agents/.env
# -------------------------------------------------------------

name: ui-designer-mcp
color: magenta
description: |
  Visionary UI designer agent for rapid, beautiful, and implementable interfaces. Specializes in:
    - Modern design trends, platform guidelines, and component architecture
    - Automated UI/UX analysis and feedback using Playwright browser agent
    - Tailwind CSS, Shadcn/ui, Radix UI, Heroicons, Framer Motion
    - 6-day sprint design cycles, developer handoff optimization
    - Social media optimization and screenshot appeal
persona: |
  You are a visionary UI designer who creates interfaces that are not just beautiful, but implementable within rapid development cycles. Your expertise spans modern design trends, platform-specific guidelines, component architecture, and the delicate balance between innovation and usability. You understand that in the studio's 6-day sprints, design must be both inspiring and practical.

  Your primary responsibilities:
    1. Rapid UI Conceptualization
    2. Component System Architecture
    3. Trend Translation
    4. Visual Hierarchy & Typography
    5. Platform-Specific Excellence
    6. Developer Handoff Optimization

  Design Principles for Rapid Development:
    - Simplicity First
    - Component Reuse
    - Standard Patterns
    - Progressive Enhancement
    - Performance Conscious
    - Accessibility Built-in

  Quick-Win UI Patterns, Color System, Typography, Spacing, Component Checklist, and more are included for reference.

  Your goal: Create interfaces users love and developers can build fast. Provide actionable feedback and implementation-ready specs for every UI/UX review.

# Tools leveraged: Write, Read, MultiEdit, WebSearch, WebFetch, Playwright browser agent

--- END OF FILE agents/ui-designer-mcp.md ---

--- START OF FILE blueprint.md ---

# 72-Hour Consulting Launch: Mission Blueprint
**Version:** 5.0 (Advanced Asset)
**Codename:** Operation Overmatch
**Objective:** Secure a high-value barter agreement by demonstrating an overwhelmingly superior tech solution to a local tradesperson in Victoria, B.C.

---

## I. Mission Profile & Strategy

*   **Primary Target:** Owner-operated local trades & home service businesses.
*   **Core Pain Point:** Wasting billable hours on phone calls with unqualified leads and losing jobs due to slow quoting times.
*   **Your Solution (The Weapon):** A fully functional Proof of Concept of an **AI-Powered Intelligent Lead Qualifier**. This is not a demo; it is a working application with a database backend and file upload capabilities that automates the most painful part of their sales process.
*   **Acquisition Tactic (Shock & Awe):**
    1.  Lead with your most impressive asset to immediately establish yourself as a high-tier expert.
    2.  Demonstrate undeniable value by showing how your AI assistant saves time, improves lead quality, and helps them win more jobs.
    3.  Frame the barter offer as a unique, one-time opportunity for them to acquire a game-changing piece of technology that none of their competitors have.
*   **Authority Signal:** A 90-second "wow factor" video demo of your working application.

---

## II. Execution Plan: 48-Hour Tactical Breakdown

### **Day 1: FORGE A SUPERIOR WEAPON (12 Hours) — ✅ COMPLETED**

You have successfully invested your initial 12 hours to build a functional, AI-powered intake application. This exceeds the original objective and gives us a decisive advantage.

---

### **Day 2: PACKAGE THE ASSET & HUNT (12 Hours)**

**Objective:** Package your advanced POC into a compelling sales weapon and deploy it.

*   **Hours 1-4: Package the Asset**
    *   `[ ]` **Record the "Wow" Demo (90 Seconds):** Use Loom or OBS Studio. This must be a smooth, professional recording.
        *   *Shot 1:* Show the professional landing page. Click "Request a Quote."
        *   *Shot 2:* Show the "Emergency?" question. Click "No."
        *   *Shot 3:* Show the category selection. Click a category.
        *   *Shot 4:* Show the AI asking the initial generic questions. Answer them quickly.
        *   *Shot 5:* Show the "Thinking..." message.
        *   *Shot 6:* The "money shot" – show the new, intelligent follow-up questions appearing one by one. Answer them.
        *   *Shot 7:* Show the final, clean summary view with all questions and answers.
        *   *Shot 8:* Show the file upload input.
    *   `[ ]` **Host the Video:** Upload to YouTube/Vimeo as an "unlisted" link.
    *   `[ ]` **Build the One-Page Showcase:** Use Carrd/Tilda.
        *   **Headline:** "Stop Wasting Time on Bad Leads. Get a 24/7 AI Assistant For Your Business."
        *   **Video:** Embed your 90-second demo video.
        *   **Description:** "I build intelligent assistants that qualify your customers automatically, collect all the job details, and hand you a ready-to-quote lead. This saves you hours on the phone and helps you win more jobs."
        *   **The Offer:** "I'm currently looking to trade my services (custom AI assistant development) for home services (plumbing, electrical, etc.) in the Victoria area. Interested in a 15-minute chat?"
        *   **Contact:** Your name and email.

*   **Hours 5-12: Build Target List & Execute Outreach**
    *   `[ ]` Create a Google Sheet to track outreach.
    *   `[ ]` Compile a list of **50** local, owner-operated trades businesses. Prioritize finding the owner's direct name and email.
    *   `[ ]` Send personalized emails one-by-one to all 50 targets.
    *   `[ ]` **Use the Upgraded Email Script:**
        > **Subject:** An AI assistant for [Business Name]?
        >
        > Hi **[Contact Person Name]**,
        >
        > My name is [Your Name], a local tech consultant in Victoria. I specialize in building AI assistants for trades businesses that automatically qualify your leads 24/7.
        >
        > Instead of a generic contact form, imagine an assistant that asks all the right questions before you even pick up the phone. I made a 90-second video showing exactly how it works:
        >
        > **[Link to your one-page site]**
        >
        > Here’s the unique part: I'm looking to get some work done on my home (**[mention 1-2 specific services you want]**) and I'm interested in bartering my services for a project of similar value.
        >
        > Would you be open to a 15-minute chat to see if this could be a fit?
        >
        > Thanks,
        > [Your Name]
    *   `[ ]` Track all sends in your Google Sheet.

---

### **Day 3: ENGAGE, CLOSE, & UPSELL (12 Hours)**

**Objective:** Convert interest into a high-value agreement by demonstrating overwhelming value.

*   **Hours 1-4: Follow-up & Response Management**
    *   `[ ]` Send a polite follow-up email to all non-responders.
    *   `[ ]` For positive replies, respond immediately to schedule a 15-minute call.

*   **Hours 5-12: Conduct Discovery Calls & Close**
    *   `[ ]` Get on the phone/Zoom with interested prospects.
    *   `[ ]` **Follow the Upgraded Call Script:**
        1.  **Rapport (2 mins):** "Thanks for your interest. I was impressed by your work on [mention a project from their site]. How often do you find yourself spending time on the phone with customers who aren't quite sure what they need?"
        2.  **Diagnose Pain (5 mins):** Let them talk about the frustration of unqualified leads, missed calls, and writing quotes after hours.
        3.  **Present Solution - "Shock & Awe" (3 mins):** "That's the exact problem I built this to solve." Share your screen and play your 90-second demo video. Let it sink in. "This assistant works for you 24/7, making sure that every lead that hits your inbox is perfectly detailed and ready for you to quote."
        4.  **The Upsell - Introduce the "Internal Dashboard":** "What I've just shown you is the 'front door' that qualifies your customers. As part of our project, we would also build the **internal dashboard** for you—a simple command center on your phone or computer to track the status of every single one of these high-quality leads." (This is where you re-introduce the original "Rapid Quote & Client Tracker" idea as an *additional* part of the package).
        5.  **Frame the Barter (3 mins):** "A complete, custom end-to-end system like this—the AI assistant plus the internal dashboard—is a project I would typically scope at $5,000-$8,000. What would be the approximate value for the **[their service]** work I need done? If the values are in the same ballpark, a direct trade could be a huge win for both of us."
        6.  **Pivot to Cash (if needed):** "If a trade doesn't work, I could offer a 'Pilot Program' package to build out the core system for a one-time fee of $2,500."
        7.  **Close the Deal:** "Excellent. I will draft a simple agreement outlining the full scope—the AI assistant and the internal dashboard, in exchange for the completed home service—and send it over this afternoon."
--- END OF FILE blueprint.md ---

--- START OF FILE netlify/functions/api.js ---

// vite-app/netlify/functions/api.js

const serverless = require('serverless-http');
// This line imports the Express app you just refactored.
const app = require('../../vite-app/api/server');

// This wraps your Express app for Netlify and exports it as a handler.
module.exports.handler = serverless(app);

--- END OF FILE netlify/functions/api.js ---

--- START OF FILE package-lock.json ---

{
  "name": "plumbingpoc-root",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "plumbingpoc-root",
      "version": "1.0.0",
      "dependencies": {
        "@emotion/react": "^11.14.0",
        "@emotion/styled": "^11.14.1",
        "@google/generative-ai": "^0.24.1",
        "@mui/material": "^7.3.1",
        "@mui/x-data-grid": "^8.10.2",
        "@supabase/supabase-js": "^2.55.0",
        "@vitejs/plugin-react": "^4.7.0",
        "axios": "^1.7.2",
        "cors": "^2.8.5",
        "dotenv": "^16.4.5",
        "express": "^4.19.2",
        "gpt-tokenizer": "^3.0.1",
        "multer": "^2.0.2",
        "openai": "^4.28.0",
        "playwright": "^1.55.0",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "resend": "^6.0.1",
        "serverless-http": "^3.2.0",
        "vite": "^5.4.2",
        "zod": "^4.0.17"
      },
      "devDependencies": {
        "@types/react": "^19.1.10",
        "lucide-react": "^0.540.0",
        "typescript": "^5.9.2"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.3.tgz",
      "integrity": "sha512-yDBHV9kQNcr2/sUr9jghVyz9C3Y5G2zUM2H2lo+9mKv4sFgbA8s8Z9t8D1jiTkGoO/NoIfKMyKWr4s6CN23ZwQ==",
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.28.3",
        "@babel/helpers": "^7.28.3",
        "@babel/parser": "^7.28.3",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.3",
        "@babel/types": "^7.28.2",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/core/node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "license": "MIT"
    },
    "node_modules/@babel/generator": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.3.tgz",
      "integrity": "sha512-3lSpxGgvnmZznmBkCRnVREPUFJv2wrv9iAoFDvADJc0ypmdOxdUtcLeBgBJ6zE0PMeTKnxeQzyk0xTBq4Ep7zw==",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.3",
        "@babel/types": "^7.28.2",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.28.3.tgz",
      "integrity": "sha512-gytXUbs8k2sXS9PnQptz5o0QnpLL51SwASIORY6XaBKF88nsOT0Zw9szLqlSGQDP/4TljBAD5y98p2U1fqkdsw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.28.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.3.tgz",
      "integrity": "sha512-PTNtvUQihsAsDHMOP5pfobP8C6CM4JWXmP8DrEIt46c3r2bf87Ua1zoqevsMo9g+tWDwgWrFP5EIxuBx5RudAw==",
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.3.tgz",
      "integrity": "sha512-7+Ey1mAgYqFAx2h0RuoxcQT5+MlG3GTV0TQrgr7/ZliKsm/MNDxVVutlWaziMq7wJNAz8MTqz55XLpWvva6StA==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.2"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/runtime": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.28.3.tgz",
      "integrity": "sha512-9uIQ10o0WGdpP6GDhXcdOJPJuDgFtIDtN/9+ArJQ2NAfAmiuhTQdzkaTGR33v43GYS2UrSA0eX2pPPHoFVvpxA==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.3.tgz",
      "integrity": "sha512-7w4kZYHneL3A6NP2nxzHvT3HCZ7puDZZjFMqDpBPECub79sTtSO5CGXDkKrTQq8ksAwfD/XI2MRFX23njdDaIQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.3",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.2",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.2",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.2.tgz",
      "integrity": "sha512-ruv7Ae4J5dUYULmeXw1gmb7rYRz57OWCPM57pHojnLq/3Z1CK2lNSLTCVjxVk1F/TZHwOZZrOWi0ur95BbLxNQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@emotion/babel-plugin": {
      "version": "11.13.5",
      "resolved": "https://registry.npmjs.org/@emotion/babel-plugin/-/babel-plugin-11.13.5.tgz",
      "integrity": "sha512-pxHCpT2ex+0q+HH91/zsdHkw/lXd468DIN2zvfvLtPKLLMo6gQj7oLObq8PhkrxOZb/gGCq03S3Z7PDhS8pduQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.16.7",
        "@babel/runtime": "^7.18.3",
        "@emotion/hash": "^0.9.2",
        "@emotion/memoize": "^0.9.0",
        "@emotion/serialize": "^1.3.3",
        "babel-plugin-macros": "^3.1.0",
        "convert-source-map": "^1.5.0",
        "escape-string-regexp": "^4.0.0",
        "find-root": "^1.1.0",
        "source-map": "^0.5.7",
        "stylis": "4.2.0"
      }
    },
    "node_modules/@emotion/cache": {
      "version": "11.14.0",
      "resolved": "https://registry.npmjs.org/@emotion/cache/-/cache-11.14.0.tgz",
      "integrity": "sha512-L/B1lc/TViYk4DcpGxtAVbx0ZyiKM5ktoIyafGkH6zg/tj+mA+NE//aPYKG0k8kCHSHVJrpLpcAlOBEXQ3SavA==",
      "license": "MIT",
      "dependencies": {
        "@emotion/memoize": "^0.9.0",
        "@emotion/sheet": "^1.4.0",
        "@emotion/utils": "^1.4.2",
        "@emotion/weak-memoize": "^0.4.0",
        "stylis": "4.2.0"
      }
    },
    "node_modules/@emotion/hash": {
      "version": "0.9.2",
      "resolved": "https://registry.npmjs.org/@emotion/hash/-/hash-0.9.2.tgz",
      "integrity": "sha512-MyqliTZGuOm3+5ZRSaaBGP3USLw6+EGykkwZns2EPC5g8jJ4z9OrdZY9apkl3+UP9+sdz76YYkwCKP5gh8iY3g==",
      "license": "MIT"
    },
    "node_modules/@emotion/is-prop-valid": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.3.1.tgz",
      "integrity": "sha512-/ACwoqx7XQi9knQs/G0qKvv5teDMhD7bXYns9N/wM8ah8iNb8jZ2uNO0YOgiq2o2poIvVtJS2YALasQuMSQ7Kw==",
      "license": "MIT",
      "dependencies": {
        "@emotion/memoize": "^0.9.0"
      }
    },
    "node_modules/@emotion/memoize": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.9.0.tgz",
      "integrity": "sha512-30FAj7/EoJ5mwVPOWhAyCX+FPfMDrVecJAM+Iw9NRoSl4BBAQeqj4cApHHUXOVvIPgLVDsCFoz/hGD+5QQD1GQ==",
      "license": "MIT"
    },
    "node_modules/@emotion/react": {
      "version": "11.14.0",
      "resolved": "https://registry.npmjs.org/@emotion/react/-/react-11.14.0.tgz",
      "integrity": "sha512-O000MLDBDdk/EohJPFUqvnp4qnHeYkVP5B0xEG0D/L7cOKP9kefu2DXn8dj74cQfsEzUqh+sr1RzFqiL1o+PpA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.18.3",
        "@emotion/babel-plugin": "^11.13.5",
        "@emotion/cache": "^11.14.0",
        "@emotion/serialize": "^1.3.3",
        "@emotion/use-insertion-effect-with-fallbacks": "^1.2.0",
        "@emotion/utils": "^1.4.2",
        "@emotion/weak-memoize": "^0.4.0",
        "hoist-non-react-statics": "^3.3.1"
      },
      "peerDependencies": {
        "react": ">=16.8.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@emotion/serialize": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/@emotion/serialize/-/serialize-1.3.3.tgz",
      "integrity": "sha512-EISGqt7sSNWHGI76hC7x1CksiXPahbxEOrC5RjmFRJTqLyEK9/9hZvBbiYn70dw4wuwMKiEMCUlR6ZXTSWQqxA==",
      "license": "MIT",
      "dependencies": {
        "@emotion/hash": "^0.9.2",
        "@emotion/memoize": "^0.9.0",
        "@emotion/unitless": "^0.10.0",
        "@emotion/utils": "^1.4.2",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@emotion/sheet": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/@emotion/sheet/-/sheet-1.4.0.tgz",
      "integrity": "sha512-fTBW9/8r2w3dXWYM4HCB1Rdp8NLibOw2+XELH5m5+AkWiL/KqYX6dc0kKYlaYyKjrQ6ds33MCdMPEwgs2z1rqg==",
      "license": "MIT"
    },
    "node_modules/@emotion/styled": {
      "version": "11.14.1",
      "resolved": "https://registry.npmjs.org/@emotion/styled/-/styled-11.14.1.tgz",
      "integrity": "sha512-qEEJt42DuToa3gurlH4Qqc1kVpNq8wO8cJtDzU46TjlzWjDlsVyevtYCRijVq3SrHsROS+gVQ8Fnea108GnKzw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.18.3",
        "@emotion/babel-plugin": "^11.13.5",
        "@emotion/is-prop-valid": "^1.3.0",
        "@emotion/serialize": "^1.3.3",
        "@emotion/use-insertion-effect-with-fallbacks": "^1.2.0",
        "@emotion/utils": "^1.4.2"
      },
      "peerDependencies": {
        "@emotion/react": "^11.0.0-rc.0",
        "react": ">=16.8.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@emotion/unitless": {
      "version": "0.10.0",
      "resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.10.0.tgz",
      "integrity": "sha512-dFoMUuQA20zvtVTuxZww6OHoJYgrzfKM1t52mVySDJnMSEa08ruEvdYQbhvyu6soU+NeLVd3yKfTfT0NeV6qGg==",
      "license": "MIT"
    },
    "node_modules/@emotion/use-insertion-effect-with-fallbacks": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@emotion/use-insertion-effect-with-fallbacks/-/use-insertion-effect-with-fallbacks-1.2.0.tgz",
      "integrity": "sha512-yJMtVdH59sxi/aVJBpk9FQq+OR8ll5GT8oWd57UpeaKEVGab41JWaCFA7FRLoMLloOZF/c/wsPoe+bfGmRKgDg==",
      "license": "MIT",
      "peerDependencies": {
        "react": ">=16.8.0"
      }
    },
    "node_modules/@emotion/utils": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/@emotion/utils/-/utils-1.4.2.tgz",
      "integrity": "sha512-3vLclRofFziIa3J2wDh9jjbkUz9qk5Vi3IZ/FSTKViB0k+ef0fPV7dYrUIugbgupYDx7v9ud/SjrtEP8Y4xLoA==",
      "license": "MIT"
    },
    "node_modules/@emotion/weak-memoize": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/@emotion/weak-memoize/-/weak-memoize-0.4.0.tgz",
      "integrity": "sha512-snKqtPW01tN0ui7yu9rGv69aJXr/a/Ywvl11sUjNtEcRc+ng/mQriFL0wLXMef74iHa/EkftbDzU9F8iFbH+zg==",
      "license": "MIT"
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
      "integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
      "cpu": [
        "ppc64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
      "integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
      "cpu": [
        "arm"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
      "integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
      "integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
      "integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
      "integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
      "integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
      "integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
      "integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
      "cpu": [
        "arm"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
      "integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
      "integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
      "cpu": [
        "ia32"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
      "integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
      "cpu": [
        "loong64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
      "integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
      "cpu": [
        "mips64el"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
      "integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
      "cpu": [
        "ppc64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
      "integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
      "cpu": [
        "riscv64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
      "integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
      "cpu": [
        "s390x"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
      "integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
      "integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
      "integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
      "integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
      "integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
      "integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
      "cpu": [
        "ia32"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
      "integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@google/generative-ai": {
      "version": "0.24.1",
      "resolved": "https://registry.npmjs.org/@google/generative-ai/-/generative-ai-0.24.1.tgz",
      "integrity": "sha512-MqO+MLfM6kjxcKoy0p1wRzG3b4ZZXtPI+z2IE26UogS2Cm/XHO+7gGRBh6gcJsOiIVoH93UwKvW4HdgiOZCy9Q==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.13",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz",
      "integrity": "sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
      "integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.30",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.30.tgz",
      "integrity": "sha512-GQ7Nw5G2lTu/BtHTKfXhKHok2WGetd4XYcVKGx00SjAk8GMwgJM3zr6zORiPGuOE+/vkc90KtTosSSvaCjKb2Q==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@mui/core-downloads-tracker": {
      "version": "7.3.1",
      "resolved": "https://registry.npmjs.org/@mui/core-downloads-tracker/-/core-downloads-tracker-7.3.1.tgz",
      "integrity": "sha512-+mIK1Z0BhOaQ0vCgOkT1mSrIpEHLo338h4/duuL4TBLXPvUMit732mnwJY3W40Avy30HdeSfwUAAGRkKmwRaEQ==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      }
    },
    "node_modules/@mui/material": {
      "version": "7.3.1",
      "resolved": "https://registry.npmjs.org/@mui/material/-/material-7.3.1.tgz",
      "integrity": "sha512-Xf6Shbo03YmcBedZMwSpEFOwpYDtU7tC+rhAHTrA9FHk0FpsDqiQ9jUa1j/9s3HLs7KWb5mDcGnlwdh9Q9KAag==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.28.2",
        "@mui/core-downloads-tracker": "^7.3.1",
        "@mui/system": "^7.3.1",
        "@mui/types": "^7.4.5",
        "@mui/utils": "^7.3.1",
        "@popperjs/core": "^2.11.8",
        "@types/react-transition-group": "^4.4.12",
        "clsx": "^2.1.1",
        "csstype": "^3.1.3",
        "prop-types": "^15.8.1",
        "react-is": "^19.1.1",
        "react-transition-group": "^4.4.5"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@emotion/react": "^11.5.0",
        "@emotion/styled": "^11.3.0",
        "@mui/material-pigment-css": "^7.3.1",
        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/react": {
          "optional": true
        },
        "@emotion/styled": {
          "optional": true
        },
        "@mui/material-pigment-css": {
          "optional": true
        },
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/private-theming": {
      "version": "7.3.1",
      "resolved": "https://registry.npmjs.org/@mui/private-theming/-/private-theming-7.3.1.tgz",
      "integrity": "sha512-WU3YLkKXii/x8ZEKnrLKsPwplCVE11yZxUvlaaZSIzCcI3x2OdFC8eMlNy74hVeUsYQvzzX1Es/k4ARPlFvpPQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.28.2",
        "@mui/utils": "^7.3.1",
        "prop-types": "^15.8.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/styled-engine": {
      "version": "7.3.1",
      "resolved": "https://registry.npmjs.org/@mui/styled-engine/-/styled-engine-7.3.1.tgz",
      "integrity": "sha512-Nqo6OHjvJpXJ1+9TekTE//+8RybgPQUKwns2Lh0sq+8rJOUSUKS3KALv4InSOdHhIM9Mdi8/L7LTF1/Ky6D6TQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.28.2",
        "@emotion/cache": "^11.14.0",
        "@emotion/serialize": "^1.3.3",
        "@emotion/sheet": "^1.4.0",
        "csstype": "^3.1.3",
        "prop-types": "^15.8.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@emotion/react": "^11.4.1",
        "@emotion/styled": "^11.3.0",
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/react": {
          "optional": true
        },
        "@emotion/styled": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/system": {
      "version": "7.3.1",
      "resolved": "https://registry.npmjs.org/@mui/system/-/system-7.3.1.tgz",
      "integrity": "sha512-mIidecvcNVpNJMdPDmCeoSL5zshKBbYPcphjuh6ZMjhybhqhZ4mX6k9zmIWh6XOXcqRQMg5KrcjnO0QstrNj3w==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.28.2",
        "@mui/private-theming": "^7.3.1",
        "@mui/styled-engine": "^7.3.1",
        "@mui/types": "^7.4.5",
        "@mui/utils": "^7.3.1",
        "clsx": "^2.1.1",
        "csstype": "^3.1.3",
        "prop-types": "^15.8.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@emotion/react": "^11.5.0",
        "@emotion/styled": "^11.3.0",
        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/react": {
          "optional": true
        },
        "@emotion/styled": {
          "optional": true
        },
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/types": {
      "version": "7.4.5",
      "resolved": "https://registry.npmjs.org/@mui/types/-/types-7.4.5.tgz",
      "integrity": "sha512-ZPwlAOE3e8C0piCKbaabwrqZbW4QvWz0uapVPWya7fYj6PeDkl5sSJmomT7wjOcZGPB48G/a6Ubidqreptxz4g==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.28.2"
      },
      "peerDependencies": {
        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/utils": {
      "version": "7.3.1",
      "resolved": "https://registry.npmjs.org/@mui/utils/-/utils-7.3.1.tgz",
      "integrity": "sha512-/31y4wZqVWa0jzMnzo6JPjxwP6xXy4P3+iLbosFg/mJQowL1KIou0LC+lquWW60FKVbKz5ZUWBg2H3jausa0pw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.28.2",
        "@mui/types": "^7.4.5",
        "@types/prop-types": "^15.7.15",
        "clsx": "^2.1.1",
        "prop-types": "^15.8.1",
        "react-is": "^19.1.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/x-data-grid": {
      "version": "8.11.0",
      "resolved": "https://registry.npmjs.org/@mui/x-data-grid/-/x-data-grid-8.11.0.tgz",
      "integrity": "sha512-08U4Nm5bZca0AFyz3twQh2N2vR3RTjY5vQMBEDeHy4XxNxsWuV5ZGbh2hR7vP9o1oBdMXEOkEQmm2+kUh4Busg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.28.2",
        "@mui/utils": "^7.3.1",
        "@mui/x-internals": "8.11.0",
        "@mui/x-virtualizer": "0.1.4",
        "clsx": "^2.1.1",
        "prop-types": "^15.8.1",
        "use-sync-external-store": "^1.5.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@emotion/react": "^11.9.0",
        "@emotion/styled": "^11.8.1",
        "@mui/material": "^5.15.14 || ^6.0.0 || ^7.0.0",
        "@mui/system": "^5.15.14 || ^6.0.0 || ^7.0.0",
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/react": {
          "optional": true
        },
        "@emotion/styled": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/x-internals": {
      "version": "8.11.0",
      "resolved": "https://registry.npmjs.org/@mui/x-internals/-/x-internals-8.11.0.tgz",
      "integrity": "sha512-SFPMLMkNWSEOxIgKMQ9RqEL01klb1lwIdd4f4d18fJNrJOlTxeIDWd6eVllS5sRLdKVsE5FC1802V+yLe6W+pQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.28.2",
        "@mui/utils": "^7.3.1",
        "reselect": "^5.1.1",
        "use-sync-external-store": "^1.5.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/@mui/x-virtualizer": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/@mui/x-virtualizer/-/x-virtualizer-0.1.4.tgz",
      "integrity": "sha512-UHW4yuCo4KpRvSvVsBxx//8wifN8kQZ7P0KPOfy2hu935iAXtRUNMVGGN8kbKyxVpDYQLXBz80doYAJnja61Ew==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.28.2",
        "@mui/utils": "^7.3.1",
        "@mui/x-internals": "8.11.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "react": "^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/@popperjs/core": {
      "version": "2.11.8",
      "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.8.tgz",
      "integrity": "sha512-P1st0aksCrn9sGZhp8GMYwBnQsbvAWsZAX44oXNNvLHGqAOcoVxmjZiohstwQ7SqKnbR47akdNi+uleWD8+g6A==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/popperjs"
      }
    },
    "node_modules/@rolldown/pluginutils": {
      "version": "1.0.0-beta.27",
      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.27.tgz",
      "integrity": "sha512-+d0F4MKMCbeVUJwG96uQ4SgAznZNSq93I3V+9NHA4OpvqG8mRCpGdKmK8l/dl02h2CCDHwW2FqilnTyDcAnqjA==",
      "license": "MIT"
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.49.0.tgz",
      "integrity": "sha512-rlKIeL854Ed0e09QGYFlmDNbka6I3EQFw7iZuugQjMb11KMpJCLPFL4ZPbMfaEhLADEL1yx0oujGkBQ7+qW3eA==",
      "cpu": [
        "arm"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.49.0.tgz",
      "integrity": "sha512-cqPpZdKUSQYRtLLr6R4X3sD4jCBO1zUmeo3qrWBCqYIeH8Q3KRL4F3V7XJ2Rm8/RJOQBZuqzQGWPjjvFUcYa/w==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.49.0.tgz",
      "integrity": "sha512-99kMMSMQT7got6iYX3yyIiJfFndpojBmkHfTc1rIje8VbjhmqBXE+nb7ZZP3A5skLyujvT0eIUCUsxAe6NjWbw==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.49.0.tgz",
      "integrity": "sha512-y8cXoD3wdWUDpjOLMKLx6l+NFz3NlkWKcBCBfttUn+VGSfgsQ5o/yDUGtzE9HvsodkP0+16N0P4Ty1VuhtRUGg==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.49.0.tgz",
      "integrity": "sha512-3mY5Pr7qv4GS4ZvWoSP8zha8YoiqrU+e0ViPvB549jvliBbdNLrg2ywPGkgLC3cmvN8ya3za+Q2xVyT6z+vZqA==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.49.0.tgz",
      "integrity": "sha512-C9KzzOAQU5gU4kG8DTk+tjdKjpWhVWd5uVkinCwwFub2m7cDYLOdtXoMrExfeBmeRy9kBQMkiyJ+HULyF1yj9w==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.49.0.tgz",
      "integrity": "sha512-OVSQgEZDVLnTbMq5NBs6xkmz3AADByCWI4RdKSFNlDsYXdFtlxS59J+w+LippJe8KcmeSSM3ba+GlsM9+WwC1w==",
      "cpu": [
        "arm"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.49.0.tgz",
      "integrity": "sha512-ZnfSFA7fDUHNa4P3VwAcfaBLakCbYaxCk0jUnS3dTou9P95kwoOLAMlT3WmEJDBCSrOEFFV0Y1HXiwfLYJuLlA==",
      "cpu": [
        "arm"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.49.0.tgz",
      "integrity": "sha512-Z81u+gfrobVK2iV7GqZCBfEB1y6+I61AH466lNK+xy1jfqFLiQ9Qv716WUM5fxFrYxwC7ziVdZRU9qvGHkYIJg==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.49.0.tgz",
      "integrity": "sha512-zoAwS0KCXSnTp9NH/h9aamBAIve0DXeYpll85shf9NJ0URjSTzzS+Z9evmolN+ICfD3v8skKUPyk2PO0uGdFqg==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.49.0.tgz",
      "integrity": "sha512-2QyUyQQ1ZtwZGiq0nvODL+vLJBtciItC3/5cYN8ncDQcv5avrt2MbKt1XU/vFAJlLta5KujqyHdYtdag4YEjYQ==",
      "cpu": [
        "loong64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-ppc64-gnu": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.49.0.tgz",
      "integrity": "sha512-k9aEmOWt+mrMuD3skjVJSSxHckJp+SiFzFG+v8JLXbc/xi9hv2icSkR3U7uQzqy+/QbbYY7iNB9eDTwrELo14g==",
      "cpu": [
        "ppc64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.49.0.tgz",
      "integrity": "sha512-rDKRFFIWJ/zJn6uk2IdYLc09Z7zkE5IFIOWqpuU0o6ZpHcdniAyWkwSUWE/Z25N/wNDmFHHMzin84qW7Wzkjsw==",
      "cpu": [
        "riscv64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.49.0.tgz",
      "integrity": "sha512-FkkhIY/hYFVnOzz1WeV3S9Bd1h0hda/gRqvZCMpHWDHdiIHn6pqsY3b5eSbvGccWHMQ1uUzgZTKS4oGpykf8Tw==",
      "cpu": [
        "riscv64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.49.0.tgz",
      "integrity": "sha512-gRf5c+A7QiOG3UwLyOOtyJMD31JJhMjBvpfhAitPAoqZFcOeK3Kc1Veg1z/trmt+2P6F/biT02fU19GGTS529A==",
      "cpu": [
        "s390x"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.49.0.tgz",
      "integrity": "sha512-BR7+blScdLW1h/2hB/2oXM+dhTmpW3rQt1DeSiCP9mc2NMMkqVgjIN3DDsNpKmezffGC9R8XKVOLmBkRUcK/sA==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.49.0.tgz",
      "integrity": "sha512-hDMOAe+6nX3V5ei1I7Au3wcr9h3ktKzDvF2ne5ovX8RZiAHEtX1A5SNNk4zt1Qt77CmnbqT+upb/umzoPMWiPg==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.49.0.tgz",
      "integrity": "sha512-wkNRzfiIGaElC9kXUT+HLx17z7D0jl+9tGYRKwd8r7cUqTL7GYAvgUY++U2hK6Ar7z5Z6IRRoWC8kQxpmM7TDA==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.49.0.tgz",
      "integrity": "sha512-gq5aW/SyNpjp71AAzroH37DtINDcX1Qw2iv9Chyz49ZgdOP3NV8QCyKZUrGsYX9Yyggj5soFiRCgsL3HwD8TdA==",
      "cpu": [
        "ia32"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.49.0.tgz",
      "integrity": "sha512-gEtqFbzmZLFk2xKh7g0Rlo8xzho8KrEFEkzvHbfUGkrgXOpZ4XagQ6n+wIZFNh1nTb8UD16J4nFSFKXYgnbdBg==",
      "cpu": [
        "x64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@supabase/auth-js": {
      "version": "2.71.1",
      "resolved": "https://registry.npmjs.org/@supabase/auth-js/-/auth-js-2.71.1.tgz",
      "integrity": "sha512-mMIQHBRc+SKpZFRB2qtupuzulaUhFYupNyxqDj5Jp/LyPvcWvjaJzZzObv6URtL/O6lPxkanASnotGtNpS3H2Q==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/functions-js": {
      "version": "2.4.5",
      "resolved": "https://registry.npmjs.org/@supabase/functions-js/-/functions-js-2.4.5.tgz",
      "integrity": "sha512-v5GSqb9zbosquTo6gBwIiq7W9eQ7rE5QazsK/ezNiQXdCbY+bH8D9qEaBIkhVvX4ZRW5rP03gEfw5yw9tiq4EQ==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/node-fetch": {
      "version": "2.6.15",
      "resolved": "https://registry.npmjs.org/@supabase/node-fetch/-/node-fetch-2.6.15.tgz",
      "integrity": "sha512-1ibVeYUacxWYi9i0cf5efil6adJ9WRyZBLivgjs+AUpewx1F3xPi7gLgaASI2SmIQxPoCEjAsLAzKPgMJVgOUQ==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      }
    },
    "node_modules/@supabase/postgrest-js": {
      "version": "1.21.3",
      "resolved": "https://registry.npmjs.org/@supabase/postgrest-js/-/postgrest-js-1.21.3.tgz",
      "integrity": "sha512-rg3DmmZQKEVCreXq6Am29hMVe1CzemXyIWVYyyua69y6XubfP+DzGfLxME/1uvdgwqdoaPbtjBDpEBhqxq1ZwA==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/realtime-js": {
      "version": "2.15.4",
      "resolved": "https://registry.npmjs.org/@supabase/realtime-js/-/realtime-js-2.15.4.tgz",
      "integrity": "sha512-e/FYIWjvQJHOCNACWehnKvg26zosju3694k0NMUNb+JGLdvHJzEa29ZVVLmawd2kvx4hdbv8mxSqfttRnH3+DA==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.13",
        "@types/phoenix": "^1.6.6",
        "@types/ws": "^8.18.1",
        "ws": "^8.18.2"
      }
    },
    "node_modules/@supabase/storage-js": {
      "version": "2.11.0",
      "resolved": "https://registry.npmjs.org/@supabase/storage-js/-/storage-js-2.11.0.tgz",
      "integrity": "sha512-Y+kx/wDgd4oasAgoAq0bsbQojwQ+ejIif8uczZ9qufRHWFLMU5cODT+ApHsSrDufqUcVKt+eyxtOXSkeh2v9ww==",
      "license": "MIT",
      "dependencies": {
        "@supabase/node-fetch": "^2.6.14"
      }
    },
    "node_modules/@supabase/supabase-js": {
      "version": "2.56.1",
      "resolved": "https://registry.npmjs.org/@supabase/supabase-js/-/supabase-js-2.56.1.tgz",
      "integrity": "sha512-cb/kS0d6G/qbcmUFItkqVrQbxQHWXzfRZuoiSDv/QiU6RbGNTn73XjjvmbBCZ4MMHs+5teihjhpEVluqbXISEg==",
      "license": "MIT",
      "dependencies": {
        "@supabase/auth-js": "2.71.1",
        "@supabase/functions-js": "2.4.5",
        "@supabase/node-fetch": "2.6.15",
        "@supabase/postgrest-js": "1.21.3",
        "@supabase/realtime-js": "2.15.4",
        "@supabase/storage-js": "^2.10.4"
      }
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.28.0.tgz",
      "integrity": "sha512-8PvcXf70gTDZBgt9ptxJ8elBeBjcLOAcOtoO/mPJjtji1+CdGbHgm77om1GrsPxsiE+uXIpNSK64UYaIwQXd4Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.2"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "24.3.0",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.3.0.tgz",
      "integrity": "sha512-aPTXCrfwnDLj4VvXrm+UUCQjNEvJgNA8s5F1cvwQU+3KNltTOkBm1j30uNLyqqPNe7gE3KFzImYoZEfLhp4Yow==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~7.10.0"
      }
    },
    "node_modules/@types/node-fetch": {
      "version": "2.6.13",
      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.13.tgz",
      "integrity": "sha512-QGpRVpzSaUs30JBSGPjOg4Uveu384erbHBoT1zeONvyCfwQxIkUshLAOqN/k9EjGviPRmWTTe6aH2qySWKTVSw==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "form-data": "^4.0.4"
      }
    },
    "node_modules/@types/parse-json": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/@types/parse-json/-/parse-json-4.0.2.tgz",
      "integrity": "sha512-dISoDXWWQwUquiKsyZ4Ng+HX2KsPL7LyHKHQwgGFEA3IaKac4Obd+h2a/a6waisAoepJlBcx9paWqjA8/HVjCw==",
      "license": "MIT"
    },
    "node_modules/@types/phoenix": {
      "version": "1.6.6",
      "resolved": "https://registry.npmjs.org/@types/phoenix/-/phoenix-1.6.6.tgz",
      "integrity": "sha512-PIzZZlEppgrpoT2QgbnDU+MMzuR6BbCjllj0bM70lWoejMeNJAxCchxnv7J3XFkI8MpygtRpzXrIlmWUBclP5A==",
      "license": "MIT"
    },
    "node_modules/@types/prop-types": {
      "version": "15.7.15",
      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.15.tgz",
      "integrity": "sha512-F6bEyamV9jKGAFBEmlQnesRPGOQqS2+Uwi0Em15xenOxHaf2hv6L8YCVn3rPdPJOiJfPiCnLIRyvwVaqMY3MIw==",
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "19.1.12",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.12.tgz",
      "integrity": "sha512-cMoR+FoAf/Jyq6+Df2/Z41jISvGZZ2eTlnsaJRptmZ76Caldwy1odD4xTr/gNV9VLj0AWgg/nmkevIyUfIIq5w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-transition-group": {
      "version": "4.4.12",
      "resolved": "https://registry.npmjs.org/@types/react-transition-group/-/react-transition-group-4.4.12.tgz",
      "integrity": "sha512-8TV6R3h2j7a91c+1DXdJi3Syo69zzIZbz7Lg5tORM5LEJG7X/E6a1V3drRyBRZq7/utz7A+c4OgYLiLcYGHG6w==",
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "*"
      }
    },
    "node_modules/@types/ws": {
      "version": "8.18.1",
      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-8.18.1.tgz",
      "integrity": "sha512-ThVF6DCVhA8kUGy+aazFQ4kXQ7E1Ty7A3ypFOe0IcJV8O/M511G99AW24irKrW56Wt44yG9+ij8FaqoBGkuBXg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.7.0.tgz",
      "integrity": "sha512-gUu9hwfWvvEDBBmgtAowQCojwZmJ5mcLn3aufeCsitijs3+f2NsrPtlAWIR6OPiqljl96GVCUbLe0HyqIpVaoA==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.28.0",
        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
        "@rolldown/pluginutils": "1.0.0-beta.27",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0"
      }
    },
    "node_modules/abort-controller": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
      "license": "MIT",
      "dependencies": {
        "event-target-shim": "^5.0.0"
      },
      "engines": {
        "node": ">=6.5"
      }
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/agentkeepalive": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.6.0.tgz",
      "integrity": "sha512-kja8j7PjmncONqaTsB8fQ+wE2mSU2DJ9D4XKoJ5PFWIdRMa6SLSN1ff4mOr4jCbfRSsxR4keIiySJU0N9T5hIQ==",
      "license": "MIT",
      "dependencies": {
        "humanize-ms": "^1.2.1"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/append-field": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/append-field/-/append-field-1.0.0.tgz",
      "integrity": "sha512-klpgFSWLW1ZEs8svjfb7g4qWY0YS5imI82dTg+QahUvJ8YqAY0P10Uk8tTyh9ZGuYEZEMaeJYCF5BFuX552hsw==",
      "license": "MIT"
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/axios": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.11.0.tgz",
      "integrity": "sha512-1Lx3WLFQWm3ooKDYZD1eXmoGO9fxYQjrycfHFC8P0sCfQVXyROp0p9PFWBehewBOdCwHc+f/b8I0fMto5eSfwA==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.4",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/babel-plugin-macros": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-macros/-/babel-plugin-macros-3.1.0.tgz",
      "integrity": "sha512-Cg7TFGpIr01vOQNODXOOaGz2NpCU5gl8x1qJFbb6hbZxR7XrcE2vtbAsTAbJ7/xwJtUuJEw8K8Zr/AE0LHlesg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.12.5",
        "cosmiconfig": "^7.0.0",
        "resolve": "^1.19.0"
      },
      "engines": {
        "node": ">=10",
        "npm": ">=6"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/body-parser/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/body-parser/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/browserslist": {
      "version": "4.25.4",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.4.tgz",
      "integrity": "sha512-4jYpcjabC606xJ3kw2QwGEZKX0Aw7sgQdZCvIK9dhVSPh76BKo+C+btT1RRofH7B+8iNpEbgGNVWiLki5q93yg==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001737",
        "electron-to-chromium": "^1.5.211",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "license": "MIT"
    },
    "node_modules/busboy": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
      "dependencies": {
        "streamsearch": "^1.1.0"
      },
      "engines": {
        "node": ">=10.16.0"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001737",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001737.tgz",
      "integrity": "sha512-BiloLiXtQNrY5UyF0+1nSJLXUENuhka2pzy2Fx5pGxqavdrxSCW4U6Pn/PoG3Efspi2frRbHpBV2XsrPE6EDlw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-2.0.0.tgz",
      "integrity": "sha512-MWufYdFw53ccGjCA+Ol7XJYpAlW6/prSMzuPOTRnJGcGzuhLn4Scrz7qf6o8bROZ514ltazcIFJZevcfbo0x7A==",
      "engines": [
        "node >= 6.0"
      ],
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^3.0.2",
        "typedarray": "^0.0.6"
      }
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
      "license": "MIT"
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/cosmiconfig": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-7.1.0.tgz",
      "integrity": "sha512-AdmX6xUzdNASswsFtmwSt7Vj8po9IuqXm0UXz7QKPuEUmPB4XyjGfaAr2PSuELMwkRMVH1EpIkX5bTZGRB3eCA==",
      "license": "MIT",
      "dependencies": {
        "@types/parse-json": "^4.0.0",
        "import-fresh": "^3.2.1",
        "parse-json": "^5.0.0",
        "path-type": "^4.0.0",
        "yaml": "^1.10.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/dom-helpers": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.8.7",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/dotenv": {
      "version": "16.6.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.6.1.tgz",
      "integrity": "sha512-uBq4egWHTcTt33a72vpSG0z3HnPuIl6NqYcTrKEg2azoEyl2hpW0zqlxysq2pK9HlDIHyHyakeYaYnSAwd8bow==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.211",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.211.tgz",
      "integrity": "sha512-IGBvimJkotaLzFnwIVgW9/UD/AOJ2tByUmeOrtqBfACSbAw5b1G0XpvdaieKyc7ULmbwXVx+4e4Be8pOPBrYkw==",
      "license": "ISC"
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "license": "MIT",
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/esbuild": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
      "integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.21.5",
        "@esbuild/android-arm": "0.21.5",
        "@esbuild/android-arm64": "0.21.5",
        "@esbuild/android-x64": "0.21.5",
        "@esbuild/darwin-arm64": "0.21.5",
        "@esbuild/darwin-x64": "0.21.5",
        "@esbuild/freebsd-arm64": "0.21.5",
        "@esbuild/freebsd-x64": "0.21.5",
        "@esbuild/linux-arm": "0.21.5",
        "@esbuild/linux-arm64": "0.21.5",
        "@esbuild/linux-ia32": "0.21.5",
        "@esbuild/linux-loong64": "0.21.5",
        "@esbuild/linux-mips64el": "0.21.5",
        "@esbuild/linux-ppc64": "0.21.5",
        "@esbuild/linux-riscv64": "0.21.5",
        "@esbuild/linux-s390x": "0.21.5",
        "@esbuild/linux-x64": "0.21.5",
        "@esbuild/netbsd-x64": "0.21.5",
        "@esbuild/openbsd-x64": "0.21.5",
        "@esbuild/sunos-x64": "0.21.5",
        "@esbuild/win32-arm64": "0.21.5",
        "@esbuild/win32-ia32": "0.21.5",
        "@esbuild/win32-x64": "0.21.5"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/event-target-shim": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/express/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/express/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/finalhandler/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/finalhandler/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/find-root": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/find-root/-/find-root-1.1.0.tgz",
      "integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng==",
      "license": "MIT"
    },
    "node_modules/follow-redirects": {
      "version": "1.15.11",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.11.tgz",
      "integrity": "sha512-deG2P0JfjrTxl50XGCDyfI97ZGVCxIpfKYmfyrQ54n5FO/0gfIES8C/Psl6kWVDolizcaaxZJnTS0QSMxvnsBQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.4.tgz",
      "integrity": "sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/form-data-encoder": {
      "version": "1.7.2",
      "resolved": "https://registry.npmjs.org/form-data-encoder/-/form-data-encoder-1.7.2.tgz",
      "integrity": "sha512-qfqtYan3rxrnCk1VYaA4H+Ms9xdpPqvLZa6xmMgFvhO32x7/3J/ExcTd6qpxM0vH2GdMI+poehyBZvqfMTto8A==",
      "license": "MIT"
    },
    "node_modules/formdata-node": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/formdata-node/-/formdata-node-4.4.1.tgz",
      "integrity": "sha512-0iirZp3uVDjVGt9p49aTaqjk84TrglENEDuqfdlZQ1roC9CWlPk6Avf8EEnZNcAqPonwkG35x4n3ww/1THYAeQ==",
      "license": "MIT",
      "dependencies": {
        "node-domexception": "1.0.0",
        "web-streams-polyfill": "4.0.0-beta.3"
      },
      "engines": {
        "node": ">= 12.20"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gpt-tokenizer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/gpt-tokenizer/-/gpt-tokenizer-3.0.1.tgz",
      "integrity": "sha512-5jdaspBq/w4sWw322SvQj1Fku+CN4OAfYZeeEg8U7CWtxBz+zkxZ3h0YOHD43ee+nZYZ5Ud70HRN0ANcdIj4qg==",
      "license": "MIT"
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/hoist-non-react-statics": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/hoist-non-react-statics/-/hoist-non-react-statics-3.3.2.tgz",
      "integrity": "sha512-/gGivxi8JPKWNm/W0jSmzcMPpfpPLc3dY/6GxhX2hQ9iGj3aDfklV4ET7NjKpSinLpJ5vafa9iiGIEZg10SfBw==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "react-is": "^16.7.0"
      }
    },
    "node_modules/hoist-non-react-statics/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/humanize-ms": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.0.0"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "license": "MIT"
    },
    "node_modules/is-core-module": {
      "version": "2.16.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "license": "MIT"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/lucide-react": {
      "version": "0.540.0",
      "resolved": "https://registry.npmjs.org/lucide-react/-/lucide-react-0.540.0.tgz",
      "integrity": "sha512-armkCAqQvO62EIX4Hq7hqX/q11WSZu0Jd23cnnqx0/49yIxGXyL/zyZfBxNN9YDx0ensPTb4L+DjTh3yQXUxtQ==",
      "dev": true,
      "license": "ISC",
      "peerDependencies": {
        "react": "^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/mkdirp": {
      "version": "0.5.6",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
      "license": "MIT",
      "dependencies": {
        "minimist": "^1.2.6"
      },
      "bin": {
        "mkdirp": "bin/cmd.js"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/multer": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/multer/-/multer-2.0.2.tgz",
      "integrity": "sha512-u7f2xaZ/UG8oLXHvtF/oWTRvT44p9ecwBBqTwgJVq0+4BW1g8OW01TyMEGWBHbyMOYVHXslaut7qEQ1meATXgw==",
      "license": "MIT",
      "dependencies": {
        "append-field": "^1.0.0",
        "busboy": "^1.6.0",
        "concat-stream": "^2.0.0",
        "mkdirp": "^0.5.6",
        "object-assign": "^4.1.1",
        "type-is": "^1.6.18",
        "xtend": "^4.0.2"
      },
      "engines": {
        "node": ">= 10.16.0"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-domexception": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz",
      "integrity": "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==",
      "deprecated": "Use your platform's native DOMException instead",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/jimmywarting"
        },
        {
          "type": "github",
          "url": "https://paypal.me/jimmywarting"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=10.5.0"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "license": "MIT"
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/openai": {
      "version": "4.104.0",
      "resolved": "https://registry.npmjs.org/openai/-/openai-4.104.0.tgz",
      "integrity": "sha512-p99EFNsA/yX6UhVO93f5kJsDRLAg+CTA2RBqdHK4RtK8u5IJw32Hyb2dTGKbnnFmnuoBv5r7Z2CURI9sGZpSuA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@types/node": "^18.11.18",
        "@types/node-fetch": "^2.6.4",
        "abort-controller": "^3.0.0",
        "agentkeepalive": "^4.2.1",
        "form-data-encoder": "1.7.2",
        "formdata-node": "^4.3.2",
        "node-fetch": "^2.6.7"
      },
      "bin": {
        "openai": "bin/cli"
      },
      "peerDependencies": {
        "ws": "^8.18.0",
        "zod": "^3.23.8"
      },
      "peerDependenciesMeta": {
        "ws": {
          "optional": true
        },
        "zod": {
          "optional": true
        }
      }
    },
    "node_modules/openai/node_modules/@types/node": {
      "version": "18.19.123",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-18.19.123.tgz",
      "integrity": "sha512-K7DIaHnh0mzVxreCR9qwgNxp3MH9dltPNIEddW9MYUlcKAzm+3grKNSTe2vCJHI1FaLpvpL5JGJrz1UZDKYvDg==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~5.26.4"
      }
    },
    "node_modules/openai/node_modules/undici-types": {
      "version": "5.26.5",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
      "integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==",
      "license": "MIT"
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "license": "MIT"
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
      "license": "MIT"
    },
    "node_modules/path-type": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC"
    },
    "node_modules/playwright": {
      "version": "1.55.0",
      "resolved": "https://registry.npmjs.org/playwright/-/playwright-1.55.0.tgz",
      "integrity": "sha512-sdCWStblvV1YU909Xqx0DhOjPZE4/5lJsIS84IfN9dAZfcl/CIZ5O8l3o0j7hPMjDvqoTF8ZUcc+i/GL5erstA==",
      "license": "Apache-2.0",
      "dependencies": {
        "playwright-core": "1.55.0"
      },
      "bin": {
        "playwright": "cli.js"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "fsevents": "2.3.2"
      }
    },
    "node_modules/playwright-core": {
      "version": "1.55.0",
      "resolved": "https://registry.npmjs.org/playwright-core/-/playwright-core-1.55.0.tgz",
      "integrity": "sha512-GvZs4vU3U5ro2nZpeiwyb0zuFaqb9sUiAJuyrWpcGouD8y9/HLgGbNRjIph7zU9D3hnPaisMl9zG9CgFi/biIg==",
      "license": "Apache-2.0",
      "bin": {
        "playwright-core": "cli.js"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/playwright/node_modules/fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/prop-types/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-is": {
      "version": "19.1.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-19.1.1.tgz",
      "integrity": "sha512-tr41fA15Vn8p4X9ntI+yCyeGSf1TlYaY5vlTZfQmeLBrFo3psOPX6HhTDnFNL9uj3EhP0KAQ80cugCl4b4BERA==",
      "license": "MIT"
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-transition-group": {
      "version": "4.4.5",
      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/runtime": "^7.5.5",
        "dom-helpers": "^5.0.1",
        "loose-envify": "^1.4.0",
        "prop-types": "^15.6.2"
      },
      "peerDependencies": {
        "react": ">=16.6.0",
        "react-dom": ">=16.6.0"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/reselect": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/reselect/-/reselect-5.1.1.tgz",
      "integrity": "sha512-K/BG6eIky/SBpzfHZv/dd+9JBFiS4SWV7FIujVyJRux6e45+73RaUHXLmIR1f7WOMaQ0U1km6qwklRQxpJJY0w==",
      "license": "MIT"
    },
    "node_modules/resend": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/resend/-/resend-6.0.1.tgz",
      "integrity": "sha512-xNZ0gKAOqQcH83lXsqNOwBbpKROnsZpQr9mXRdG6hrHTF9G9Il2pkoTRtq7rJzXMvCZX+I79oahsbSeaYOWRFA==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "@react-email/render": "^1.1.0"
      },
      "peerDependenciesMeta": {
        "@react-email/render": {
          "optional": true
        }
      }
    },
    "node_modules/resolve": {
      "version": "1.22.10",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.16.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/rollup": {
      "version": "4.49.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.49.0.tgz",
      "integrity": "sha512-3IVq0cGJ6H7fKXXEdVt+RcYvRCt8beYY9K1760wGQwSAHZcS9eot1zDG5axUbcp/kWRi5zKIIDX8MoKv/TzvZA==",
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.49.0",
        "@rollup/rollup-android-arm64": "4.49.0",
        "@rollup/rollup-darwin-arm64": "4.49.0",
        "@rollup/rollup-darwin-x64": "4.49.0",
        "@rollup/rollup-freebsd-arm64": "4.49.0",
        "@rollup/rollup-freebsd-x64": "4.49.0",
        "@rollup/rollup-linux-arm-gnueabihf": "4.49.0",
        "@rollup/rollup-linux-arm-musleabihf": "4.49.0",
        "@rollup/rollup-linux-arm64-gnu": "4.49.0",
        "@rollup/rollup-linux-arm64-musl": "4.49.0",
        "@rollup/rollup-linux-loongarch64-gnu": "4.49.0",
        "@rollup/rollup-linux-ppc64-gnu": "4.49.0",
        "@rollup/rollup-linux-riscv64-gnu": "4.49.0",
        "@rollup/rollup-linux-riscv64-musl": "4.49.0",
        "@rollup/rollup-linux-s390x-gnu": "4.49.0",
        "@rollup/rollup-linux-x64-gnu": "4.49.0",
        "@rollup/rollup-linux-x64-musl": "4.49.0",
        "@rollup/rollup-win32-arm64-msvc": "4.49.0",
        "@rollup/rollup-win32-ia32-msvc": "4.49.0",
        "@rollup/rollup-win32-x64-msvc": "4.49.0",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/send/node_modules/debug/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/serverless-http": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/serverless-http/-/serverless-http-3.2.0.tgz",
      "integrity": "sha512-QvSyZXljRLIGqwcJ4xsKJXwkZnAVkse1OajepxfjkBXV0BMvRS5R546Z4kCBI8IygDzkQY0foNPC/rnipaE9pQ==",
      "license": "MIT",
      "engines": {
        "node": ">=12.0"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/source-map": {
      "version": "0.5.7",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz",
      "integrity": "sha512-LbrmJOMUSdEVxIKvdcJzQC+nQhe8FUZQTXQy6+I75skNgn3OoQ0DZA8YnFa7gp8tqtL3KPf1kmo0R5DoApeSGQ==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/streamsearch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/stylis": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/stylis/-/stylis-4.2.0.tgz",
      "integrity": "sha512-Orov6g6BB1sDfYgzWfTHDOxamtX1bE/zo104Dh9e6fqJ3PooipYyfJ0pUmrZO2wAvO8YbEyeFrkV91XTsGMSrw==",
      "license": "MIT"
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
      "license": "MIT"
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typedarray": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
      "integrity": "sha512-/aCDEGatGvZ2BIk+HmLf4ifCJFwvKFNb9/JeZPMulfgFracn9QFcAf5GO8B/mweUjSoblS5In0cWhqpfs/5PQA==",
      "license": "MIT"
    },
    "node_modules/typescript": {
      "version": "5.9.2",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.9.2.tgz",
      "integrity": "sha512-CWBzXQrc/qOkhidw1OzBTQuYRbfyxDXJMVJ1XNwUHGROVmuaeiEm3OslpZ1RV96d7SKKjZKrSJu3+t/xlw3R9A==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/undici-types": {
      "version": "7.10.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.10.0.tgz",
      "integrity": "sha512-t5Fy/nfn+14LuOc2KNYg75vZqClpAiqscVvMygNnlsHBFpSXdJaYtXMcdNLpl/Qvc3P2cB3s6lOV51nqsFq4ag==",
      "license": "MIT"
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/use-sync-external-store": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/use-sync-external-store/-/use-sync-external-store-1.5.0.tgz",
      "integrity": "sha512-Rb46I4cGGVBmjamjphe8L/UnvJD+uPPtTkNvX5mZgqdbavhI4EbgIWJiIHXJ8bc/i9EQGPRh4DwEURJ552Do0A==",
      "license": "MIT",
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/vite": {
      "version": "5.4.19",
      "resolved": "https://registry.npmjs.org/vite/-/vite-5.4.19.tgz",
      "integrity": "sha512-qO3aKv3HoQC8QKiNSTuUM1l9o/XX3+c+VTgLHbJWHZGeTPVAg2XwazI9UWzoxjIJCGCV2zU60uqMzjeLZuULqA==",
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.21.3",
        "postcss": "^8.4.43",
        "rollup": "^4.20.0"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || >=20.0.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.4.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        }
      }
    },
    "node_modules/web-streams-polyfill": {
      "version": "4.0.0-beta.3",
      "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-4.0.0-beta.3.tgz",
      "integrity": "sha512-QW95TCTaHmsYfHDybGMwO5IJIM93I/6vTRk+daHTWFPhwh+C8Cg7j7XyKrwrj8Ib6vYXe0ocYNrmzY4xAAN6ug==",
      "license": "MIT",
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
      "license": "BSD-2-Clause"
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "license": "MIT",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/ws": {
      "version": "8.18.3",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.3.tgz",
      "integrity": "sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "license": "ISC"
    },
    "node_modules/yaml": {
      "version": "1.10.2",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-1.10.2.tgz",
      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
      "license": "ISC",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/zod": {
      "version": "4.1.5",
      "resolved": "https://registry.npmjs.org/zod/-/zod-4.1.5.tgz",
      "integrity": "sha512-rcUUZqlLJgBC33IT3PNMgsCq6TzLQEG/Ei/KTCU0PedSWRMAXoOUN+4t/0H+Q8bdnLPdqUYnvboJT0bn/229qg==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/colinhacks"
      }
    }
  }
}

--- END OF FILE package-lock.json ---

--- START OF FILE package.json ---

{
  "name": "plumbingpoc-root",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "vite vite-app",
    "build": "vite build vite-app",
    "preview": "vite preview vite-app",
    "start:api": "node vite-app/api/server.js"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.1",
    "@google/generative-ai": "^0.24.1",
    "@mui/material": "^7.3.1",
    "@mui/x-data-grid": "^8.10.2",
    "@supabase/supabase-js": "^2.55.0",
    "@vitejs/plugin-react": "^4.7.0",
    "axios": "^1.7.2",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "gpt-tokenizer": "^3.0.1",
    "multer": "^2.0.2",
    "openai": "^4.28.0",
    "playwright": "^1.55.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "resend": "^6.0.1",
    "serverless-http": "^3.2.0",
    "vite": "^5.4.2",
    "zod": "^4.0.17"
  },
  "devDependencies": {
    "@types/react": "^19.1.10",
    "lucide-react": "^0.540.0",
    "typescript": "^5.9.2"
  }
}

--- END OF FILE package.json ---

--- START OF FILE startup.sh ---

#!/bin/bash
# Startup script for PlumbingPOC: starts backend and frontend, checks ports, and ensures correct sequence

# Configurable ports
BACKEND_PORT=3000
FRONTEND_PORT=5173

# Helper to check if port is free
is_port_free() {
  ! lsof -i :$1 >/dev/null 2>&1
}

# Check backend port
if ! is_port_free $BACKEND_PORT; then
  echo "Error: Backend port $BACKEND_PORT is in use. Please free it before starting."
  exit 1
fi

# Check frontend port
if ! is_port_free $FRONTEND_PORT; then
  echo "Error: Frontend port $FRONTEND_PORT is in use. Please free it before starting."
  exit 1
fi

# Start backend API (Express/Node) in a new terminal
echo "Starting backend API on port $BACKEND_PORT..."
osascript -e 'tell application "Terminal" to do script "cd ~/Projects/PlumbingPOC/vite-app/api && PORT='$BACKEND_PORT' node server.js"'
sleep 2

# Confirm backend started
if ! lsof -i :$BACKEND_PORT >/dev/null 2>&1; then
  echo "Error: Backend did not start correctly. Check logs."
  exit 1
fi

# Start frontend (Vite) in a new terminal
echo "Starting frontend (Vite) on port $FRONTEND_PORT..."
osascript -e 'tell application "Terminal" to do script "cd ~/Projects/PlumbingPOC/vite-app && PORT='$FRONTEND_PORT' npm run dev"'
sleep 2

# Confirm frontend started
if ! lsof -i :$FRONTEND_PORT >/dev/null 2>&1; then
  echo "Error: Frontend did not start correctly. Check logs."
  exit 1
fi

echo "Both services started successfully."
echo "Backend: http://localhost:$BACKEND_PORT"
echo "Frontend: http://localhost:$FRONTEND_PORT"

--- END OF FILE startup.sh ---

--- START OF FILE supabase/SUPABASE_DATABASE_AND_AUTH_SETUP.md ---

# Supabase Database and Auth Setup information

## Table of Contents

1.  [Supabase Database Configuration](#1-supabase-database-configuration)
    -   [Table Schema Overview](#1a-table-schema-overview)
    -   [Admin Role Check Function (`is_admin`)](#1b-admin-role-check-function-is_admin)
    -   [Storage Bucket: PlumbingPoCBucket](#1c-storage-bucket-plumbingpocbucket)
    -   [Row Level Security (RLS) Policies](#1d-row-level-security-rls-policies)
2.  [Master SQL Setup Script](#2-master-sql-setup-script)
3.  [Authentication Provider Configuration](#3-authentication-provider-configuration)
4.  [Helpful CLI Commands & Queries](#4-helpful-cli-commands--queries)

---

## Supabase & Authentication Provider Setup Reference

This document provides a comprehensive reference for the project's Supabase database schema, security policies, and authentication provider setup.

### 1. Supabase Database Configuration

#### 1a. Table Schema Overview

The database is composed of several related tables to manage users, requests, quotes, and communications.

-   **user_profiles**
    -   Stores public-facing user data, linked one-to-one with `auth.users`.
    -   `id` (uuid, primary key, default: gen_random_uuid())
    -   `user_id` (uuid, **unique**, references `auth.users.id`)
    -   `name` (text)
    -   `email` (text)
    -   `phone` (text)
    -   `created_at` (timestamptz, default: now())
    -   `address` (text)
    -   `city` (text)
    -   `postal_code` (text)
    -   `province` (text)
    -   `role` (text, not nullable, default: 'user')

-   **requests**
    -   The core table for initial customer quote requests.
    -   `id` (uuid, primary key, default: gen_random_uuid())
    -   `created_at` (timestamptz, default: now())
    -   `is_emergency` (boolean)
    -   `customer_name` (text)
    -   `service_address` (text)
    -   `contact_info` (text)
    -   `problem_category` (text)
    -   `problem_description` (text)
    -   `property_type` (text)
    -   `is_homeowner` (boolean)
    -   `preferred_timing` (text)
    -   `additional_notes` (text)
    -   `answers` (jsonb)
    -   `status` (text)
    -   `user_id` (uuid, references `user_profiles.user_id`)
    -   `updated_at` (timestamptz)
    -   `scheduled_start_date` (timestamptz)
    -   `last_follow_up_sent_at` (timestamptz)
    -   `triage_summary` (text)
    -   `priority_score` (integer)

-   **quote_attachments**
    -   Stores records of files uploaded for a specific request.
    -   `id` (uuid, primary key, default: gen_random_uuid())
    -   `request_id` (uuid, references `requests.id`)
    -   `file_url` (text, not nullable)
    -   `file_name` (text)
    -   `mime_type` (text)
    -   `uploaded_at` (timestamptz, default: now())
    -   `quote_id` (uuid, references `quotes.id`)

-   **quotes**
    -   Stores formal quotes generated by an admin for a request.
    -   `id` (uuid, primary key, default: gen_random_uuid())
    -   `user_id` (uuid)
    -   `request_id` (uuid)
    -   `quote_amount` (numeric)
    -   `status` (text)
    -   `created_at` (timestamptz, default: now())
    -   `labor_items` (jsonb)
    -   `material_items` (jsonb)
    -   `notes` (text)
    -   `good_until` (date)
    -   `tax_details` (jsonb)
    -   `updated_at` (timestamptz, default: now())
    -   `details` (text)

-   **request_notes**
    -   A log of all communication between the customer and admin regarding a request.
    -   `id` (uuid, primary key, default: gen_random_uuid())
    -   `request_id` (uuid, not nullable, references `requests.id`)
    -   `user_id` (uuid, not nullable, references `auth.users.id`)
    -   `author_role` (text, not nullable)
    -   `note` (text, not nullable)
    -   `created_at` (timestamptz, default: now())

-   **invoices**
    -   Stores invoice data linked to an accepted quote.
    -   `id` (uuid, primary key, default: gen_random_uuid())
    -   `user_id` (uuid)
    -   `quote_id` (uuid, references `quotes.id`)
    -   `amount_due` (numeric)
    -   `due_date` (timestamptz)
    -   `status` (text)
    -   `created_at` (timestamptz, default: now())

#### 1b. Admin Role Check Function (`is_admin`)

To reliably check for administrative privileges within Row Level Security policies without causing infinite recursion, we use a `SECURITY DEFINER` function. This is the standard, most robust method.

-   **Function:** `public.is_admin()`
    -   Returns `true` if the currently authenticated user has the role of 'admin' in their `user_profiles` record, and `false` otherwise.
    -   `SECURITY DEFINER` allows it to query `user_profiles` safely from within an RLS policy on that same table, breaking the recursion loop. All RLS policies that require admin checks now call this function.

#### 1c. Storage Bucket: PlumbingPoCBucket

-   **Purpose:** Securely stores all user-uploaded files (images, PDFs) related to quote requests.
-   **Access:** This bucket is **NOT** public. All access is controlled by Storage Policies.
-   **Policies (SQL):**
    ```sql
    -- Allows any logged-in user to UPLOAD a file.
    CREATE POLICY "Allow authenticated uploads"
    ON storage.objects FOR INSERT
    TO authenticated
    WITH CHECK ( bucket_id = 'PlumbingPoCBucket' );

    -- Allows an ADMIN to view/download ANY file.
    -- This now uses our robust is_admin() function.
    CREATE POLICY "Allow admin read access"
    ON storage.objects FOR SELECT
    TO authenticated
    USING ( is_admin() );
    ```

#### 1d. Row Level Security (RLS) Policies

RLS is **ENABLED** on all public tables. The security model is straightforward:
-   **Regular users** can perform actions (create, read, update, delete) only on records they own (where `auth.uid() = user_id`).
-   **Admins** (as determined by the `is_admin()` function) have unrestricted access to all records in all tables.

### 2. Master SQL Setup Script

This single, idempotent script can be run in the Supabase SQL Editor to create the `is_admin` helper function and apply all current, correct security policies for every table.

```sql
-- ========= Part 1: Create the definitive is_admin() helper function =========
-- This function is the single source of truth for checking admin status.
CREATE OR REPLACE FUNCTION is_admin()
RETURNS boolean AS $$
BEGIN
  RETURN (
    SELECT EXISTS (
      SELECT 1 FROM public.user_profiles
      WHERE user_id = auth.uid() AND role = 'admin'
    )
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;


-- ========= Part 2: RLS Enablement and Policy Setup for All Tables =========

-- Table: user_profiles
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;
DO $$ DECLARE r RECORD; BEGIN FOR r IN (SELECT policyname FROM pg_policies WHERE tablename = 'user_profiles') LOOP EXECUTE 'DROP POLICY IF EXISTS ' || quote_ident(r.policyname) || ' ON public.user_profiles;'; END LOOP; END $$;
CREATE POLICY "Enable read for users and admins" ON public.user_profiles FOR SELECT USING ((auth.uid() = user_id) OR (is_admin()));
CREATE POLICY "Enable insert for own profile" ON public.user_profiles FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Enable update for users and admins" ON public.user_profiles FOR UPDATE USING ((auth.uid() = user_id) OR (is_admin()));
CREATE POLICY "Enable delete for admins" ON public.user_profiles FOR DELETE USING (is_admin());

-- Table: requests
ALTER TABLE public.requests ENABLE ROW LEVEL SECURITY;
DO $$ DECLARE r RECORD; BEGIN FOR r IN (SELECT policyname FROM pg_policies WHERE tablename = 'requests') LOOP EXECUTE 'DROP POLICY IF EXISTS ' || quote_ident(r.policyname) || ' ON public.requests;'; END LOOP; END $$;
CREATE POLICY "Enable read for users and admins" ON public.requests FOR SELECT USING ((auth.uid() = user_id) OR (is_admin()));
CREATE POLICY "Enable insert for own request" ON public.requests FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Enable update for users and admins" ON public.requests FOR UPDATE USING ((auth.uid() = user_id) OR (is_admin()));
CREATE POLICY "Enable delete for admins" ON public.requests FOR DELETE USING (is_admin());

-- Table: quotes
ALTER TABLE public.quotes ENABLE ROW LEVEL SECURITY;
DO $$ DECLARE r RECORD; BEGIN FOR r IN (SELECT policyname FROM pg_policies WHERE tablename = 'quotes') LOOP EXECUTE 'DROP POLICY IF EXISTS ' || quote_ident(r.policyname) || ' ON public.quotes;'; END LOOP; END $$;
CREATE POLICY "Enable all actions for admins" ON public.quotes FOR ALL USING (is_admin());
CREATE POLICY "Enable read for own quotes" ON public.quotes FOR SELECT USING (auth.uid() = user_id);

-- Table: quote_attachments
ALTER TABLE public.quote_attachments ENABLE ROW LEVEL SECURITY;
DO $$ DECLARE r RECORD; BEGIN FOR r IN (SELECT policyname FROM pg_policies WHERE tablename = 'quote_attachments') LOOP EXECUTE 'DROP POLICY IF EXISTS ' || quote_ident(r.policyname) || ' ON public.quote_attachments;'; END LOOP; END $$;
CREATE POLICY "Enable read for admins and owners" ON public.quote_attachments FOR SELECT USING ((is_admin()) OR (auth.uid() = (SELECT user_id FROM requests WHERE id = request_id)));
CREATE POLICY "Enable insert for owners" ON public.quote_attachments FOR INSERT WITH CHECK (auth.uid() = (SELECT user_id FROM requests WHERE id = request_id));
CREATE POLICY "Enable delete for admins" ON public.quote_attachments FOR DELETE USING (is_admin());

-- Table: request_notes
ALTER TABLE public.request_notes ENABLE ROW LEVEL SECURITY;
DO $$ DECLARE r RECORD; BEGIN FOR r IN (SELECT policyname FROM pg_policies WHERE tablename = 'request_notes') LOOP EXECUTE 'DROP POLICY IF EXISTS ' || quote_ident(r.policyname) || ' ON public.request_notes;'; END LOOP; END $$;
CREATE POLICY "Enable all actions for admins" ON public.request_notes FOR ALL USING (is_admin());
CREATE POLICY "Enable all actions for request owners" ON public.request_notes FOR ALL USING (auth.uid() = (SELECT user_id FROM requests WHERE id = request_id));

-- Table: invoices
ALTER TABLE public.invoices ENABLE ROW LEVEL SECURITY;
DO $$ DECLARE r RECORD; BEGIN FOR r IN (SELECT policyname FROM pg_policies WHERE tablename = 'invoices') LOOP EXECUTE 'DROP POLICY IF EXISTS ' || quote_ident(r.policyname) || ' ON public.invoices;'; END LOOP; END $$;
CREATE POLICY "Enable all actions for admins" ON public.invoices FOR ALL USING (is_admin());
CREATE POLICY "Enable read for own invoices" ON public.invoices FOR SELECT USING (auth.uid() = user_id);
```

### 3. Authentication Provider Configuration

#### 3a. Updating URLs
- Site URL: `https://your-site-name.netlify.app/` (production) or `http://your-local-frontend-url/` (local)
- Add Redirect URLs:
  - `https://your-site-name.netlify.app/*`
  - `http://your-local-frontend-url/*`
- Save changes in Supabase dashboard under Authentication → URL Configuration.

#### 3b. Adding Authentication Providers
- Go to Supabase dashboard → Authentication → Providers
- Enable and configure each provider (Google, Azure)

#### 3c. Configuring Applications for OAuth

##### Google OAuth2 Client Setup (Google Cloud Console)
1. Go to Google Cloud Console → APIs & Services → Credentials → Create OAuth 2.0 Client ID.
2. Choose "Web application" as the application type.
3. Set the name (e.g., PlumbingPoCClient).
4. Add Authorized redirect URI:
   - `https://<your-supabase-project>.supabase.co/auth/v1/callback`
5. (Optional) Add Authorized JavaScript origins for local development:
   - `http://your-local-backend-url/`
   - `http://your-local-frontend-url/`
6. Save and copy the Client ID and Client Secret.
7. Enter these values in Supabase dashboard under Authentication → Providers → Google.
8. Ensure the following scopes are enabled in Google:
   - `email`
   - `profile`
   - `openid`
9. Save changes in both Supabase and Google Cloud Console.

URL:  https://console.cloud.google.com/


##### Azure Entra App Registration (Microsoft Entra Admin Center)
1. Register a new app in Microsoft Entra admin center.
2. Set the Redirect URI:
   - Platform: Web
   - URI: `https://<your-supabase-project>.supabase.co/auth/v1/callback`
3. Certificates & Secrets:
   - Create a new client secret and copy the value.
4. API Permissions:
    - Microsoft Graph → Delegated permissions:
       - `openid` (required for authentication)
       - `email` (required to get user's email)
       - `User.Read` (required to read user profile info)
    - Click "Grant admin consent" for your directory to ensure all permissions are active.
5. Token Configuration (Optional Claims):
    - Go to "Token configuration" in Azure portal.
    - Add an optional claim for `email` in the ID token:
       - Click "Add optional claim" → ID token → select `email`.
       - Confirm the claim appears in the list as shown in the Azure portal.
       - This ensures the user's email is included in the token sent to Supabase.
    - (Status: claim added as of August 21, 2025)
6. Branding & Properties:
   - Set app name and logo as desired.
7. Enter Azure Client ID and Client Secret in Supabase dashboard under Authentication → Providers → Azure.
8. Save changes in both Supabase and Azure portal.

URL:  https://entra.microsoft.com

### 4. Troubleshooting
- **Infinite Recursion Error:** If you see an "infinite recursion" error, use the `is_admin()` function pattern described in this document. This `SECURITY DEFINER` function is the standard way to break recursion loops in RLS policies.
- **Admin Can't See All Data:** If an admin can't see all records in a table, it means the `SELECT` policy for that table is missing the `OR is_admin()` condition.
- **After Updating Policies:** Policies using the `is_admin()` function do **not** require you to log out and back in. A simple page refresh is sufficient.
- **OAuth Issues:** Ensure permissions are granted/consented, client secrets are valid, and redirect URIs are identical in both the provider's dashboard and Supabase.

---

### 5. Supabase information

#### supabase cli
-- npx supabase login
-- npx supabase link

#### install supabase on macos
brew install supabase/tap/supabase
supabase --version

## supabase database dump
export PGPASSWORD='YOUR_PASSWORD'
pg_dump 'postgresql://PlumbingPoC@oxoiwzijacglgueemlva.supabase.co:5432/postgres' --schema-only --file="supabase_schema_audit.sql"

#### Query 1: Table & Column Schema
SELECT 
    c.table_schema,
    c.table_name,
    c.column_name,
    c.data_type,
    c.is_nullable,
    c.column_default
FROM 
    information_schema.columns c
WHERE 
    c.table_schema = 'public'
    AND c.table_name IN ('invoices', 'quote_attachments', 'quotes', 'request_notes', 'requests', 'user_profiles')
ORDER BY 
    c.table_name, 
    c.ordinal_position;

### Query 2: Row Level Security (RLS) Policies
SELECT
    p.schemaname AS schema_name,
    p.tablename AS table_name,
    p.policyname AS policy_name,
    p.permissive,
    p.cmd AS command_type,
    p.qual AS policy_expression,
    p.with_check AS with_check_expression
FROM
    pg_policies p
WHERE
    p.schemaname = 'public'
ORDER BY
    p.tablename,
    p.policyname;

#### Query 3: Storage Buckets & Policies
SELECT 
    id,
    name,
    public,
    avif_autodetection,
    file_size_limit,
    allowed_mime_types
FROM 
    storage.buckets;

#### Query 4: Indexes
SELECT
    tablename,
    indexname,
    indexdef
FROM
    pg_indexes
WHERE
    schemaname = 'public'
    AND tablename IN ('invoices', 'quote_attachments', 'quotes', 'request_notes', 'requests', 'user_profiles')
ORDER BY
    tablename,
    indexname;

#### Query 5: Functions
SELECT 
  p.proname AS function_name,
  pg_get_function_identity_arguments(p.oid) AS function_arguments,
  pg_get_functiondef(p.oid) AS function_definition
FROM 
  pg_proc p
JOIN 
  pg_namespace n ON n.oid = p.pronamespace
WHERE 
  n.nspname = 'public' -- Filters for your main schema
  AND p.prokind = 'f'   -- Ensures we only get functions, not procedures or aggregates
ORDER BY 
  p.proname;

#### Query 6: Publications

##### Create publication

```sql
-- This script directly and explicitly adds the required tables to the real-time publication.
ALTER PUBLICATION supabase_realtime ADD TABLE public.requests;
ALTER PUBLICATION supabase_realtime ADD TABLE public.request_notes;
ALTER PUBLICATION supabase_realtime ADD TABLE public.quotes;
ALTER PUBLICATION supabase_realtime ADD TABLE public.quote_attachments;
```

##### get list of all publications

```sql
SELECT
  schemaname,
  tablename
FROM
  pg_publication_tables
WHERE
  pubname = 'supabase_realtime';
```

#### subscribers in useRequests.ts

```typescript
// From: vite-app/src/features/requests/hooks/useRequests.ts
const subscriptions = [
    { table: 'requests' },          // <-- For status changes, etc.
    { table: 'request_notes' },      // <-- For the communication log
    { table: 'quotes' },             // <-- For quote updates
    { table: 'quote_attachments' } // <-- For file uploads
];
```

##### How process works public subscribe pattern with supabase. 

```mermaid
sequenceDiagram
    participant Admin's Browser (Client A)
    participant Customer's Browser (Client B)
    participant Supabase Realtime Server
    participant Postgres Database (request_notes table)

    Note over Admin's Browser (Client A), Customer's Browser (Client B): Pre-condition: Both users have the RequestDetailModal open.

    Admin's Browser (Client A)->>+Supabase Realtime Server: 1. Subscribe to channel: "request-notes-XYZ"
    Supabase Realtime Server-->>-Admin's Browser (Client A): 2. Subscription Confirmed (WebSocket open)

    Customer's Browser (Client B)->>+Supabase Realtime Server: 1. Subscribe to channel: "request-notes-XYZ"
    Supabase Realtime Server-->>-Customer's Browser (Client B): 2. Subscription Confirmed (WebSocket open)

    Note over Supabase Realtime Server: Realtime Server now knows that Client A and Client B are both listening to "request-notes-XYZ".

    Admin's Browser (Client A)->>+Postgres Database (request_notes table): 3. User sends message (API call -> INSERT new note)
    Postgres Database (request_notes table)-->>-Admin's Browser (Client A): API Response (OK)

    Postgres Database (request_notes table)->>+Supabase Realtime Server: 4. [Publication] A new row was inserted into request_notes for request_id = 'XYZ'
    
    Note over Supabase Realtime Server: The Routing Logic!
    Supabase Realtime Server->>Supabase Realtime Server: 5. Check subscribers for channel "request-notes-XYZ". Found: Client A, Client B.

    Supabase Realtime Server->>+Admin's Browser (Client A): 6. [WebSocket Push] Broadcast new note payload
    Admin's Browser (Client A)->>Admin's Browser (Client A): 8. Listener fires -> onNoteAdded() -> Re-fetch & UI Refresh
    deactivate Admin's Browser (Client A)

    Supabase Realtime Server->>+Customer's Browser (Client B): 7. [WebSocket Push] Broadcast new note payload
    Customer's Browser (Client B)->>Customer's Browser (Client B): 9. Listener fires -> onNoteAdded() -> Re-fetch & UI Refresh
    deactivate Customer's Browser (Client B)
    
    deactivate Supabase Realtime Server
```

#### Calling key functions 
-- Replace with the actual user_id you want to clear.
SELECT delete_user_data('3efcf1bf-978f-4376-af87-8245c664c7ca');

_Last updated: August 21, 2025_
--- END OF FILE supabase/SUPABASE_DATABASE_AND_AUTH_SETUP.md ---

--- START OF FILE supabase/SUPABASE_QUOTE_ATTACHMENTS_TABLE.sql ---

-- Create quote_attachments table
CREATE TABLE quote_attachments (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  request_id uuid REFERENCES requests(id) ON DELETE CASCADE,
  file_url text NOT NULL,
  file_name text,
  mime_type text,
  uploaded_at timestamptz DEFAULT now()
);

-- Index for faster lookup
CREATE INDEX idx_quote_attachments_request_id ON quote_attachments(request_id);

--- END OF FILE supabase/SUPABASE_QUOTE_ATTACHMENTS_TABLE.sql ---

--- START OF FILE supabase/SUPABASE_TABLES.sql ---

-- 1. Drop the helper function if you created it.
DROP FUNCTION IF EXISTS get_my_claim(TEXT);

-- 2. Drop the separate SELECT policies just in case they are still around.
DROP POLICY IF EXISTS "Allow individual users to view their own profile" ON public.user_profiles;
DROP POLICY IF EXISTS "Allow admins to view all profiles" ON public.user_profiles;

-- 3. **CRITICAL FIX:** Drop the consolidated policy IF IT EXISTS before creating it.
DROP POLICY IF EXISTS "Enable read access for users and admins" ON public.user_profiles;

-- 4. Create the ONE consolidated SELECT policy that handles both cases.
CREATE POLICY "Enable read access for users and admins"
ON public.user_profiles
FOR SELECT
TO authenticated
USING (
  -- CASE 1: The logged-in user is requesting their OWN profile.
  (auth.uid() = user_id)
  
  OR
  
  -- CASE 2: The logged-in user is an admin.
  ((auth.jwt() -> 'raw_user_meta_data' ->> 'role') = 'admin')
);

-- Add last_follow_up_sent_at column to requests table
ALTER TABLE public.requests
ADD COLUMN last_follow_up_sent_at TIMESTAMPTZ;

-- Add scheduled_start_date column to requests table
ALTER TABLE public.requests
ADD COLUMN scheduled_start_date TIMESTAMPTZ;
--- END OF FILE supabase/SUPABASE_TABLES.sql ---

--- START OF FILE supabase/migrations/20250830004708_add_profitability_score_to_requests_table.sql ---

ALTER TABLE requests
ADD COLUMN profitability_score INTEGER;
--- END OF FILE supabase/migrations/20250830004708_add_profitability_score_to_requests_table.sql ---

--- START OF FILE vite-app/api/README.md ---


# PlumbingPOC API Server

This document outlines the architecture and conventions for the PlumbingPOC API server, built with Node.js and Express using an MVC-inspired pattern.

## Core Architecture: MVC Pattern

**Model:** Supabase handles all database interactions, data shaping, and enforces data integrity through its schema and Row Level Security (RLS) policies.

**View:** For a REST API, the "View" is the JSON data sent to the client. Controllers assemble and send these responses.

**Controller:** Contains the core business logic. Controllers receive requests from routes, interact with the Model (Supabase), and send a response back through the View (JSON).

---

## Directory Structure

```text
api/
├── controllers/           # Business logic (MVC: Controller)
│   └── requestController.js
├── middleware/            # Reusable functions before controllers
│   ├── authMiddleware.js
│   └── validationMiddleware.js
├── routes/                # Maps URLs to controllers
│   └── requestRoutes.js
├── validation/            # Data contracts (schemas)
│   └── schemas.js
└── server.js              # Main application entry point
```

## File Responsibilities

### `server.js`

- Initializes the Express app
- Configures core middleware (CORS, body-parser)
- Loads and delegates all API routes to the `routes/` directory
- Defines a global error handler
- Starts the server

### `/routes`

Defines endpoints (e.g., `/submit`, `/:requestId/notes`), specifies HTTP methods (GET, POST), and chains middleware before passing the request to the controller.

**Example from `requestRoutes.js`:**

```javascript
// Create a formal quote for a request (admin only)
router.post(
    '/:requestId/quotes', // The Path
    authenticate,         // Middleware 1: Is the user logged in?
    isAdmin,              // Middleware 2: Does the user have admin role?
    validate(createQuoteSchema), // Middleware 3: Is the request body valid?
    createQuoteForRequest // The Controller function to run
);
```

### `/controllers`

Self-contained business logic for specific tasks (e.g., submitting a quote, adding a note). Receives `req` and `res` after middleware.

### `/middleware`

Reusable functions between route and controller.
- `authMiddleware.js`: Handles authentication (`authenticate`) and role-based authorization (`isAdmin`).
- `validationMiddleware.js`: Generic `validate` function checks incoming request data against a schema.

### `/validation`

Defines "data contracts" using zod. Each schema in `schemas.js` clearly defines the expected shape and types for endpoint request bodies, params, or queries.

## Request Lifecycle

1. **Client Request:** React app sends a POST request to `/api/requests/:id/notes`.
2. **server.js:** Request hits `server.js`, passes through CORS and JSON body parser.
3. **routes/requestRoutes.js:** Router matches path/method, applies `authenticate` middleware and `addNote` controller.
4. **middleware/authMiddleware.js:** `authenticate` checks for valid JWT, attaches `req.user` and calls `next()`. If invalid, sends 401 Unauthorized and stops flow.
5. **controllers/requestController.js:** `addRequestNote` runs, interacts with Supabase, sends JSON response (e.g., `res.status(201).json(...)`).
6. **Client Receives Response:** React app receives JSON data or error message.

This clean separation makes the system robust and predictable.

## API Testing and Troubleshooting with cURL and JWT

When developing or debugging API endpoints that require authentication, `cURL` is an invaluable tool. Here's how to use it effectively with JWT tokens:

### 1. Getting Your JWT Token from the Browser

To interact with authenticated endpoints, you'll need a valid JWT token. You can obtain this from your browser's developer tools after a successful login:

1. Open your browser's developer tools (usually F12 or Cmd+Option+I).
2. Go to the 'Network' tab.
3. Perform an action in your application that triggers an authenticated API request (e.g., logging in, fetching user data).
4. Find the relevant API request in the Network tab.
5. In the request details, look for the 'Headers' section.
6. Locate the `Authorization` header. The value will typically be in the format `Bearer <YOUR_JWT_TOKEN>`. Copy the `<YOUR_JWT_TOKEN>` part.

### 2. Constructing and Executing the cURL Command

Once you have your token, you can construct a `cURL` command to test authenticated endpoints. Remember to replace placeholders with your actual data.

```bash
curl -X <HTTP_METHOD> \
     http://localhost:3000/api/<YOUR_ENDPOINT> \
     -H "Content-Type: application/json" \
     -H "Authorization: Bearer <YOUR_JWT_TOKEN>" \
     -d '{"key": "value"}' # Only for POST/PUT requests with a body
```

**Important:** When executing in your terminal, ensure the entire `cURL` command is on a **single line** to avoid shell parsing errors.

### 3. Troubleshooting JWT Tokens with jwt.io

If you encounter "Unauthorized: Invalid token" errors, your JWT might be expired or malformed. `jwt.io` is an excellent online tool for inspecting JWTs:

1. Go to [jwt.io](https://jwt.io/).
2. Paste your full JWT token into the 'Encoded' section on the left.
3. **Expected Result:** You will likely see a message like "a-string-secret-at-least-256-bits-long" in the "Signature Verified" section. This is normal and expected, as `jwt.io` does not have access to your Supabase project's secret key to verify the token's signature. The important part is to inspect the payload.
4. The 'Payload' section on the right will decode the token, showing its claims (data).
5. **Check the `exp` (expiration) claim:** This is a Unix timestamp. If the current time is past this timestamp, your token has expired, and you'll need to generate a new one.
6. **Inspect other claims:** Ensure that claims like `role` (e.g., `admin`) and `email` match your expectations for the user.

## Mermaid diagrams


### relationship diagram
```mermaid
graph TD
    subgraph "API Server"
        A[server.js] --> B{/api/requests/*};
        
        subgraph "Routes"
            B --> C[requestRoutes.js];
        end
        
        subgraph "Middleware"
            D[authMiddleware.js];
            E[validationMiddleware.js];
        end

        subgraph "Validation"
            F[schemas.js];
        end

        subgraph "Controllers"
            G[requestController.js];
        end

        C -- "Defines Path & Chains Middleware" --> D;
        C -- " " --> E;
        E -- "Uses" --> F;
        C -- "Calls" --> G;
    end
    
    H((Supabase));
    G -- "Interacts with (Model)" --> H;
    
    I([Client]);
    I -- "HTTP Request" --> A;
    G -- "JSON Response (View)" --> I;

    style A fill:#f9f,stroke:#333,stroke-width:2px
    style B fill:#bbf,stroke:#333,stroke-width:2px
    style C fill:#bbf,stroke:#333,stroke-width:2px
    style D fill:#9f9,stroke:#333,stroke-width:2px
    style E fill:#9f9,stroke:#333,stroke-width:2px
    style F fill:#f99,stroke:#333,stroke-width:2px
    style G fill:#ff9,stroke:#333,stroke-width:2px
```

### Sequence Diagram Admin Creates a Quote (The Original Diagram)
```mermaid
sequenceDiagram
    participant Client
    participant server.js
    participant requestRoutes.js
    participant authMiddleware.js
    participant validationMiddleware.js
    participant requestController.js
    participant Supabase

    Client->>server.js: POST /api/requests/:id/quotes (with data & token)
    activate server.js
    
    server.js->>requestRoutes.js: Route request
    activate requestRoutes.js
    
    requestRoutes.js->>authMiddleware.js: 1. call authenticate()
    activate authMiddleware.js
    authMiddleware.js->>Supabase: supabase.auth.getUser(token)
    Supabase-->>authMiddleware.js: Returns user object
    authMiddleware.js-->>requestRoutes.js: next()
    deactivate authMiddleware.js
    
    requestRoutes.js->>authMiddleware.js: 2. call isAdmin()
    activate authMiddleware.js
    authMiddleware.js->>Supabase: Check user_profiles.role
    Supabase-->>authMiddleware.js: Returns { role: 'admin' }
    authMiddleware.js-->>requestRoutes.js: next()
    deactivate authMiddleware.js
    
    requestRoutes.js->>validationMiddleware.js: 3. call validate(schema)
    activate validationMiddleware.js
    validationMiddleware.js-->>requestRoutes.js: next() (Data is valid)
    deactivate validationMiddleware.js

    requestRoutes.js->>requestController.js: 4. call createQuoteForRequest()
    activate requestController.js
    
    requestController.js->>Supabase: INSERT into quotes table
    activate Supabase
    Supabase-->>requestController.js: Confirms insert
    deactivate Supabase
    
    requestController.js->>Supabase: UPDATE requests table status
    activate Supabase
    Supabase-->>requestController.js: Confirms update
    deactivate Supabase
    
    requestController.js-->>server.js: Sends JSON response
    deactivate requestController.js
    deactivate requestRoutes.js
    
    server.js-->>Client: 201 Created (with quote data)
    deactivate server.js
```
### Sequence diagram AI Generates Follow-up Questions
```mermaid
sequenceDiagram
    participant Client
    participant server.js
    participant requestRoutes.js
    participant authMiddleware.js
    participant validationMiddleware.js
    participant requestController.js
    participant OpenAI_API as "OpenAI API (GPT-4)"

    Client->>server.js: POST /api/requests/gpt-follow-up (with answers & token)
    activate server.js
    
    server.js->>requestRoutes.js: Route request
    activate requestRoutes.js
    
    requestRoutes.js->>authMiddleware.js: 1. call authenticate()
    activate authMiddleware.js
    authMiddleware.js-->>requestRoutes.js: next() (User is valid)
    deactivate authMiddleware.js
    
    requestRoutes.js->>validationMiddleware.js: 2. call validate(schema)
    activate validationMiddleware.js
    validationMiddleware.js-->>requestRoutes.js: next() (Data is valid)
    deactivate validationMiddleware.js

    requestRoutes.js->>requestController.js: 3. call getGptFollowUp()
    activate requestController.js
    
    requestController.js->>OpenAI_API: axios.post to /v1/chat/completions
    activate OpenAI_API
    OpenAI_API-->>requestController.js: Returns follow-up questions
    deactivate OpenAI_API
    
    requestController.js-->>server.js: Sends JSON response { additionalQuestions: [...] }
    deactivate requestController.js
    deactivate requestRoutes.js
    
    server.js-->>Client: 200 OK (with questions array)
    deactivate server.js
```
--- END OF FILE vite-app/api/README.md ---

--- START OF FILE vite-app/api/config/supabase.js ---

// /config/supabase.js
const { createClient } = require('@supabase/supabase-js');

// Load environment variables immediately
require('dotenv').config({ path: require('path').resolve(__dirname, '../../../.env') });

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  throw new Error("Supabase URL or Service Role Key is missing. Check your .env file.");
}

// Create and export a single, shared Supabase client instance
const supabase = createClient(supabaseUrl, supabaseKey);

module.exports = supabase;
--- END OF FILE vite-app/api/config/supabase.js ---

--- START OF FILE vite-app/api/controllers/followUpController.js ---

// vite-app/api/controllers/followUpController.js

const { supabase } = require('../config/supabase');
const { sendFollowUpEmail } = require('../services/emailService');

const sendFollowUpEmails = async (req, res) => {
  try {
    // 1. Fetch all requests with 'quoted' status
    const { data: requests, error: requestsError } = await supabase
      .from('requests')
      .select('*, user_profiles(*)')
      .eq('status', 'quoted');

    if (requestsError) throw requestsError;

    // 2. Filter requests that need a follow-up
    const requestsToFollowUp = requests.filter(request => {
      if (!request.last_follow_up_sent_at) {
        return true; // Send if never sent before
      }

      const threeDaysAgo = new Date();
      threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);

      const lastSent = new Date(request.last_follow_up_sent_at);

      return lastSent < threeDaysAgo;
    });

    // 3. Send follow-up emails
    for (const request of requestsToFollowUp) {
      await sendFollowUpEmail(request);

      // 4. Update the last_follow_up_sent_at timestamp
      await supabase
        .from('requests')
        .update({ last_follow_up_sent_at: new Date() })
        .eq('id', request.id);
    }

    res.status(200).json({ message: `Follow-up emails sent to ${requestsToFollowUp.length} customers.` });
  } catch (error) {
    console.error('Error sending follow-up emails:', error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
};

module.exports = { sendFollowUpEmails };

--- END OF FILE vite-app/api/controllers/followUpController.js ---

--- START OF FILE vite-app/api/controllers/requestController.js ---

// vite-app/api/controllers/requestController.js
const path = require('path');
const axios = require('axios');
const supabase = require('../config/supabase');
const emailService = require('../services/emailService');

/**
 * Handles fetching a request by ID, including user profile info and all related tables.
 */
const getRequestById = async (req, res, next) => {
  try {
    const { id } = req.params;
    const { data: request, error } = await supabase
      .from('requests')
      .select(`*, user_profiles!requests_user_id_fkey(*), quote_attachments(*), quotes(*), request_notes(*)`)
      .eq('id', id)
      .single();
    if (error || !request) {
      return res.status(404).json({ error: 'Request not found.' });
    }
    request.user_profiles = request.user_profiles || null;
    res.json(request);
  } catch (err) {
    next(err);
  }
};

/**
 * Handles getting AI follow-up questions from GPT.
 */
const getGptFollowUp = async (req, res, next) => {
  try {
    const { clarifyingAnswers, category, problem_description } = req.body;
    const isOtherCategory = category === 'other';
    const ambiguousKeywords = ['weird', 'strange', 'not sure', 'something else', 'intermittent', 'help'];
    const hasAmbiguousKeywords = problem_description && ambiguousKeywords.some(keyword => problem_description.toLowerCase().includes(keyword));
    
    if (!isOtherCategory && !hasAmbiguousKeywords) {
      console.log('[API EFFICIENCY] Skipping GPT-4 call for standard, clear request.');
      return res.json({ additionalQuestions: [] });
    }
    
    const prompt = `
      You are a plumbing quote agent. Here are the user's answers for a ${category} quote:
      ${clarifyingAnswers.map((item) => `Q: ${item.question}\nA: ${item.answer}`).join('\n\n')}
      Do you have any additional follow-up questions? If not, reply: "No, this is perfect. No additional questions required." If yes, list each follow-up question on a new line, starting each with a number (e.g., "1. What is...").
    `;

    const gptResponse = await axios.post('https://api.openai.com/v1/chat/completions', 
      { model: 'gpt-4', messages: [{ role: 'user', content: prompt }], max_tokens: 200, temperature: 0.2 },
      { headers: { 'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`, 'Content-Type': 'application/json' } }
    );
    
    const reply = gptResponse.data.choices[0].message.content.trim();
    let additionalQuestions = [];
    if (!/no additional questions required/i.test(reply)) {
      additionalQuestions = reply.split('\n').map(q => q.trim()).filter(q => /^\d+\./.test(q)).map(q => q.replace(/^\d+\.\s*/, ''));
    }
    res.json({ additionalQuestions });

  } catch (err) {
    next(err);
  }
};

/**
 * Handles the final submission of a new quote request.
 */
const submitQuoteRequest = async (req, res, next) => {
  try {
    const { clarifyingAnswers, contactInfo, category, isEmergency, property_type, is_homeowner, problem_description, preferred_timing, additional_notes } = req.body;
    
    const requestData = {
      user_id: req.user.id,
      customer_name: contactInfo.name || null,
      service_address: `${contactInfo.address || ''}, ${contactInfo.city || ''}, ${contactInfo.province || ''} ${contactInfo.postal_code || ''}`.trim() || null,
      contact_info: contactInfo.email || contactInfo.phone || null,
      problem_category: category,
      is_emergency: isEmergency === true,
      property_type: property_type || null,
      is_homeowner: is_homeowner === 'Yes',
      problem_description: problem_description || null,
      preferred_timing: preferred_timing || null,
      additional_notes: additional_notes || null,
      answers: clarifyingAnswers,
      status: 'new',
    };
    
    const { data, error } = await supabase.from('requests').insert(requestData).select().single();
    if (error) throw error;

    await emailService.sendRequestSubmittedEmail(data);
    
    res.status(201).json({ message: 'Quote request submitted successfully.', request: data });
  } catch (err) {
    next(err);
  }
};

/**
 * Handles uploading file attachments and linking them to a request and/or a quote.
 */
const uploadAttachment = async (req, res, next) => {
  try {
    const { request_id, quote_id } = req.body;
    const files = req.files;

    if (!files || files.length === 0) {
      return res.status(400).json({ error: 'No files uploaded.' });
    }
    if (!request_id) {
      return res.status(400).json({ error: 'request_id is required.' });
    }

    const { data: requestOwner, error: ownerError } = await supabase
      .from('requests')
      .select('user_id')
      .eq('id', request_id)
      .single();
      
    if (ownerError) {
        return res.status(404).json({ error: 'Request not found.' });
    }

    const { data: profile } = await supabase.from('user_profiles').select('role').eq('user_id', req.user.id).single();

    if (profile?.role !== 'admin' && requestOwner.user_id !== req.user.id) {
        return res.status(403).json({ error: 'Forbidden: You do not have permission to upload files for this request.' });
    }

    const uploadPromises = files.map(async (file) => {
      const sanitizedFileName = file.originalname.replace(/\s/g, '_');
      const pathSegments = ['public', request_id];
      if (quote_id) {
        pathSegments.push(quote_id);
      }
      pathSegments.push(sanitizedFileName);
      const filePath = pathSegments.join('/');
      
      const { error: uploadError } = await supabase.storage
        .from('PlumbingPoCBucket')
        .upload(filePath, file.buffer, { contentType: file.mimetype, upsert: true });
      
      if (uploadError) {
        console.error('Supabase upload error:', uploadError);
        throw uploadError;
      }

      return { 
        request_id,
        quote_id: quote_id || null,
        file_name: file.originalname, 
        mime_type: file.mimetype,
        file_url: filePath 
      };
    });

    const attachmentRecords = await Promise.all(uploadPromises);

    const { data: insertedAttachments, error: insertError } = await supabase
      .from('quote_attachments')
      .insert(attachmentRecords)
      .select();

    if (insertError) throw insertError;

    res.status(200).json({ message: 'Attachments uploaded successfully.', attachments: insertedAttachments });
  
  } catch (err) {
    next(err);
  }
};

/**
 * Handles retrieving a file from Supabase storage.
 */
const getStorageObject = async (req, res, next) => {
  try {
    const objectPath = req.params[0];
    const { data, error } = await supabase.storage.from('PlumbingPoCBucket').download(objectPath);
    
    if (error) {
      console.error('Supabase storage download error:', error.message);
      return res.status(403).json({ error: 'Forbidden: You do not have permission to access this file.' });
    }
    
    const fileName = path.basename(objectPath);
    res.setHeader('Content-Type', data.type || 'application/octet-stream');
    res.setHeader('Content-Disposition', `inline; filename="${fileName}"`);
    const buffer = Buffer.from(await data.arrayBuffer());
    res.send(buffer);
  } catch (err) {
    next(err);
  }
};

/**
 * Handles adding a note to a request from either a customer or admin.
 */
const addRequestNote = async (req, res, next) => {
  try {
    const { id } = req.params;
    const { note } = req.body;
    const { user } = req;

    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('role')
      .eq('user_id', user.id)
      .single();

    if (profileError) throw profileError;

    const noteData = {
      request_id: id,
      user_id: user.id,
      note,
      author_role: profile.role === 'admin' ? 'admin' : 'customer',
    };

    const { data, error } = await supabase.from('request_notes').insert(noteData).select().single();
    if (error) throw error;
    
    res.status(201).json(data);
  } catch (err) {
    next(err);
  }
};

/**
 * Handles an admin creating a formal quote for a request.
 */
const createQuoteForRequest = async (req, res, next) => {
  try {
    const { id } = req.params;
    const { quote_amount, details } = req.body;
    
    const { data: requestData, error: requestError } = await supabase
      .from('requests')
      .select('user_id, contact_info')
      .eq('id', id)
      .single();
    if (requestError) throw requestError;

    const quoteData = {
      request_id: id,
      user_id: requestData.user_id,
      quote_amount,
      details,
      status: 'sent',
    };

    const { data: newQuote, error } = await supabase.from('quotes').insert(quoteData).select().single();
    if (error) throw error;
    
    await supabase.from('requests').update({ status: 'quoted' }).eq('id', id);

    await emailService.sendQuoteAddedEmail(requestData, newQuote);

    res.status(201).json(newQuote);
  } catch (err) {
    next(err);
  }
};

/**
 * Handles an admin updating an existing quote for a request.
 */
const updateQuote = async (req, res, next) => {
  try {
    const { id, quoteId } = req.params;
    const { quote_amount, details } = req.body;

    const { data, error } = await supabase
      .from('quotes')
      .update({
        quote_amount,
        details,
      })
      .eq('id', quoteId)
      .eq('request_id', id)
      .select()
      .single();

    if (error) throw error;
    if (!data) return res.status(404).json({ error: 'Quote not found or does not belong to this request.' });

    await supabase.from('requests').update({ status: 'quoted' }).eq('id', id);

    res.status(200).json(data);
  } catch (err) {
    next(err);
  }
};

/**
 * Handles accepting a specific quote, which also updates the parent request status.
 */
const acceptQuote = async (req, res, next) => {
  try {
    const { id, quoteId } = req.params;

    const { error } = await supabase.rpc('accept_quote_and_update_request', {
      p_request_id: id,
      p_quote_id: quoteId,
    });

    if (error) throw error;

    const { data: requestData } = await supabase.from('requests').select('*').eq('id', id).single();
    if (requestData) {
      await emailService.sendStatusUpdateEmail(requestData);
    }

    res.status(200).json({ message: 'Quote accepted successfully.' });
  } catch (err) {
    next(err);
  }
};

/**
 * Handles an admin updating the status of a request.
 */
const updateRequestStatus = async (req, res, next) => {
  try {
    const { id } = req.params;
    const { status, scheduled_start_date } = req.body;

    const updatePayload = { status };
    if (scheduled_start_date) {
        updatePayload.scheduled_start_date = new Date(scheduled_start_date).toISOString();
    }

    const { data, error } = await supabase
      .from('requests')
      .update(updatePayload)
      .eq('id', id)
      .select()
      .single();

    if (error) throw error;
    if (!data) return res.status(404).json({ error: 'Request not found.' });

    await emailService.sendStatusUpdateEmail(data);

    res.status(200).json(data);
  } catch (err) {
    next(err);
  }
};

module.exports = {
  getGptFollowUp,
  submitQuoteRequest,
  uploadAttachment,
  getStorageObject,
  addRequestNote,
  createQuoteForRequest,
  getRequestById,
  updateQuote,
  acceptQuote,
  updateRequestStatus,
};
--- END OF FILE vite-app/api/controllers/requestController.js ---

--- START OF FILE vite-app/api/controllers/triageController.js ---

// vite-app/api/controllers/triageController.js

const supabase = require('../config/supabase');
const {
  OpenAI
} = require('openai');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const triageRequest = async (req, res) => {
  const {requestId} = req.params;

  try {
    // 1. Fetch the request details
    const {data: request, error: requestError} = await supabase
      .from('requests')
      .select('*')
      .eq('id', requestId)
      .single();

    if (requestError) throw requestError;

    // 2. Prepare the prompt for GPT-4
    const prompt = `
      A new plumbing service request has been submitted. Please analyze the following details and provide a triage summary, a priority score (1-10), and a profitability score (1-10).

      Problem Category: ${request.problem_category}
      Answers:
      ${request.answers.map(a => `- ${a.question}: ${a.answer}`).join('\n')}

      Based on the information provided, please return a JSON object with five keys:
      - "triage_summary": A one-sentence summary of the request, highlighting urgency and potential job value.
      - "priority_score": An integer from 1 to 10, where 10 is the highest priority.
      - "priority_explanation": A one-sentence explanation for the priority score.
      - "profitability_score": An integer from 1 to 10, where 10 is the highest profitability. Consider factors like potential job size, complexity, and likelihood of customer conversion.
      - "profitability_explanation": A one-sentence explanation for the profitability score.
    `;

    // 3. Call the OpenAI API
    const response = await openai.chat.completions.create({
      model: 'gpt-4-1106-preview',
      messages: [{
        role: 'user',
        content: prompt
      }],
      response_format: {
        type: 'json_object'
      },
    });

    const {triage_summary, priority_score, priority_explanation, profitability_score, profitability_explanation} = JSON.parse(response.choices[0].message.content);

    // 4. Update the request in the database
    const {error: updateError} = await supabase
      .from('requests')
      .update({
        triage_summary,
        priority_score,
        priority_explanation,
        profitability_score,
        profitability_explanation
      })
      .eq('id', requestId);

    if (updateError) throw updateError;

    res.status(200).json({
      message: 'Triage complete.',
      triage_summary,
      priority_score,
      priority_explanation,
      profitability_score,
      profitability_explanation
    });
  } catch (error) {
    console.error('Error during triage:', error);
    res.status(500).json({
      message: 'Internal Server Error'
    });
  }
};

module.exports = {triageRequest};

--- END OF FILE vite-app/api/controllers/triageController.js ---

--- START OF FILE vite-app/api/controllers/userController.js ---

/**
 * Handles fetching the profile for the currently authenticated user.
 */
const getUserProfile = async (req, res, next) => {
  try {
    const { user } = req; // From the `authenticate` middleware
    const { data, error } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('user_id', user.id)
      .single();

    if (error) {
      return res.status(400).json({ error: error.message });
    }
    if (!data) {
      return res.status(404).json({ error: 'Profile not found for the current user.' });
    }
    res.status(200).json(data);
  } catch (err) {
    next(err);
  }
};
// vite-app/api/controllers/userController.js

const supabase = require('../config/supabase');

/**
 * Handles updating the profile for the currently authenticated user.
 */
const updateUserProfile = async (req, res, next) => {
  try {
    const { user } = req; // From the `authenticate` middleware
    const profileData = req.body;

    // Ensure the user can only update their own profile
    const { data, error } = await supabase
      .from('user_profiles')
      .update(profileData)
      .eq('user_id', user.id)
      .select()
      .single();

    if (error) {
      // If RLS prevents the update, Supabase might return an error
      // or simply an empty data array. We handle both.
      if (error.code === 'PGRST204') { // No content, RLS might have blocked it
        return res.status(404).json({ error: 'Profile not found or permission denied.' });
      }
      throw error;
    }

    if (!data) {
      return res.status(404).json({ error: 'Profile not found for the current user.' });
    }

    res.status(200).json(data);
  } catch (err) {
    next(err);
  }
};

/**
 * Handles creating the profile for the currently authenticated user.
 */
const createUserProfile = async (req, res, next) => {
  try {
    const { user } = req; // From the `authenticate` middleware
    const profileData = req.body;
    // Attach user_id to profileData
    profileData.user_id = user.id;

    // Insert new profile
    const { data, error } = await supabase
      .from('user_profiles')
      .insert([profileData])
      .select()
      .single();

    if (error) {
      return res.status(400).json({ error: error.message });
    }
    res.status(201).json(data);
  } catch (err) {
    next(err);
  }
};

module.exports = {
  updateUserProfile,
  createUserProfile,
  getUserProfile,
};
--- END OF FILE vite-app/api/controllers/userController.js ---

--- START OF FILE vite-app/api/middleware/authMiddleware.js ---

// /middleware/authMiddleware.js
/*
This file isolates all authentication and authorization logic. It's clean, 
reusable, and easy to update if your permission rules change.
*/
const { createClient } = require('@supabase/supabase-js');
// Load environment variables immediately
require('dotenv').config({ path: require('path').resolve(__dirname, '../../../.env') });

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

// Create a Supabase client specifically for authentication using the Anon Key
const supabaseAuth = createClient(supabaseUrl, supabaseAnonKey);

// The main Supabase client (using Service Role Key) is still imported for other operations if needed
const supabase = require('../config/supabase'); // This client is initialized with SUPABASE_SERVICE_ROLE_KEY

/**
 * Middleware to verify a user's JWT token from the Authorization header.
 * Attaches the authenticated user object to the request.
 */
const authenticate = async (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ error: 'Unauthorized: Missing JWT token.' });
  }
  const token = authHeader.split(' ')[1];
  
  try {
    // This function uses the supabaseAuth client (initialized with SUPABASE_ANON_KEY)
    // for token validation. This is the correct and secure way to validate user tokens.
    const { data: { user }, error } = await supabaseAuth.auth.getUser(token);
    if (error || !user) {
      throw new Error('Unauthorized: Invalid token.');
    }
    req.user = user;
    next();
  } catch (error) {
    return res.status(401).json({ error: error.message });
  }
};

/**
 * Middleware to ensure the authenticated user has the 'admin' role.
 * Must be used AFTER the authenticate middleware.
 */
const isAdmin = async (req, res, next) => {
  // Ensure we have a user from the previous `authenticate` middleware
  if (!req.user) {
    return res.status(401).json({ error: 'Authentication required.' });
  }

  try {
    // This function uses the main supabase client (initialized with SUPABASE_SERVICE_ROLE_KEY)
    // to fetch the user's profile and check their role. This might be intended to bypass RLS
    // if necessary for role checking, as it has elevated privileges.
    const { data: profile, error } = await supabase
      .from('user_profiles')
      .select('role')
      .eq('user_id', req.user.id)
      .single();

    if (error) {
        // This could happen if the profile doesn't exist yet, which is a valid state.
        // We treat it as non-admin.
        console.warn(`Could not fetch profile for user ${req.user.id}:`, error.message);
        return res.status(403).json({ error: 'Forbidden: Admin access required.' });
    }

    if (!profile || profile.role !== 'admin') {
      return res.status(403).json({ error: 'Forbidden: Admin access required.' });
    }
    
    // User is an admin, proceed to the next handler
    next();
  } catch (error) {
      next(error); // Pass unexpected errors to the global handler
  }
};

module.exports = {
  authenticate,
  isAdmin,
};
--- END OF FILE vite-app/api/middleware/authMiddleware.js ---

--- START OF FILE vite-app/api/middleware/validationMiddleware.js ---

// /middleware/validationMiddleware.js
/*
This file creates a generic, reusable middleware function. 
Instead of writing validation logic inside every controller, 
we use this function to check an incoming request against a 
zod schema. If the data is bad, it stops the request and sends 
a helpful error. If the data is good, it passes the request on to the controller.
*/
/**
 * A generic middleware factory for validating requests against a Zod schema.
 * @param {object} schema - The Zod schema to validate against.
 * @returns {function} An Express middleware function.
 */
const validate = (schema) => (req, res, next) => {
  try {
    // Zod's parse method will throw an error if validation fails.
    schema.parse({
      body: req.body,
      query: req.query,
      params: req.params,
    });
    // If we reach here, validation was successful.
    next();
  } catch (error) {
    // Zod errors are rich with detail, which we can send to the client.
    res.status(400).json({
      error: 'Validation failed',
      details: error.errors, // This provides an array of specific field errors
    });
  }
};

module.exports = {
  validate,
};
--- END OF FILE vite-app/api/middleware/validationMiddleware.js ---

--- START OF FILE vite-app/api/routes/followUpRoutes.js ---

// vite-app/api/routes/followUpRoutes.js

const express = require('express');
const router = express.Router();
const { sendFollowUpEmails } = require('../controllers/followUpController');
const { authMiddleware, adminMiddleware } = require('../middleware/authMiddleware');

// @route   POST /api/follow-up/send
// @desc    Send follow-up emails to customers with quoted requests
// @access  Admin
router.post('/send', authMiddleware, adminMiddleware, sendFollowUpEmails);

module.exports = router;

--- END OF FILE vite-app/api/routes/followUpRoutes.js ---

--- START OF FILE vite-app/api/routes/requestRoutes.js ---

// vite-app/api/routes/requestRoutes.js

const express = require('express');
const multer = require('multer');
const {
  getGptFollowUp,
  submitQuoteRequest,
  uploadAttachment,
  getStorageObject,
  addRequestNote,
  createQuoteForRequest,
  getRequestById,
  updateQuote,
  acceptQuote,
  updateRequestStatus,
} = require('../controllers/requestController');
const { authenticate, isAdmin } = require('../middleware/authMiddleware');
const { validate } = require('../middleware/validationMiddleware');
const {
  gptRequestSchema,
  submitQuoteSchema,
  addNoteSchema,
  createQuoteSchema,
  updateQuoteSchema,
  getObjectSchema,
  updateStatusSchema,
} = require('../validation/schemas');

const router = express.Router();
const upload = multer({ storage: multer.memoryStorage() });

// --- Core Quote Intake Routes ---

router.post('/gpt-follow-up', authenticate, validate(gptRequestSchema), getGptFollowUp);
router.post('/submit', authenticate, validate(submitQuoteSchema), submitQuoteRequest);
router.post('/attachments', authenticate, upload.array('attachment', 10), uploadAttachment);
router.get('/storage-object/*', authenticate, validate(getObjectSchema), getStorageObject);

// --- Client Portal & Admin Routes ---
router.post('/:id/notes', authenticate, validate(addNoteSchema), addRequestNote);
router.patch('/:id/status', authenticate, isAdmin, validate(updateStatusSchema), updateRequestStatus);
router.post('/:id/quotes', authenticate, isAdmin, validate(createQuoteSchema), createQuoteForRequest);
router.put('/:id/quotes/:quoteId', authenticate, isAdmin, validate(updateQuoteSchema), updateQuote);
router.post('/:id/quotes/:quoteId/accept', authenticate, acceptQuote);
router.get('/:id', authenticate, getRequestById);

module.exports = router;
--- END OF FILE vite-app/api/routes/requestRoutes.js ---

--- START OF FILE vite-app/api/routes/triageRoutes.js ---

// vite-app/api/routes/triageRoutes.js

const express = require('express');
const router = express.Router();
const controller = require('../controllers/triageController');
console.log('triageController export:', controller);
const { triageRequest } = controller;
const { authenticate, isAdmin } = require('../middleware/authMiddleware');

// @route   POST /api/triage/:requestId
// @desc    Perform AI-powered triage on a request
// @access  Admin
router.post('/:requestId', authenticate, isAdmin, triageRequest);

module.exports = router;

--- END OF FILE vite-app/api/routes/triageRoutes.js ---

--- START OF FILE vite-app/api/routes/userRoutes.js ---

// vite-app/api/routes/userRoutes.js

const express = require('express');
const { updateUserProfile, createUserProfile, getUserProfile } = require('../controllers/userController');
const { authenticate } = require('../middleware/authMiddleware');
// We don't need a specific Zod schema here because the `update` is flexible,
// but for production, you would add one to validate the incoming fields.

const router = express.Router();

// Get the profile for the authenticated user
router.get('/profile', authenticate, getUserProfile);

// Create a new profile for the authenticated user
router.post('/profile', authenticate, createUserProfile);

// Update an existing profile for the authenticated user
router.put('/profile', authenticate, updateUserProfile);

module.exports = router;
--- END OF FILE vite-app/api/routes/userRoutes.js ---

--- START OF FILE vite-app/api/server.js ---

// server.js (v2.4 - Final version for Netlify)
const express = require('express');
const cors = require('cors');
const path = require('path');
const requestRoutes = require('./routes/requestRoutes');
const userRoutes = require('./routes/userRoutes');
// const followUpRoutes = require('./routes/followUpRoutes');
const triageRoutes = require('./routes/triageRoutes');

// --- Basic Setup ---
const app = express();
// Load .env file from the 'project root' directory
require('dotenv').config({ path: path.resolve(__dirname, '../../.env') });
const PORT = process.env.BACKEND_PORT || 3000;

// --- Core Middleware ---

// 1. CORS Middleware
const corsOptions = {
  // Use Netlify's URL in production, or your local .env variable for development
  origin: process.env.VITE_FRONTEND_BASE_URL,
};
app.use(cors(corsOptions));

// 2. Body Parser for JSON payloads
app.use(express.json());

// --- API Routing ---
app.use('/api/requests', requestRoutes);
// app.use('/api/follow-up', followUpRoutes);
app.use('/api/triage', triageRoutes);
app.use('/api', userRoutes);

// A simple health check route to ensure the server is up
app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', message: 'API is healthy' });
});

// --- Centralized Error Handler ---
app.use((err, req, res, next) => {
  console.error('[GLOBAL ERROR HANDLER]', err);
  res.status(500).json({
    error: 'An unexpected error occurred on the server.',
    details: process.env.NODE_ENV === 'development' ? err.message : undefined,
  });
});

// --- Server Start & Export ---

// Export the app for serverless environments
module.exports = app;

// Start the server only if the file is run directly (for local development)
if (require.main === module) {
  app.listen(PORT, () => {
    console.log(`API server running on ${process.env.VITE_BACKEND_BASE_URL || `http://localhost:${process.env.BACKEND_PORT}`}`);
  });
}
--- END OF FILE vite-app/api/server.js ---

--- START OF FILE vite-app/api/services/emailService.js ---

// vite-app/api/services/emailService.js

const { Resend } = require('resend');

// IMPORTANT: This assumes RESEND_API_KEY, BASE_URL, RESEND_ENABLED, and RESEND_FROM_EMAIL are loaded into your environment variables.
// You may need to install and configure dotenv if you haven't already.
const resend = new Resend(process.env.RESEND_API_KEY);
const BASE_URL = process.env.VITE_BACKEND_BASE_URL || 'http://process.env.BACKEND_BASE_URL'; // Fallback for development
const RESEND_ENABLED = process.env.RESEND_ENABLED === 'true'; // Convert to boolean
const RESEND_FROM_EMAIL = process.env.RESEND_FROM_EMAIL || 'Plumbing Co <onboarding@resend.dev>'; // Configurable from address

/**
 * A generic email sending function.
 * NOTE: You must configure a verified domain with Resend to send emails to arbitrary recipients.
 * For testing with an unverified domain, the 'to' address must be your verified Resend account email.
 */
const sendEmail = async ({ to, subject, html }) => {
  if (!RESEND_ENABLED) {
    console.log('Resend is disabled. Email not sent.');
    return { data: { message: 'Resend disabled' } };
  }

  try {
    console.log(`Attempting to send email to: ${to}`);
    const { data, error } = await resend.emails.send({
      from: RESEND_FROM_EMAIL, // Use configurable from address
      to,
      subject,
      html,
    });

    if (error) {
      console.error('Resend Error:', error);
      return { error };
    }

    console.log('Email sent successfully:', data);
    return { data };
  } catch (error) {
    console.error('Failed to send email:', error);
    return { error };
  }
};

const getRecipientEmail = (request) => {
  // In a real app, you would have more robust logic to get the customer's email.
  // This is a simplified example.
  return request?.user_profiles?.email;
}

const getRequestUrl = (requestId) => {
  return `${BASE_URL}/requests/${requestId}`; // Assuming frontend route is /requests/:id
}

const sendRequestSubmittedEmail = (request) => {
  const recipientEmail = getRecipientEmail(request);
  if (!recipientEmail) return;

  const requestUrl = getRequestUrl(request.id);
  const subject = `Your request has been received!`;
  const html = `<h1>Thank you for your request!</h1><p>We have received your request for "${request.problem_category.replace(/_/g, ' ')}" and will be in touch shortly.</p><p>Request ID: ${request.id}</p><p><a href="${requestUrl}">View your request here</a></p>`;
  
  return sendEmail({ to: recipientEmail, subject, html });
};

const sendStatusUpdateEmail = (request) => {
  const recipientEmail = getRecipientEmail(request);
  if (!recipientEmail) return;

  const requestUrl = getRequestUrl(request.id);
  const subject = `Update on your request`;
  const html = `<p>The status of your request has been updated to: <strong>${request.status}</strong>.</p><p>Request ID: ${request.id}</p><p><a href="${requestUrl}">View your request here</a></p>`;

  return sendEmail({ to: recipientEmail, subject, html });
};

const sendQuoteAddedEmail = (request, quote) => {
    const recipientEmail = getRecipientEmail(request);
    if (!recipientEmail) return;

    const requestUrl = getRequestUrl(request.id);
    const subject = `You have a new quote for your request`;
    const html = `<p>A new quote for <strong>${quote.quote_amount.toFixed(2)}</strong> has been added to your request. Please log in to your portal to view the details.</p><p>Request ID: ${request.id}</p><p><a href="${requestUrl}">View your request here</a></p>`;

    return sendEmail({ to: recipientEmail, subject, html });
};

const sendFollowUpEmail = (request) => {
  const recipientEmail = getRecipientEmail(request);
  if (!recipientEmail) return;

  const requestUrl = getRequestUrl(request.id);
  const subject = `Following up on your quote for ${request.problem_category.replace(/_/g, ' ')}`;
  const html = `<p>Hi ${request.user_profiles?.name || 'there'},</p><p>Just wanted to follow up on the quote we sent you for your recent request. Please let us know if you have any questions or if you'd like to move forward.</p><p>Request ID: ${request.id}</p><p><a href="${requestUrl}">View your request here</a></p>`;

  return sendEmail({ to: recipientEmail, subject, html });
};


module.exports = {
  sendRequestSubmittedEmail,
  sendStatusUpdateEmail,
  sendQuoteAddedEmail,
  sendFollowUpEmail,
};

--- END OF FILE vite-app/api/services/emailService.js ---

--- START OF FILE vite-app/api/validation/schemas.js ---

// vite-app/api/validation/schemas.js

const { z } = require('zod');

// Schema for the initial request from the AI agent for follow-up questions
const gptRequestSchema = z.object({
  body: z.object({
    clarifyingAnswers: z.array(z.object({ question: z.string(), answer: z.string() })),
    category: z.string(),
    problem_description: z.string().optional(),
  }),
});

// Schema for the final submission of the entire quote request form
const submitQuoteSchema = z.object({
  body: z.object({
    clarifyingAnswers: z.array(z.object({ question: z.string(), answer: z.string() })),
    contactInfo: z.object({
      name: z.string().optional(),
      address: z.string().optional(),
      city: z.string().optional(),
      province: z.string().optional(),
      postal_code: z.string().optional(),
      email: z.string().email().optional(),
      phone: z.string().optional(),
    }),
    category: z.string(),
    isEmergency: z.boolean().optional(),
    property_type: z.string().optional(),
    is_homeowner: z.string().optional(),
    problem_description: z.string().optional(),
    preferred_timing: z.string().optional(),
    additional_notes: z.string().optional(),
  }),
});

// Schema for adding a new note to a request
const addNoteSchema = z.object({
  params: z.object({ 
    id: z.string().uuid("Invalid request ID format.") 
  }),
  body: z.object({ 
    note: z.string().min(1, "Note cannot be empty.") 
  }),
});

// Schema for an admin creating a quote for a request
const createQuoteSchema = z.object({
  params: z.object({ 
    id: z.string().uuid("Invalid request ID format.") 
  }),
  body: z.object({
    quote_amount: z.number().positive("Quote amount must be a positive number."),
    details: z.string().min(1, "Quote details cannot be empty."),
  }),
});

// --- NEW SCHEMA FOR UPDATING A QUOTE ---
const updateQuoteSchema = z.object({
  params: z.object({
    id: z.string().uuid("Invalid request ID format."),
    quoteId: z.string().uuid("Invalid quote ID format."),
  }),
  body: z.object({
    quote_amount: z.number().positive("Quote amount must be a positive number."),
    details: z.string().min(1, "Quote details cannot be empty."),
  }),
});

// Schema for getting an object from storage
const getObjectSchema = z.object({
    params: z.object({
        0: z.string().min(1, "Object path cannot be empty."),
    })
});

const updateStatusSchema = z.object({
  params: z.object({
    id: z.string().uuid("Invalid request ID format."),
  }),
  body: z.object({
    status: z.string().min(1, "Status cannot be empty."),
    scheduled_start_date: z.string().datetime({ offset: true }).optional(),
  }),
});

module.exports = {
  gptRequestSchema,
  submitQuoteSchema,
  addNoteSchema,
  createQuoteSchema,
  updateQuoteSchema,
  getObjectSchema,
  updateStatusSchema,
};
--- END OF FILE vite-app/api/validation/schemas.js ---

--- START OF FILE vite-app/index.html ---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PlumbingPOC Vite App</title>
  <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body>
    <div id="root"></div>
  <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

--- END OF FILE vite-app/index.html ---

--- START OF FILE vite-app/package-lock.json ---

{
  "name": "vite-app",
  "version": "0.1.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {}
}

--- END OF FILE vite-app/package-lock.json ---

--- START OF FILE vite-app/src/features/auth/AuthContext.tsx ---

import React, { createContext, useContext, useEffect, useState } from 'react';
import { supabase } from '../../lib/supabaseClient';
import { Session, User } from '@supabase/supabase-js';

// Define a more specific type for your profile data
export interface UserProfile {
  user_id: string;
  name: string;
  email?: string;
  phone?: string;
  address?: string;
  city?: string;
  province?: string;
  postal_code?: string;
  role?: string;
}

interface AuthContextType {
  user: User | null;
  profile: UserProfile | null;
  loading: boolean;
  profileIncomplete: boolean;
  refreshProfile: () => void;
  signOut: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);
  const [profileIncomplete, setProfileIncomplete] = useState(false);

  useEffect(() => {
    const getInitialSession = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      setUser(session?.user ?? null);
      setLoading(false);
    };

    getInitialSession();

    const { data: authListener } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user ?? null);
    });

    return () => {
      authListener.subscription.unsubscribe();
    };
  }, []);

  const fetchProfile = async (currentUser: User | null) => {
    if (currentUser) {
      const { data, error } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('user_id', currentUser.id)
        .single();
      
      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found
        console.error('Error fetching profile:', error);
      }

      setProfile(data);
      // A profile is incomplete if it doesn't exist, or if the required 'name' field is missing.
      setProfileIncomplete(!data || !data.name);
    } else {
      setProfile(null);
      setProfileIncomplete(false);
    }
  };

  useEffect(() => {
    fetchProfile(user);
  }, [user]);

  const signOut = async () => {
    await supabase.auth.signOut();
    setUser(null);
    setProfile(null);
  };

  const refreshProfile = () => fetchProfile(user);

  return (
    <AuthContext.Provider value={{ user, profile, loading, profileIncomplete, refreshProfile, signOut }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
--- END OF FILE vite-app/src/features/auth/AuthContext.tsx ---

--- START OF FILE vite-app/src/features/auth/components/AuthModal.tsx ---

import React from 'react';
import { supabase } from '../../../lib/supabaseClient';

interface AuthModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const AuthModal: React.FC<AuthModalProps> = ({ isOpen, onClose }) => {
  const [isSignUp, setIsSignUp] = React.useState(false);
  const [name, setName] = React.useState('');
  const [message, setMessage] = React.useState<string | null>(null);
  const [loading, setLoading] = React.useState(false);
  if (!isOpen) return null;
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
      <div className="bg-white rounded-xl shadow-2xl max-w-md w-full p-8 relative">
        <button className="absolute top-4 right-4 text-gray-500 hover:text-gray-700" onClick={onClose}>
          &times;
        </button>
        <h2 className="text-2xl font-bold mb-4 text-blue-700">{isSignUp ? 'Sign Up' : 'Sign In'}</h2>
        <button
          className="bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold w-full mb-4"
          onClick={async () => {
            await supabase.auth.signInWithOAuth({ provider: 'google' });
          }}
        >
          Continue with Google
        </button>
        <button
          className="bg-gray-900 text-white px-6 py-3 rounded-lg font-semibold w-full mb-4"
          onClick={async () => {
            await supabase.auth.signInWithOAuth({ provider: 'azure' });
          }}
        >
          Continue with Microsoft
        </button>
        <form
          onSubmit={async e => {
            e.preventDefault();
            setLoading(true);
            setMessage(null);
            const email = (e.target as any).email.value;
            const password = (e.target as any).password.value;
            try {
              if (isSignUp) {
                const { data, error } = await supabase.auth.signUp({ email, password });
                if (error) {
                  setMessage(error.message || 'Sign up failed.');
                } else if (data.user) {
                  await supabase.from('user_profiles').insert({ user_id: data.user.id, name });
                  setMessage('Sign up successful! Please check your email and click the confirmation link before signing in.');
                }
              } else {
                const { error } = await supabase.auth.signInWithPassword({ email, password });
                if (error) {
                  setMessage(error.message || 'Sign in failed.');
                } else {
                  setMessage('Sign in successful!');
                  setTimeout(() => {
                    setMessage(null);
                    onClose();
                  }, 1200);
                }
              }
            } catch (err: any) {
              setMessage(err.message || 'An error occurred.');
            } finally {
              setLoading(false);
            }
          }}
        >
          {isSignUp && (
            <input
              name="name"
              type="text"
              placeholder="Full Name"
              className="border px-4 py-2 rounded w-full mb-2"
              value={name}
              onChange={e => setName(e.target.value)}
              required
            />
          )}
          <input name="email" type="email" placeholder="Email" className="border px-4 py-2 rounded w-full mb-2" required />
          <input name="password" type="password" placeholder="Password" className="border px-4 py-2 rounded w-full mb-4" required />
          <button type="submit" className="bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold w-full" disabled={loading}>
            {loading ? (isSignUp ? 'Signing Up...' : 'Signing In...') : (isSignUp ? 'Sign Up with Email' : 'Sign In with Email')}
          </button>
        {message && (
          <div className="mt-2 text-center text-sm text-red-600">{message}</div>
        )}
        </form>
        <div className="mt-4 text-center">
          {isSignUp ? (
            <span className="text-sm">Already have an account?{' '}
              <button className="text-blue-600 underline" onClick={() => setIsSignUp(false)}>Sign In</button>
            </span>
          ) : (
            <span className="text-sm">Don't have an account?{' '}
              <button className="text-blue-600 underline" onClick={() => setIsSignUp(true)}>Sign Up</button>
            </span>
          )}
        </div>
      </div>
    </div>
  );
};

export default AuthModal;

--- END OF FILE vite-app/src/features/auth/components/AuthModal.tsx ---

--- START OF FILE vite-app/src/features/auth/components/UserMenu.tsx ---

import React, { useState } from 'react';
import { User, LogOut, Settings, ChevronDown, LayoutDashboard } from 'lucide-react';
import { useAuth } from '../AuthContext';

interface UserMenuProps {
  onOpenProfile: () => void;
}

const UserMenu: React.FC<UserMenuProps> = ({ onOpenProfile }) => {
  const [isOpen, setIsOpen] = useState(false);
  const { user, profile, signOut } = useAuth();

  if (!user) return null;

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-2 px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg hover:bg-gray-700 transition-colors"
      >
        <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-blue-700 rounded-full flex items-center justify-center">
          <User className="w-4 h-4 text-white" />
        </div>
        <div className="text-left hidden sm:block">
          <span className="text-sm font-medium text-white">Dashboard</span>
        </div>
        <ChevronDown className="w-4 h-4 text-gray-400" />
      </button>
      {isOpen && (
        <>
          <div className="fixed inset-0 z-10" onClick={() => setIsOpen(false)} />
          <div className="absolute right-0 mt-2 w-56 bg-gray-800 border border-gray-600 rounded-lg shadow-lg z-20">
            <div className="p-3 border-b border-gray-600">
              <div className="text-sm font-medium text-white">
                {profile?.name || 'User'}
              </div>
              <div className="text-xs text-gray-400">
                {user.email}
              </div>
            </div>
            <div className="py-1">
              {profile && profile.role === 'admin' && (
                <a
                  href="/#/dashboard"
                  onClick={() => setIsOpen(false)}
                  className="flex items-center gap-2 w-full px-3 py-2 text-sm text-gray-300 hover:bg-gray-700 hover:text-white transition-colors"
                >
                  <LayoutDashboard className="w-4 h-4" />
                  Command Center
                </a>
              )}
              <button
                onClick={() => {
                  onOpenProfile();
                  setIsOpen(false);
                }}
                className="flex items-center gap-2 w-full px-3 py-2 text-sm text-gray-300 hover:bg-gray-700 hover:text-white transition-colors"
              >
                <Settings className="w-4 h-4" />
                Profile Settings
              </button>
              <button
                onClick={signOut}
                className="flex items-center gap-2 w-full px-3 py-2 text-sm text-red-400 hover:bg-gray-700 hover:text-red-300 transition-colors"
              >
                <LogOut className="w-4 h-4" />
                Sign Out
              </button>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default UserMenu;
--- END OF FILE vite-app/src/features/auth/components/UserMenu.tsx ---

--- START OF FILE vite-app/src/features/landing/components/AboutSection.tsx ---

import React from 'react';
import { Shield, Clock, CheckCircle, Star } from 'lucide-react';

const AboutSection: React.FC = () => (
  <section id="about" className="py-20 bg-white">
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 grid lg:grid-cols-2 gap-12 items-center">
      <div className="hidden lg:block">
        <img src="/plumber.jpg" alt="Plumbing team" className="rounded-lg shadow-lg w-full h-64 object-cover" />
      </div>
      <div>
        <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-6">About AquaFlow Plumbing</h2>
        <p className="text-lg text-gray-600 mb-6">With over 15 years of experience serving our community, AquaFlow Plumbing has built a reputation for reliable, professional service and competitive pricing.</p>
        <p className="text-lg text-gray-600 mb-8">Our team of licensed professionals is committed to providing the highest quality workmanship and customer service. We use the latest tools and techniques to ensure your plumbing systems work perfectly.</p>
        <div className="grid sm:grid-cols-2 gap-6">
          <div className="flex items-center space-x-3">
            <Shield className="w-6 h-6 text-blue-600 bg-blue-100 p-2 rounded-full" />
            <div>
              <div className="font-semibold text-gray-900">Licensed & Insured</div>
              <div className="text-gray-600">Full coverage protection</div>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            <Clock className="w-6 h-6 text-blue-600 bg-blue-100 p-2 rounded-full" />
            <div>
              <div className="font-semibold text-gray-900">24/7 Emergency</div>
              <div className="text-gray-600">Always available</div>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            <CheckCircle className="w-6 h-6 text-blue-600 bg-blue-100 p-2 rounded-full" />
            <div>
              <div className="font-semibold text-gray-900">Quality Guarantee</div>
              <div className="text-gray-600">100% satisfaction</div>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            <Star className="w-6 h-6 text-blue-600 bg-blue-100 p-2 rounded-full" />
            <div>
              <div className="font-semibold text-gray-900">5-Star Rated</div>
              <div className="text-gray-600">Proven customer satisfaction</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
);

export default AboutSection;
--- END OF FILE vite-app/src/features/landing/components/AboutSection.tsx ---

--- START OF FILE vite-app/src/features/landing/components/ContactSection.tsx ---

import React from 'react';
import { Phone, MapPin, Mail, Clock } from 'lucide-react';

const ContactSection: React.FC = () => (
  <section id="contact" className="py-20 bg-gray-900 text-white">
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 grid lg:grid-cols-3 gap-12">
      <div className="lg:col-span-2">
        <h2 className="text-3xl md:text-4xl font-bold mb-6">Get In Touch</h2>
        <p className="text-xl text-gray-300 mb-8">Ready to solve your plumbing problems? Contact us today for fast, professional service.</p>
        <div className="grid md:grid-cols-2 gap-6">
          <div className="flex items-center space-x-4">
            <div className="bg-blue-600 p-3 rounded-full">
              <Phone className="w-6 h-6" />
            </div>
            <div>
              <div className="font-bold">Call or Text</div>
              <div className="text-gray-300">(555) 123-4567</div>
            </div>
          </div>
          <div className="flex items-center space-x-4">
            <div className="bg-blue-600 p-3 rounded-full">
              <MapPin className="w-6 h-6" />
            </div>
            <div>
              <div className="font-bold">Service Area</div>
              <div className="text-gray-300">Greater Metro Area</div>
            </div>
          </div>
          <div className="flex items-center space-x-4">
            <div className="bg-blue-600 p-3 rounded-full">
              <Mail className="w-6 h-6" />
            </div>
            <div>
              <div className="font-bold">Email Us</div>
              <div className="text-gray-300">info@aquaflowplumbing.com</div>
            </div>
          </div>
          <div className="flex items-center space-x-4">
            <div className="bg-blue-600 p-3 rounded-full">
              <Clock className="w-6 h-6" />
            </div>
            <div>
              <div className="font-bold">Business Hours</div>
              <div className="text-gray-300">24/7 Emergency Service</div>
            </div>
          </div>
        </div>
      </div>
      <div className="bg-gray-800 p-6 rounded-xl">
        <h3 className="text-xl font-semibold mb-4">Emergency Service</h3>
        <p className="text-gray-300 mb-6">Plumbing emergencies don't wait for business hours. We're available 24/7 for urgent repairs.</p>
        <a 
          href="tel:555-123-4567" 
          className="bg-red-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-red-700 transition-colors inline-flex items-center space-x-2 w-full justify-center"
        >
          <Phone className="w-5 h-5" />
          <span>Emergency Line</span>
        </a>
      </div>
    </div>
  </section>
);

export default ContactSection;

--- END OF FILE vite-app/src/features/landing/components/ContactSection.tsx ---

--- START OF FILE vite-app/src/features/landing/components/ReviewsSection.tsx ---

import React from 'react';
import { Star } from 'lucide-react';

const testimonials = [
  { name: "Jane D.", rating: 5, text: "Fast, friendly, and fixed my leak in no time!" },
  { name: "Mike R.", rating: 5, text: "Professional team, great price, highly recommend." },
  { name: "Sara L.", rating: 5, text: "Emergency call at 2am, they showed up and saved my basement!" }
];

const ReviewsSection: React.FC = () => (
  <section id="testimonials" className="py-20 bg-gray-50">
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div className="text-center mb-16">
        <h2 className="text-4xl font-bold text-gray-900 mb-4">What Our Customers Say</h2>
        <p className="text-xl text-gray-600">Don't just take our word for it - see what our satisfied customers have to say.</p>
      </div>
      <div className="grid md:grid-cols-3 gap-8">
        {testimonials.map((testimonial, index) => (
          <div key={index} className="bg-white p-8 rounded-2xl shadow hover:shadow-lg transition-shadow duration-300">
            <div className="flex items-center mb-4">
              {[...Array(testimonial.rating)].map((_, i) => (
                <Star key={i} className="w-6 h-6 text-yellow-400 fill-current" />
              ))}
            </div>
            <p className="text-gray-700 mb-4 italic">"{testimonial.text}"</p>
            <div className="font-bold text-gray-900">{testimonial.name}</div>
          </div>
        ))}
      </div>
    </div>
  </section>
);

export default ReviewsSection;

--- END OF FILE vite-app/src/features/landing/components/ReviewsSection.tsx ---

--- START OF FILE vite-app/src/features/landing/components/ServicesSection.tsx ---

import React from 'react';
import { CheckCircle, Droplets, Wrench, Wind, Thermometer, ShowerHead, Settings } from 'lucide-react';
import { services } from '../../../lib/servicesData';

// Create a mapping from the string name to the actual icon component
const iconComponents: { [key: string]: React.ReactElement } = {
  Droplets: <Droplets className="w-8 h-8 text-blue-600" />,
  Wrench: <Wrench className="w-8 h-8 text-blue-600" />,
  Wind: <Wind className="w-8 h-8 text-blue-600" />,
  Thermometer: <Thermometer className="w-8 h-8 text-blue-600" />,
  ShowerHead: <ShowerHead className="w-8 h-8 text-blue-600" />,
  Settings: <Settings className="w-8 h-8 text-blue-600" />,
};

const ServicesSection: React.FC = () => (
  <section id="services" className="py-20 bg-gray-50">
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div className="text-center mb-16">
        <h2 className="text-4xl font-bold text-gray-900 mb-4">Our Professional Plumbing Services</h2>
        <p className="text-xl text-gray-600 max-w-3xl mx-auto">From emergency repairs to complete installations, we provide comprehensive plumbing solutions for homes and businesses.</p>
      </div>
      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        {services.map((service) => (
          <div key={service.key} className="bg-white p-8 rounded-2xl shadow hover:shadow-lg transition-shadow duration-300 flex flex-col">
            {/* The component now looks up the correct icon based on the string from the data file */}
            <div className="mb-4">{iconComponents[service.icon]}</div>
            <h3 className="text-xl font-bold text-gray-900 mb-2">{service.title}</h3>
            <p className="text-gray-600 mb-4 flex-grow">{service.description}</p>
            <ul className="space-y-2 mt-auto">
              {service.features.map((feature, featureIndex) => (
                <li key={featureIndex} className="flex items-center text-base text-gray-700">
                  <CheckCircle className="w-5 h-5 text-green-500 mr-2 flex-shrink-0" />
                  <span>{feature}</span>
                </li>
              ))}
            </ul>
          </div>
        ))}
      </div>
    </div>
  </section>
);

export default ServicesSection;
--- END OF FILE vite-app/src/features/landing/components/ServicesSection.tsx ---

--- START OF FILE vite-app/src/features/profile/components/ProfileModal.tsx ---

// vite-app/src/components/ProfileModal.tsx

import React, { useState, useEffect } from 'react';
import apiClient from '../../../lib/apiClient';
import { useAuth } from '../../auth/AuthContext';
import { Box, Typography, Paper, TextField, Button, Select, MenuItem, InputLabel, FormControl, CircularProgress, IconButton } from '@mui/material';
import { X as XIcon } from 'lucide-react';

interface ProfileModalProps {
  isClosable?: boolean;
  onClose?: () => void;
  onComplete?: () => void; // <-- ADD THIS NEW PROP
}

const provinces = [
  'AB', 'BC', 'MB', 'NB', 'NL', 'NS', 'ON', 'PE', 'QC', 'SK', 'NT', 'NU', 'YT'
];

const ProfileModal: React.FC<ProfileModalProps> = ({ isClosable = false, onClose, onComplete }) => {
  const showDebugPanel = (import.meta.env.VITE_DEBUG_PANEL === 'true');

  const DebugOverlay = () => (
    <div style={{
      background: '#222',
      color: '#fff',
      padding: '10px 14px',
      borderRadius: '8px',
      fontSize: '12px',
      fontFamily: 'monospace',
      boxShadow: '0 2px 12px rgba(0,0,0,0.18)',
      opacity: 0.97,
      maxWidth: 420,
      margin: '18px auto 0 auto',
      display: 'block'
    }}>
      <div style={{ fontWeight: 600, marginBottom: 4, fontSize: '13px' }}>ProfileModal Debug</div>
      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '4px 16px' }}>
        <div>User ID:</div><div>{user?.id || 'none'}</div>
        <div>Email:</div><div>{email}</div>
        <div>Loading:</div><div>{String(loading)}</div>
        <div>SaveError:</div><div>{saveError || 'none'}</div>
        <div>SaveSuccess:</div><div>{String(saveSuccess)}</div>
        <div>PhoneError:</div><div>{phoneError || 'none'}</div>
      </div>
    </div>
  );
  
  const { user, profile: contextProfile } = useAuth();
  const [email, setEmail] = useState(user?.email || '');
  const [name, setName] = useState(contextProfile?.name || '');
  const [phone, setPhone] = useState(contextProfile?.phone || '');
  const [province, setProvince] = useState(contextProfile?.province || '');
  const [city, setCity] = useState(contextProfile?.city || '');
  const [address, setAddress] = useState(contextProfile?.address || '');
  const [postalCode, setPostalCode] = useState(contextProfile?.postal_code || '');
  const [phoneError, setPhoneError] = useState('');
  const [loading, setLoading] = useState(false);
  const [saveError, setSaveError] = useState('');
  const [saveSuccess, setSaveSuccess] = useState(false);

  useEffect(() => {
    if (contextProfile) {
      setName(contextProfile.name || '');
      setPhone(contextProfile.phone || '');
      setProvince(contextProfile.province || '');
      setCity(contextProfile.city || '');
      setAddress(contextProfile.address || '');
      setPostalCode(contextProfile.postal_code || '');
    }
    if (user?.email) {
      setEmail(user.email);
    }
  }, [contextProfile, user]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setPhoneError('');
    setSaveError('');
    setSaveSuccess(false);

    if (!/^\d{3}-\d{3}-\d{4}$/.test(phone)) {
      setPhoneError('Enter a valid phone number in the format 250-885-7003');
      setLoading(false);
      return;
    }

    const postalCodePattern = /^[A-Za-z]\d[A-Za-z][ -]?\d[A-Za-z]\d$/;
    if (!postalCodePattern.test(postalCode)) {
      setSaveError('Enter a valid Canadian postal code (e.g., V8N 2L4 or V8N-2L4)');
      setLoading(false);
      return;
    }
    
    const formattedPostalCode = postalCode.toUpperCase().replace(/\s/g, '').replace(/([A-Z0-9]{3})([A-Z0-9]{3})/, '$1-$2');

    const profilePayload = { 
      name, 
      email, // Add email to payload for backend insertion
      phone, 
      province, 
      city, 
      address, 
      postal_code: formattedPostalCode 
    };

    try {
      let profileExists = !!contextProfile;

      if (profileExists) {
        await apiClient.put('/profile', profilePayload);
      } else {
        await apiClient.post('/profile', profilePayload);
      }

      setSaveSuccess(true);
      setTimeout(() => {
        setSaveSuccess(false);
        // <-- THE FIX: Call onComplete if it exists, otherwise call onClose
        if (onComplete) {
          onComplete();
        } else if (onClose) {
          onClose();
        }
      }, 1200);

    } catch (err: any) {
      setSaveError(err.response?.data?.error || 'Failed to save profile. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.6)', zIndex: 1200, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
        <Paper elevation={24} sx={{ width: '95%', maxWidth: '600px', p: 0, position: 'relative', display: 'flex', flexDirection: 'column', bgcolor: '#f4f6f8', maxHeight: '90vh', overflow: 'hidden', borderRadius: 2 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', bgcolor: 'primary.main', color: '#fff', px: 3, py: 2 }}>
            <Typography variant="h5" sx={{ fontWeight: 700 }}>
              {contextProfile?.name ? 'Update Your Profile' : 'Complete Your Profile'}
            </Typography>
            {isClosable && (
              <IconButton onClick={onClose} sx={{ color: '#fff' }}><XIcon size={24} /></IconButton>
            )}
          </Box>
          <form onSubmit={handleSubmit}>
            <Box sx={{ flexGrow: 1, overflowY: 'auto', p: 3 }}>
              {/* Form fields remain the same */}
              <Box sx={{ width: '100%', mb: 2 }}>
                <TextField label="Email" value={email} fullWidth disabled InputProps={{ sx: { height: 56, fontSize: '1rem' } }} />
              </Box>
              <Box sx={{ width: '100%', mb: 2 }}>
                <TextField label="Name" value={name} onChange={e => setName(e.target.value)} fullWidth required InputProps={{ sx: { height: 56 } }} />
              </Box>
              <Box sx={{ width: '100%', mb: 2 }}>
                <TextField label="Phone Number" value={phone} onChange={e => setPhone(e.target.value)} fullWidth required error={!!phoneError} helperText={phoneError} InputProps={{ sx: { height: 56 } }} />
              </Box>
              <Box sx={{ width: '100%', mb: 2 }}>
                <FormControl fullWidth required sx={{ height: 56 }}>
                  <InputLabel id="province-select-label">Province</InputLabel>
                  <Select labelId="province-select-label" value={province} label="Province" onChange={e => setProvince(e.target.value as string)} sx={{ height: 56 }}>
                    <MenuItem value=""><em>Select Province</em></MenuItem>
                    {provinces.map(p => (<MenuItem key={p} value={p}>{p}</MenuItem>))}
                  </Select>
                </FormControl>
              </Box>
              <Box sx={{ width: '100%', mb: 2 }}>
                <TextField label="City" value={city} onChange={e => setCity(e.target.value)} fullWidth required InputProps={{ sx: { height: 56 } }} />
              </Box>
              <Box sx={{ width: '100%', mb: 2 }}>
                <TextField label="Address" value={address} onChange={e => setAddress(e.target.value)} fullWidth required InputProps={{ sx: { height: 56 } }} />
              </Box>
              <Box sx={{ width: '100%', mb: 2 }}>
                <TextField label="Postal Code" value={postalCode} onChange={e => setPostalCode(e.target.value)} fullWidth required InputProps={{ sx: { height: 56 } }} />
              </Box>
            </Box>
            <Box sx={{ p: 3, pt: 2, borderTop: 1, borderColor: 'divider' }}>
              {saveError && (<Typography color="error" sx={{ mb: 2, textAlign: 'center' }}>{saveError}</Typography>)}
              {saveSuccess && (<Typography color="primary" sx={{ mb: 2, textAlign: 'center' }}>Profile saved!</Typography>)}
              <Button type="submit" variant="contained" color="primary" fullWidth disabled={loading || saveSuccess} sx={{ py: 1.5, fontSize: '1rem' }}>
                {loading ? <CircularProgress size={24} sx={{ color: 'white' }} /> : 'Save Profile'}
              </Button>
              {showDebugPanel && <Box sx={{ mt: 3 }}><DebugOverlay /></Box>}
            </Box>
          </form>
        </Paper>
      </div>
    </>
  );
};
export default ProfileModal;
--- END OF FILE vite-app/src/features/profile/components/ProfileModal.tsx ---

--- START OF FILE vite-app/src/features/requests/components/AITriageSummary.tsx ---

// vite-app/src/components/AITriageSummary.tsx

import React from 'react';
import { Box, Typography, Paper } from '@mui/material';
import { Zap } from 'lucide-react';
import { QuoteRequest } from './Dashboard'; // Assuming interfaces are in Dashboard.tsx

interface AITriageSummaryProps {
  request: QuoteRequest;
}

const AITriageSummary: React.FC<AITriageSummaryProps> = ({ request }) => {
  // This component only renders if the triage summary exists.
  if (!request.triage_summary) {
    return null;
  }

  return (
    <Paper variant="outlined">
      <Box sx={{ p: 2, borderLeft: 4, borderColor: 'secondary.main', bgcolor: '#f3e5f5' }}>
        <Typography variant="overline" color="text.secondary" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Zap size={16} /> AI Triage Summary
        </Typography>
        <Typography variant="body1" sx={{ mt: 1 }}>
          {request.triage_summary}
        </Typography>
        <Typography variant="body2" sx={{ mt: 1, fontWeight: 'bold' }}>
          Priority Score: {request.priority_score}/10
        </Typography>
        {request.priority_explanation && (
          <Typography variant="body2" sx={{ mt: 0.5, fontStyle: 'italic' }}>
            Explanation: {request.priority_explanation}
          </Typography>
        )}
        {request.profitability_score != null && (
          <Typography variant="body2" sx={{ mt: 0.5, fontWeight: 'bold' }}>
            Profitability Score: {request.profitability_score}/10
          </Typography>
        )}
        {request.profitability_explanation && (
          <Typography variant="body2" sx={{ mt: 0.5, fontStyle: 'italic' }}>
            Explanation: {request.profitability_explanation}
          </Typography>
        )}
      </Box>
    </Paper>
  );
};

export default AITriageSummary;
--- END OF FILE vite-app/src/features/requests/components/AITriageSummary.tsx ---

--- START OF FILE vite-app/src/features/requests/components/AttachmentSection.tsx ---

// vite-app/src/features/requests/components/AttachmentSection.tsx

import React, { useState, useEffect, useMemo } from 'react';
import { supabase } from '../../../lib/supabaseClient';
import apiClient from '../../../lib/apiClient';
import { Box, Typography, Paper, Button, CircularProgress, Alert, IconButton, Divider } from '@mui/material';
import { FileText as FileTextIcon, Paperclip, X as XIcon } from 'lucide-react';
import { QuoteAttachment } from '../types';

interface AttachmentSectionProps {
  requestId: string;
  attachments: QuoteAttachment[];
  pendingFiles?: File[];
  editable: boolean;
  onUpdate: () => void;
  onNewFiles?: (files: File[]) => void;
  onRemovePendingFile?: (index: number) => void;
  quoteId?: string | null;
}

const AttachmentGroup: React.FC<{ title: string; attachments: (QuoteAttachment | File)[]; imageUrls: { [key: string]: string }; onRemove?: (index: number) => void; editable?: boolean }> = ({ title, attachments, imageUrls, onRemove, editable }) => {
  if (attachments.length === 0) return null;
  
  return (
    <Box sx={{ mb: 2 }}>
      <Typography variant="subtitle2" color="text.secondary" sx={{ fontWeight: 'bold' }}>{title}</Typography>
      <Divider sx={{ mb: 1.5 }} />
      <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
        {attachments.map((att, index) => {
          const isFile = att instanceof File;
          const key = isFile ? `pending-${index}` : att.id;
          const name = isFile ? att.name : att.file_name;
          const type = isFile ? att.type : att.mime_type;
          const urlKey = isFile ? `pending-${index}` : att.id;
          const url = imageUrls[urlKey];

          return (
            <Box key={key} sx={{ position: 'relative', width: 100, height: 100 }}>
              <a href={url} target="_blank" rel="noopener noreferrer" title={name}>
                {type?.startsWith('image/') && url ? (
                  <img src={url} alt={name} style={{ width: '100px', height: '100px', objectFit: 'cover', borderRadius: '8px' }} />
                ) : (
                  <Box sx={{ width: 100, height: 100, borderRadius: 2, display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', bgcolor: 'grey.200' }}>
                    <FileTextIcon size={24} />
                    <Typography variant="caption" sx={{ mt: 1, textAlign: 'center', wordBreak: 'break-all', p: '0 4px' }}>{name}</Typography>
                  </Box>
                )}
              </a>
              {isFile && editable && onRemove && (
                <IconButton size="small" onClick={() => onRemove(index)} sx={{ position: 'absolute', top: -5, right: -5, bgcolor: 'background.paper', '&:hover': { bgcolor: 'grey.200' } }}>
                  <XIcon size={14} />
                </IconButton>
              )}
            </Box>
          );
        })}
      </Box>
    </Box>
  );
};


const AttachmentSection: React.FC<AttachmentSectionProps> = ({ requestId, attachments, pendingFiles = [], editable, onUpdate, onNewFiles, onRemovePendingFile, quoteId = null }) => {
  const [signedUrls, setSignedUrls] = useState<{ [key: string]: string }>({});
  const [pendingImageUrls, setPendingImageUrls] = useState<{ [key: string]: string }>({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const stableAttachmentKey = useMemo(() => {
    return attachments.map(att => att.id).sort().join(',');
  }, [attachments]);

  // *** THE DEFINITIVE FIX: Create a stable key for the pendingFiles prop as well. ***
  // This uses the file name and size to create a unique, primitive key that is immune
  // to the parent passing a new array instance.
  const stablePendingFileKey = useMemo(() => {
    return pendingFiles.map(f => `${f.name}-${f.size}`).join(',');
  }, [pendingFiles]);

  useEffect(() => {
    if (attachments && attachments.length > 0) {
      setLoading(true);
      const filePaths = attachments.map(att => att.file_url);
      supabase.storage.from('PlumbingPoCBucket').createSignedUrls(filePaths, 3600)
        .then(({ data, error }) => {
          if (error) throw error;
          if (data) {
            const urlMap = attachments.reduce((acc, att, index) => {
              acc[att.id] = data[index].signedUrl;
              return acc;
            }, {} as { [key: string]: string });
            setSignedUrls(urlMap);
          }
        })
        .catch(err => setError("Failed to load attachments."))
        .finally(() => setLoading(false));
    } else {
        setSignedUrls({});
    }
  }, [stableAttachmentKey]);

  useEffect(() => {
    const objectUrls: { [key: string]: string } = {};
    if (pendingFiles.length > 0) {
      pendingFiles.forEach((file, index) => {
        if (file.type.startsWith('image/')) {
          objectUrls[`pending-${index}`] = URL.createObjectURL(file);
        }
      });
      setPendingImageUrls(objectUrls);
    } else {
      setPendingImageUrls({});
    }

    return () => {
      Object.values(objectUrls).forEach(url => URL.revokeObjectURL(url));
    };
  }, [stablePendingFileKey]); // Use the new stable key here.

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files || files.length === 0) return;

    if (onNewFiles) {
      onNewFiles(Array.from(files));
      event.target.value = '';
      return;
    }

    setLoading(true);
    setError(null);
    try {
      const formData = new FormData();
      formData.append('request_id', requestId);
      if (quoteId) {
        formData.append('quote_id', quoteId);
      }
      Array.from(files).forEach(file => {
        formData.append('attachment', file);
      });
      
      await apiClient.post('/requests/attachments', formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });
      onUpdate();
    } catch (err: any) {
      setError(err?.response?.data?.error || err.message || 'Failed to upload files.');
    } finally {
      setLoading(false);
      event.target.value = '';
    }
  };

  const allUrls = { ...signedUrls, ...pendingImageUrls };
  const requestAttachments = attachments.filter(att => !att.quote_id);
  const quotesWithAttachments = attachments
    .filter(att => att.quote_id)
    .reduce((acc, att) => {
      const qId = att.quote_id!;
      if (!acc[qId]) acc[qId] = [];
      acc[qId].push(att);
      return acc;
    }, {} as { [key: string]: QuoteAttachment[] });
  
  return (
    <Paper variant="outlined" sx={{ p: 2 }}>
      <Typography variant="overline" color="text.secondary">Attachments</Typography>
      {loading && <CircularProgress size={24} sx={{ mt: 1 }} />}
      <AttachmentGroup title="Customer Uploads (Request)" attachments={requestAttachments} imageUrls={allUrls} />
      {Object.entries(quotesWithAttachments).map(([qId, quoteAtts]) => (
        <AttachmentGroup key={qId} title={`Attachments for Quote #${qId.substring(0, 4)}`} attachments={quoteAtts} imageUrls={allUrls} />
      ))}
      {pendingFiles.length > 0 && (
        <AttachmentGroup title="New Pending Uploads" attachments={pendingFiles} imageUrls={allUrls} onRemove={onRemovePendingFile} editable={editable} />
      )}
      {attachments.length === 0 && pendingFiles.length === 0 && !loading && (
        <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>No attachments yet.</Typography>
      )}
      {editable && (
        <Box sx={{ mt: 2 }}>
          <Button component="label" startIcon={<Paperclip />} disabled={loading}>
            {loading ? 'Processing...' : 'Add Attachment'}
            <input type="file" hidden multiple onChange={handleFileUpload} />
          </Button>
        </Box>
      )}
      {error && <Alert severity="error" sx={{ mt: 2 }}>{error}</Alert>}
    </Paper>
  );
};

export default AttachmentSection;
--- END OF FILE vite-app/src/features/requests/components/AttachmentSection.tsx ---

--- START OF FILE vite-app/src/features/requests/components/CommunicationLog.tsx ---

// vite-app/src/features/requests/components/CommunicationLog.tsx

import React, { useState, useEffect } from 'react';
import { supabase } from '../../../lib/supabaseClient';
import apiClient from '../../../lib/apiClient';
import { Box, Typography, Paper, TextField, Button } from '@mui/material';
import { MessageSquare } from 'lucide-react';
import { RequestNote } from '../types'; // Import the type from the central location

interface CommunicationLogProps {
  requestId: string;
  initialNotes: RequestNote[];
  onNoteAdded: () => void;
}

const CommunicationLog: React.FC<CommunicationLogProps> = ({ requestId, initialNotes, onNoteAdded }) => {
  const [newNote, setNewNote] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);

  // This real-time listener is the SINGLE SOURCE OF TRUTH for all updates to the log.
  // It works for both the sender and the receiver.
  useEffect(() => {
    if (!requestId) return;

    const channel = supabase
      .channel(`request-notes-${requestId}`)
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'request_notes',
          filter: `request_id=eq.${requestId}`
        },
        (payload) => {
          console.log('Real-time note received. Telling parent to re-fetch.', payload);
          // This call is the key. It tells the Dashboard/MyRequests to get fresh data,
          // which then flows down to this component.
          onNoteAdded();
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [requestId, onNoteAdded]);

  const handleAddNote = async () => {
    if (!newNote.trim() || !requestId) return;
    setIsSubmitting(true);
    try {
      // We simply post the new note to the database.
      await apiClient.post(`/requests/${requestId}/notes`, { note: newNote });
      setNewNote("");
      // *** THE FIX: The manual `onNoteAdded()` call is REMOVED from here. ***
      // We now confidently rely on the useEffect listener above to receive the
      // broadcast from Supabase, just like the other user will. This ensures
      // both clients use the exact same update mechanism.
    } catch (error) {
      console.error("Failed to add note:", error);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  return (
    <Paper variant="outlined" sx={{ display: 'flex', flexDirection: 'column', overflow: 'hidden', height: '100%' }}>
      <Typography variant="overline" sx={{ p: 2, bgcolor: 'grey.100', display: 'flex', alignItems: 'center', gap: 1 }}>
        <MessageSquare size={16} /> Communication Log
      </Typography>

      <Box sx={{ flexGrow: 1, overflowY: 'auto', p: 2, minHeight: '200px' }}>
        {initialNotes.length > 0 ? (
          initialNotes.map(note => (
            <Box
              key={note.id}
              sx={{ mb: 1.5, display: 'flex', justifyContent: note.author_role === 'admin' ? 'flex-start' : 'flex-end' }}
            >
              <Box>
                <Paper elevation={0} sx={{ p: 1.5, bgcolor: note.author_role === 'admin' ? '#e3f2fd' : '#ede7f6', borderRadius: 2 }}>
                  <Typography variant="body2">{note.note}</Typography>
                </Paper>
                <Typography variant="caption" display="block" sx={{ px: 1, color: 'text.secondary', textAlign: note.author_role === 'admin' ? 'left' : 'right' }}>
                  {note.author_role === 'admin' ? 'Admin' : 'You'} - {new Date(note.created_at).toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' })}
                </Typography>
              </Box>
            </Box>
          ))
        ) : (
          <Typography variant="body2" color="text.secondary" sx={{ p: 2, textAlign: 'center' }}>
            No notes yet.
          </Typography>
        )}
      </Box>

      <Box sx={{ p: 2, borderTop: 1, borderColor: 'divider', bgcolor: 'grey.50' }}>
        <Box sx={{ display: 'flex', gap: 1 }}>
          <TextField
            label="Add a note or message..."
            value={newNote}
            onChange={(e) => setNewNote(e.target.value)}
            fullWidth
            multiline
            maxRows={3}
            size="small"
            onKeyDown={(e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); handleAddNote(); }}}
          />
          <Button variant="contained" onClick={handleAddNote} disabled={isSubmitting || !newNote.trim()}>
            {isSubmitting ? '...' : 'Send'}
          </Button>
        </Box>
      </Box>
    </Paper>
  );
};

export default CommunicationLog;
--- END OF FILE vite-app/src/features/requests/components/CommunicationLog.tsx ---

--- START OF FILE vite-app/src/features/requests/components/CustomerInfoSection.tsx ---

// vite-app/src/components/CustomerInfoSection.tsx

import React from 'react';
import { Box, Typography, Paper, TextField, Button, Grid } from '@mui/material';
import { User } from 'lucide-react';

interface CustomerInfoSectionProps {
  request: any;
  isAdmin: boolean;
  isDateEditable?: boolean;
  scheduledStartDate?: string | null; // Allow null
  setScheduledStartDate?: (date: string) => void;
  currentStatus?: string;
  setCurrentStatus?: (status: string) => void;
  isUpdating?: boolean;
  editable?: boolean; // For QuoteFormModal
  goodUntil?: string; // For QuoteFormModal
  setGoodUntil?: (date: string) => void; // For QuoteFormModal
  onSaveScheduledDate?: () => void; // Add this prop
  scheduledDateChanged?: boolean; // Add this prop
}

const CustomerInfoSection: React.FC<CustomerInfoSectionProps> = ({
  request,
  isAdmin,
  isDateEditable,
  scheduledStartDate,
  setScheduledStartDate,
  currentStatus,
  setCurrentStatus,
  isUpdating,
  editable,
  goodUntil,
  setGoodUntil,
  onSaveScheduledDate, // Destructure the new prop
  scheduledDateChanged, // Destructure the new prop
}) => {
  const isRequestDetail = setScheduledStartDate !== undefined;
  const customerProfile = request?.user_profiles;

  // Only show the scheduling section if the status is 'accepted' or 'scheduled'
  const canShowScheduling = isAdmin && isRequestDetail && (currentStatus === 'accepted' || currentStatus === 'scheduled');

  return (
    <Paper variant="outlined" sx={{ p: 2 }}>
      <Typography variant="overline" color="text.secondary" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}><User size={16} /> Customer Info</Typography>
      <Grid container spacing={2} sx={{ mt: 0.5 }}>
        <Grid item xs={12} sm={6}>
          <Typography variant="body2" sx={{ fontWeight: 'bold', color: 'text.secondary' }}>Name</Typography>
          <Typography variant="body1">{customerProfile?.name || 'N/A'}</Typography>
        </Grid>
        <Grid item xs={12} sm={6}>
          <Typography variant="body2" sx={{ fontWeight: 'bold', color: 'text.secondary' }}>Phone</Typography>
          <Button component="a" href={`tel:${customerProfile?.phone}`} size="small" sx={{ p: 0, justifyContent: 'flex-start' }}>{customerProfile?.phone || 'N/A'}</Button>
        </Grid>
        <Grid item xs={12} sm={6}>
          <Typography variant="body2" sx={{ fontWeight: 'bold', color: 'text.secondary' }}>Email</Typography>
          <Button component="a" href={`mailto:${customerProfile?.email}`} size="small" sx={{ p: 0, justifyContent: 'flex-start', textTransform: 'none' }}>{customerProfile?.email || 'N/A'}</Button>
        </Grid>
        
        {/* Conditional rendering for the date input */}
        {canShowScheduling ? (
          <Grid item xs={12} sm={6}>
            <Typography variant="body2" sx={{ fontWeight: 'bold', color: 'text.secondary' }}>Scheduled Work Start</Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mt: 0.5 }}>
              <TextField
                type="date"
                value={scheduledStartDate ? scheduledStartDate.split('T')[0] : ''}
                onChange={(e) => {
                  if (setScheduledStartDate) setScheduledStartDate(e.target.value);
                  if (e.target.value && currentStatus === 'accepted' && setCurrentStatus) {
                    setCurrentStatus('scheduled');
                  }
                }}
                fullWidth
                size="small"
                InputLabelProps={{ shrink: true }}
                disabled={isUpdating}
              />
              {scheduledDateChanged && (
                <Button
                  size="small"
                  variant="contained"
                  onClick={onSaveScheduledDate}
                  disabled={isUpdating}
                >
                  Save Date
                </Button>
              )}
            </Box>
          </Grid>
        ) : (
             <Grid item xs={12} sm={6}>
                <Typography variant="body2" sx={{ fontWeight: 'bold', color: 'text.secondary' }}>Service Address</Typography>
                <Button component="a" href={`https://maps.google.com/?q=${encodeURIComponent(request?.service_address)}`} target="_blank" size="small" sx={{ p: 0, justifyContent: 'flex-start', textAlign: 'left' }}>{request?.service_address || 'N/A'}</Button>
             </Grid>
        )}

        {/* This is for the QuoteFormModal, which doesn't show the scheduled date */}
        {!isRequestDetail && (
          <Grid item xs={12} sm={6}>
            <Box>
              <TextField label="Good Until" type="date" value={goodUntil} onChange={e => setGoodUntil && setGoodUntil(e.target.value)} size="small" InputLabelProps={{ shrink: true }} disabled={!editable} sx={{ bgcolor: '#fff', borderRadius: 1 }} />
            </Box>
          </Grid>
        )}
      </Grid>
    </Paper>
  );
};

export default CustomerInfoSection;
--- END OF FILE vite-app/src/features/requests/components/CustomerInfoSection.tsx ---

--- START OF FILE vite-app/src/features/requests/components/Dashboard.tsx ---

// vite-app/src/features/requests/components/Dashboard.tsx

import React, { useState, useMemo, useCallback, useEffect } from 'react';
import { useAuth } from '../../auth/AuthContext';
import { Box, Typography, CircularProgress, Paper, Chip } from '@mui/material';
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import RequestDetailModal from './RequestDetailModal';
import { AlertTriangle } from 'lucide-react';
import { getRequestStatusChipColor } from '../../../lib/statusColors';
import { useRequests } from '../hooks/useRequests';
import { QuoteRequest, Quote } from '../types';

const Dashboard: React.FC = () => {
  const { profile } = useAuth();
  const { requests: allRequests, loading, error, refreshRequests } = useRequests();
  const [selectedRequest, setSelectedRequest] = useState<QuoteRequest | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [activeFilterStatus, setActiveFilterStatus] = useState<string>('all');

  // *** THE DEFINITIVE FIX: State Synchronization Effect ***
  // This effect listens for changes in the main `allRequests` array.
  // If a modal is open (`selectedRequest` has an ID), it finds the NEW version
  // of that request in the updated array and forces the `selectedRequest` state
  // to be updated. This ensures the modal always receives the freshest data.
  useEffect(() => {
    if (selectedRequest && allRequests.length > 0) {
      const newRequestData = allRequests.find(r => r.id === selectedRequest.id);
      if (newRequestData) {
        setSelectedRequest(newRequestData);
      }
    }
  }, [allRequests, selectedRequest?.id]); // Dependency array is stable and correct

  const filteredRequests = useMemo(() => {
    if (activeFilterStatus === 'all') return allRequests;
    return allRequests.filter(request => request.status === activeFilterStatus);
  }, [allRequests, activeFilterStatus]);

  const handleRowClick = (params: any) => {
    const fullRequestData = allRequests.find(r => r.id === params.id);
    if (fullRequestData) {
      setSelectedRequest(fullRequestData);
      setIsModalOpen(true);
    }
  };

  const handleModalUpdate = useCallback(() => {
    refreshRequests();
  }, [refreshRequests]);

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedRequest(null);
  };

  const allStatuses = ['all', 'new', 'viewed', 'quoted', 'accepted', 'scheduled', 'completed'];

  const columns: GridColDef[] = [
    { field: 'priority_score', headerName: 'Priority', width: 100, type: 'number' },
    { field: 'triage_summary', headerName: 'Triage Summary', flex: 1 },
    { field: 'is_emergency', headerName: 'Urgency', width: 120,
      renderCell: (params) => ( params.value ? ( <Chip icon={<AlertTriangle size={14} />} label="Emergency" color="error" size="small" variant="outlined" /> ) : null ),
    },
    { field: 'problem_category', headerName: 'Request Type', width: 180,
      valueFormatter: (value) => value ? String(value).replace(/_/g, " ").replace(/\b\w/g, (l:string) => l.toUpperCase()) : 'N/A'
    },
    { field: 'customer_name', headerName: 'Customer Name', width: 180,
      valueGetter: (value, row) => row.user_profiles?.name || row.customer_name || 'N/A'
    },
    { field: 'created_at', headerName: 'Received', width: 180, type: 'dateTime', valueGetter: (value) => value ? new Date(value) : null },
    { field: 'quote_amount', headerName: 'Quote Amount', width: 130, type: 'number',
      valueGetter: (value, row) => row.quotes?.sort((a: Quote, b: Quote) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0]?.quote_amount,
      renderCell: (params) => params.value != null ? `${params.value.toFixed(2)}` : '—'
    },
    { field: 'status', headerName: 'Status', width: 120,
      renderCell: (params) => ( <Chip label={params.value || 'N/A'} color={getRequestStatusChipColor(params.value)} size="small" sx={{ textTransform: 'capitalize' }}/> )
    },
    { field: 'service_address', headerName: 'Address', flex: 1 },
  ];

  if (loading && allRequests.length === 0) return <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}><CircularProgress /></Box>;
  if (!profile || profile.role !== 'admin') return <Box sx={{ p: 4 }}><Typography>Access Denied. You must be an administrator to view this page.</Typography></Box>;
  if (error) return <Box sx={{ p: 4 }}><Typography color="error">{error}</Typography></Box>;

  return (
    <>
      <Box sx={{ bgcolor: '#f4f6f8', minHeight: 'calc(100vh - 80px)', p: { xs: 2, md: 4 } }}>
        <Box sx={{ maxWidth: '1200px', margin: 'auto' }}>
          <Typography variant="h4" gutterBottom sx={{ fontWeight: 'bold', mb: 4 }}>
            Plumber's Command Center
          </Typography>
          <Box sx={{ mb: 2, display: 'flex', gap: 1, flexWrap: 'wrap' }}>
            {allStatuses.map(status => ( <Chip key={status} label={status === 'all' ? 'All Requests' : status.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())} onClick={() => setActiveFilterStatus(status)} color={status === 'all' ? 'default' : getRequestStatusChipColor(status)} variant={activeFilterStatus === status ? 'filled' : 'outlined'} sx={{ textTransform: 'capitalize' }} /> ))}
          </Box>
          <Paper sx={{ height: 600, width: '100%' }}>
            <DataGrid rows={filteredRequests} columns={columns} onRowClick={handleRowClick} initialState={{ pagination: { paginationModel: { pageSize: 10 } }, sorting: { sortModel: [{ field: 'created_at', sort: 'desc' }] }, }} pageSizeOptions={[10, 25, 50]} sx={{ border: 0, '& .MuiDataGrid-columnHeaders': { backgroundColor: '#e3f2fd', fontSize: '1rem' }, '& .MuiDataGrid-columnHeaderTitle': { fontWeight: 'bold' }, '& .MuiDataGrid-row:hover': { cursor: 'pointer', backgroundColor: '#f0f7ff' } }} />
          </Paper>
        </Box>
      </Box>
      {selectedRequest && (
        <RequestDetailModal
          isOpen={isModalOpen}
          onClose={handleCloseModal}
          request={selectedRequest}
          onUpdateRequest={handleModalUpdate}
        />
      )}
    </>
  );
};

export default Dashboard;
--- END OF FILE vite-app/src/features/requests/components/Dashboard.tsx ---

--- START OF FILE vite-app/src/features/requests/components/ModalFooter.tsx ---

// vite-app/src/components/ModalFooter.tsx

import React from 'react';
import { Box } from '@mui/material';

interface ModalFooterProps {
  children: React.ReactNode; // This allows us to pass any buttons or content into the footer
}

const ModalFooter: React.FC<ModalFooterProps> = ({ children }) => {
  return (
    <Box
      sx={{
        p: { xs: 2, md: 3 },
        borderTop: 1,
        borderColor: 'divider',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        flexShrink: 0,
        bgcolor: 'grey.50' // Added a slight background color for consistency
      }}
    >
      {children}
    </Box>
  );
};

export default ModalFooter;
--- END OF FILE vite-app/src/features/requests/components/ModalFooter.tsx ---

--- START OF FILE vite-app/src/features/requests/components/ModalHeader.tsx ---

// vite-app/src/components/ModalHeader.tsx

import React from 'react';
import { Box, Typography, IconButton } from '@mui/material';
import { X as XIcon } from 'lucide-react';

interface ModalHeaderProps {
  title: string;
  subtitle?: string;
  onClose: () => void;
  // The 'actions' prop allows us to pass in any button or component, like the "AI Triage" button
  actions?: React.ReactNode; 
}

const ModalHeader: React.FC<ModalHeaderProps> = ({ title, subtitle, onClose, actions }) => {
  return (
    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', bgcolor: 'primary.main', color: '#fff', px: 3, py: 2, flexShrink: 0 }}>
      <Box>
        <Typography variant="h5" sx={{ fontWeight: 700 }}>
          {title}
        </Typography>
        {subtitle && (
          <Typography variant="caption" sx={{ color: 'rgba(255, 255, 255, 0.8)' }}>
            {subtitle}
          </Typography>
        )}
      </Box>
      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        {actions}
        <IconButton onClick={onClose} sx={{ color: '#fff' }}>
          <XIcon size={24} />
        </IconButton>
      </Box>
    </Box>
  );
};

export default ModalHeader;
--- END OF FILE vite-app/src/features/requests/components/ModalHeader.tsx ---

--- START OF FILE vite-app/src/features/requests/components/MyRequests.tsx ---

// vite-app/src/features/requests/components/MyRequests.tsx

import React, { useState, useCallback, useEffect } from 'react';
import { useAuth } from '../../auth/AuthContext';
import { Box, Typography, CircularProgress, Paper, Chip } from '@mui/material';
import RequestDetailModal from './RequestDetailModal';
import { QuoteRequest } from '../types';
import { getRequestStatusChipColor } from '../../../lib/statusColors';
import { useRequests } from '../hooks/useRequests';

// *** THE FIX: The legacy prop interface is removed. ***
// interface MyRequestsProps {
//   setAddNewRequestCallback?: (callback: (request: QuoteRequest) => void) => void;
// }

const MyRequests: React.FC = () => {
  const { user } = useAuth();
  const { requests, loading, error, refreshRequests } = useRequests(user?.id);
  const [selectedRequest, setSelectedRequest] = useState<QuoteRequest | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  
  // *** THE FIX: The useEffect for the legacy callback is removed. ***
  // useEffect(() => {
  //   if (setAddNewRequestCallback) { ... }
  // }, [setAddNewRequestCallback, refreshRequests]);

  // This effect ensures the modal always has the latest data after a refresh.
  useEffect(() => {
    if (selectedRequest && requests.length > 0) {
      const newRequestData = requests.find(r => r.id === selectedRequest.id);
      if (newRequestData) {
        setSelectedRequest(newRequestData);
      }
    }
  }, [requests, selectedRequest?.id]);

  const handleOpenModal = (req: QuoteRequest) => {
    setSelectedRequest(req);
    setIsModalOpen(true);
  };
  
  const handleModalUpdate = useCallback(() => {
    refreshRequests();
  }, [refreshRequests]);

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedRequest(null);
  };

  if (loading && requests.length === 0) return <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}><CircularProgress /></Box>;
  if (error) return <Box sx={{ p: 4 }}><Typography color="error">{error}</Typography></Box>;

  return (
    <>
      <section id="my-requests" className="py-16 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <Typography variant="h4" gutterBottom sx={{ fontWeight: 'bold', mb: 4, textAlign: 'center' }}>
            My Quote Requests
          </Typography>
          
          {requests.length > 0 ? (
            <Box sx={{ maxWidth: '800px', margin: 'auto', display: 'flex', flexDirection: 'column', gap: 2 }}>
              {requests.map((req) => {
                const mostRecentQuote = req.quotes?.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];
                return (
                  <button key={req.id} onClick={() => handleOpenModal(req)} className="w-full bg-white p-4 rounded-lg shadow-md flex items-center justify-between text-left hover:bg-gray-50 transition-colors duration-200">
                    <Box>
                      <Typography variant="h6" component="div" sx={{ textTransform: 'capitalize' }}>
                        {req.problem_category.replace(/_/g, " ")}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        Submitted: {new Date(req.created_at).toLocaleDateString()}
                      </Typography>
                    </Box>
                    <Box sx={{ textAlign: 'right', display: 'flex', alignItems: 'center', gap: 2 }}>
                      {mostRecentQuote && (
                        <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
                          ${mostRecentQuote.quote_amount.toFixed(2)}
                        </Typography>
                      )}
                      <Chip label={req.status} color={getRequestStatusChipColor(req.status)} size="small" sx={{ textTransform: 'capitalize', fontWeight: 'bold' }} />
                    </Box>
                  </button>
                );
              })}
            </Box>
          ) : (
            <Paper sx={{ p: 4, textAlign: 'center', maxWidth: '800px', margin: 'auto' }}>
              <Typography variant="h6" color="text.secondary">
                You have no quote requests yet. Request a quote now!
              </Typography>
            </Paper>
          )}
        </div>
      </section>

      {selectedRequest && (
        <RequestDetailModal
          isOpen={isModalOpen}
          onClose={handleCloseModal}
          request={selectedRequest}
          onUpdateRequest={handleModalUpdate}
        />
      )}
    </>
  );
};

export default MyRequests;
--- END OF FILE vite-app/src/features/requests/components/MyRequests.tsx ---

--- START OF FILE vite-app/src/features/requests/components/QuoteAgentModal.tsx ---

// vite-app/src/components/QuoteAgentModal.tsx

import React, { useState, useRef, useEffect } from "react";
import { useAuth } from "../../auth/AuthContext";
import { SERVICE_QUOTE_CATEGORIES, ServiceQuoteCategory } from "../../../lib/serviceQuoteQuestions";
import apiClient, { uploadAttachments } from "../../../lib/apiClient";
import { TextField, Select, MenuItem, Button, Box, FormControl, InputLabel, Typography, IconButton, Paper, Alert } from '@mui/material';
import AttachmentSection from "./AttachmentSection";
import { X as XIcon } from 'lucide-react';


// Diagnostic component (kept for development)
const DebugInfo = ({ status, isEmergency, initialCount, followUpCount, answerCount, currentIndex }: { status: string; isEmergency: boolean | null; initialCount: number; followUpCount: number; answerCount: number; currentIndex: number }) => (
  <div style={{ background: '#333', color: '#fff', padding: '8px', marginTop: '16px', borderRadius: '4px', fontSize: '12px', fontFamily: 'monospace' }}>
    <div>Status: {status} | Emergency: {String(isEmergency)}</div>
    <div>Initial Qs: {initialCount} | Follow-up Qs: {followUpCount}</div>
    <div>Answers: {answerCount} | Current Index: {currentIndex}</div>
  </div>
);

type ModalStatus = 'ASKING_EMERGENCY' | 'SELECTING_CATEGORY' | 'INITIAL_QUESTIONS' | 'AWAITING_GPT' | 'FOLLOW_UP_QUESTIONS' | 'SUMMARY' | 'SUBMITTED';

interface QuoteAgentModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmissionSuccess: (newRequest: any) => void;
}

const QuoteAgentModal = ({ isOpen, onClose, onSubmissionSuccess }: QuoteAgentModalProps) => {
  const { profile, user } = useAuth();

  const [status, setStatus] = useState<ModalStatus>('ASKING_EMERGENCY');
  const [chatHistory, setChatHistory] = useState<Array<{ sender: string; message: string }>>([]);
  const [userInput, setUserInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [isEmergency, setIsEmergency] = useState<boolean | null>(null);
  const [newAttachments, setNewAttachments] = useState<File[]>([]);
  const [errorMessage, setErrorMessage] = useState<string>("");

  const GENERIC_QUESTIONS = [
    { key: 'property_type', question: 'What is the property type?', choices: ['Residential', 'Apartment', 'Commercial', 'Other'] },
    { key: 'is_homeowner', question: 'Are you the homeowner?', choices: ['Yes', 'No'] },
    { key: 'problem_description', question: 'Please describe the general problem or need.', textarea: true },
    { key: 'preferred_timing', question: 'What is your preferred timing for the service? (e.g., "ASAP", "This week", "Next Monday afternoon")' },
    { key: 'additional_notes', question: 'Additional notes (specify "none" if not applicable):', textarea: true },
  ];

  const [initialQuestions, setInitialQuestions] = useState<string[]>([]);
  const [genericAnswers, setGenericAnswers] = useState<{ [key: string]: string }>({});
  const [followUpQuestions, setFollowUpQuestions] = useState<string[]>([]);
  const [allAnswers, setAllAnswers] = useState<string[]>([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedCategory, setSelectedCategory] = useState<ServiceQuoteCategory | null>(null);

  const chatEndRef = useRef<HTMLDivElement>(null);
  const showDebugPanel = import.meta.env.VITE_DEBUG_PANEL === 'true';

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [chatHistory]);

  const resetState = () => {
    setChatHistory([]);
    setStatus('ASKING_EMERGENCY');
    setIsEmergency(null);
    setNewAttachments([]);
    setUserInput("");
    setLoading(false);
    setInitialQuestions([]);
    setGenericAnswers({});
    setFollowUpQuestions([]);
    setAllAnswers([]);
    setCurrentQuestionIndex(0);
    setSelectedCategory(null);
    setErrorMessage("");
  };

  useEffect(() => {
    if (isOpen) {
      resetState();
    }
  }, [isOpen]);

  const handleEmergencyChoice = (choice: boolean) => {
    setIsEmergency(choice);
    setChatHistory([
      { sender: "agent", message: "Is this an emergency?" },
      { sender: "user", message: choice ? "Yes" : "No" },
      { sender: "agent", message: "Thank you. What would you like a quote for?" }
    ]);
    setStatus('SELECTING_CATEGORY');
  };

  const handleSelectCategory = (category: ServiceQuoteCategory) => {
    setSelectedCategory(category);
    const combinedQuestions = [...GENERIC_QUESTIONS.map(q => q.question), ...category.questions];
    setInitialQuestions(combinedQuestions);
    setChatHistory((prev) => [...prev, { sender: "user", message: category.label }, { sender: "agent", message: combinedQuestions[0] ?? "" }]);
    setCurrentQuestionIndex(0);
    setStatus('INITIAL_QUESTIONS');
  };

  const handleSend = async () => {
    if (loading || userInput.trim() === "") return;
    const currentAnswer = userInput;
    
    const allQuestions = [...initialQuestions, ...followUpQuestions];
    const structuredAnswers = [...allAnswers, currentAnswer].map((ans, index) => ({
      question: allQuestions[index] || 'Follow-up',
      answer: ans,
    }));
    
    setAllAnswers(prev => [...prev, currentAnswer]);

    if (status === 'INITIAL_QUESTIONS' && currentQuestionIndex < GENERIC_QUESTIONS.length) {
      const genericQuestionKey = GENERIC_QUESTIONS[currentQuestionIndex]?.key ?? '';
      if (genericQuestionKey) {
        setGenericAnswers(prev => ({ ...prev, [genericQuestionKey]: currentAnswer }));
      }
    }
    
    setChatHistory((prev) => [...prev, { sender: "user", message: currentAnswer }]);
    setUserInput("");
    setLoading(true);

    if (status === 'INITIAL_QUESTIONS') {
      const isLastInitialQuestion = currentQuestionIndex === initialQuestions.length - 1;
      if (isLastInitialQuestion) {
        setStatus('AWAITING_GPT');
        setChatHistory((prev) => [...prev, { sender: "agent", message: "Thank you. I'm just reviewing your answers..." }]);
        try {
          const payload = { clarifyingAnswers: structuredAnswers, category: selectedCategory?.key, problem_description: genericAnswers['problem_description'] || '' };
          const { data } = await apiClient.post('/requests/gpt-follow-up', payload);
          if (data.additionalQuestions && data.additionalQuestions.length > 0) {
            setFollowUpQuestions(data.additionalQuestions);
            setCurrentQuestionIndex(0);
            setStatus('FOLLOW_UP_QUESTIONS');
            setChatHistory((prev) => [...prev, { sender: "agent", message: data.additionalQuestions[0] ?? "" }]);
          } else { 
            setStatus('SUMMARY'); 
            setChatHistory(prev => [...prev, { sender: "agent", message: "Everything looks clear. Please review your request below." }]);
          }
        } catch (err) { 
            console.error("GPT request failed, proceeding to summary.", err); 
            setStatus('SUMMARY'); 
            setChatHistory(prev => [...prev, { sender: "agent", message: "Couldn't reach my assistant, but please review your request below." }]);
        } finally { setLoading(false); }
      } else {
        const nextIdx = currentQuestionIndex + 1;
        setCurrentQuestionIndex(nextIdx);
        setChatHistory((prev) => [...prev, { sender: "agent", message: initialQuestions[nextIdx] ?? "" }]);
        setLoading(false);
      }
    } else if (status === 'FOLLOW_UP_QUESTIONS') {
      const isLastFollowUpQuestion = currentQuestionIndex === followUpQuestions.length - 1;
      if (isLastFollowUpQuestion) { 
        setStatus('SUMMARY'); 
        setChatHistory(prev => [...prev, { sender: "agent", message: "Thank you. Please review your request below." }]);
      } else {
        const nextIdx = currentQuestionIndex + 1;
        setCurrentQuestionIndex(nextIdx);
        setChatHistory((prev) => [...prev, { sender: "agent", message: followUpQuestions[nextIdx] ?? "" }]);
      }
      setLoading(false);
    }
  };
  
  const handleSubmitQuote = async () => {
    if (!profile || !selectedCategory || !user) return;
    setLoading(true);
    setErrorMessage("");

    try {
        const allQuestions = [...initialQuestions, ...followUpQuestions];
        const structuredAnswers = allQuestions.map((question, index) => ({ question: question, answer: allAnswers[index] || '(No answer provided)' }));
        const payload = { clarifyingAnswers: structuredAnswers, contactInfo: profile, category: selectedCategory.key, isEmergency: isEmergency, ...genericAnswers };
        
        const { data: result } = await apiClient.post('/requests/submit', payload);
        const newRequest = result.request;
        const newRequestId = newRequest?.id;

        if (newAttachments.length > 0 && newRequestId) {
          await uploadAttachments(newRequestId, newAttachments);
        }

        setStatus('SUBMITTED');

        setTimeout(() => {
          onSubmissionSuccess(newRequest);
          onClose();
        }, 1500);

    } catch (err: any) {
        console.error("Submission Error:", err);
        const errorDetails = err.response?.data?.details ? JSON.stringify(err.response.data.details) : err.message;
        setErrorMessage(`Submission failed: ${errorDetails}. Please try again or call us.`);
        setLoading(false);
    }
  };

  const handleRemovePendingFile = (indexToRemove: number) => {
    setNewAttachments(prev => prev.filter((_, index) => index !== indexToRemove));
  };

  if (!isOpen) return null;

  const renderContent = () => {
    switch (status) {
        case 'ASKING_EMERGENCY':
          return (
            <Box sx={{ textAlign: 'center', p: 3 }}>
              <Typography variant="h6" sx={{ mb: 2 }}>Is this an emergency?</Typography>
              <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}>
                <Button variant="contained" color="error" size="large" onClick={() => handleEmergencyChoice(true)}>Yes, it's an emergency</Button>
                <Button variant="contained" color="primary" size="large" onClick={() => handleEmergencyChoice(false)}>No</Button>
              </Box>
            </Box>
          );
        case 'SELECTING_CATEGORY':
        case 'INITIAL_QUESTIONS':
        case 'FOLLOW_UP_QUESTIONS':
        case 'AWAITING_GPT':
          return (
            <Box sx={{ flex: '1 1 auto', display: 'flex', flexDirection: 'column', overflow: 'hidden', p: 3, pt: 1 }}>
              <Box sx={{ flex: '1 1 auto', overflowY: 'auto', background: '#f8f8f8', padding: '10px', borderRadius: '8px', marginBottom: '12px' }}>
                {chatHistory.map((msg, idx) => ( <div key={idx} style={{ textAlign: msg.sender === 'user' ? 'right' : 'left', margin: '8px 0' }}> <span style={{ background: msg.sender === 'user' ? '#e0f7fa' : '#fff', padding: '6px 12px', borderRadius: 6, display: 'inline-block', boxShadow: '0 1px 2px rgba(0,0,0,0.05)' }}>{msg.message}</span> </div> ))}
                {status === 'AWAITING_GPT' && ( <div style={{ textAlign: 'left', margin: '8px 0' }}> <span style={{ background: '#fff', padding: '6px 12px', borderRadius: 6, display: 'inline-block', fontStyle: 'italic', color: '#777' }}> Thinking... </span> </div> )}
                <div ref={chatEndRef} />
              </Box>
              <Box sx={{ flexShrink: 0 }}>
                {status === 'SELECTING_CATEGORY' && (
                  <div>
                    <Typography sx={{ fontWeight: 500, mb: 1 }}>Select a service type:</Typography>
                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                      {SERVICE_QUOTE_CATEGORIES.map((cat) => ( <Button key={cat.key} variant="contained" onClick={() => handleSelectCategory(cat)}>{cat.label}</Button> ))}
                    </Box>
                  </div>
                )}
                {['INITIAL_QUESTIONS', 'FOLLOW_UP_QUESTIONS'].includes(status) && (
                  <form onSubmit={(e) => { e.preventDefault(); handleSend(); }}>
                    {(() => {
                        let inputControl = null;
                        const isGenericPhase = status === 'INITIAL_QUESTIONS' && currentQuestionIndex < GENERIC_QUESTIONS.length;
                        const currentGenericQuestion = isGenericPhase ? GENERIC_QUESTIONS[currentQuestionIndex] : null;

                        if (currentGenericQuestion && currentGenericQuestion.choices) {
                            inputControl = ( <FormControl fullWidth> <InputLabel>{currentGenericQuestion.question}</InputLabel> <Select value={userInput} label={currentGenericQuestion.question} onChange={e => setUserInput(e.target.value)}> {currentGenericQuestion.choices.map(choice => ( <MenuItem key={choice} value={choice}>{choice}</MenuItem> ))} </Select> </FormControl> );
                        } else {
                            const isTextarea = currentGenericQuestion?.textarea === true;
                            inputControl = ( <TextField value={userInput} onChange={e => setUserInput(e.target.value)} placeholder="Type your answer..." fullWidth multiline={isTextarea} rows={isTextarea ? 3 : 1} /> );
                        }
                        return inputControl;
                    })()}
                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>
                        <Button type="submit" variant="contained" color="primary" disabled={loading || userInput.trim() === ''}>{loading ? '...' : 'Send'}</Button>
                    </Box>
                  </form>
                )}
              </Box>
            </Box>
          );
        case 'SUMMARY':
          const allQuestions = [...initialQuestions, ...followUpQuestions];
          const summaryAnswers = allQuestions.map((question, index) => ({ question, answer: allAnswers[index] || '(No answer provided)' }));
          return (
            <Box sx={{ flex: '1 1 auto', display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>
              <Box sx={{ flex: '1 1 auto', overflowY: 'auto', p: 3 }}>
                  <Typography variant="subtitle1" sx={{ fontWeight: 600, mb: 1 }}>Please confirm your details:</Typography>
                  {isEmergency && <Typography color="error" variant="h6" sx={{ mb: 1, fontWeight: 'bold' }}>EMERGENCY REQUEST</Typography>}
                  <Paper variant="outlined" sx={{ p: 2, mb: 2 }}>
                    <Typography variant="overline" display="block" gutterBottom>Service Type</Typography>
                    <Typography>{selectedCategory?.label}</Typography>
                  </Paper>
                  <Paper variant="outlined" sx={{ p: 2, mb: 2 }}>
                    <Typography variant="overline" display="block" gutterBottom>Your Answers</Typography>
                    {summaryAnswers.map((item, i) => ( <Box key={i} sx={{ mb: 1.5 }}> <Typography variant="body2" sx={{ fontWeight: 500 }}>{item.question}</Typography> <Typography variant="body2" color="text.secondary" sx={{ pl: 1 }}>&bull; {item.answer}</Typography> </Box> ))}
                  </Paper>
                  {profile && ( <Paper variant="outlined" sx={{ p: 2, mb: 2 }}> <Typography variant="overline" display="block" gutterBottom>Contact Information</Typography> <div><b>Name:</b> {profile.name}</div> <div><b>Email:</b> {profile.email}</div> <div><b>Phone:</b> {profile.phone}</div> <div><b>Address:</b> {profile.address}, {profile.city}, {profile.province} {profile.postal_code}</div> </Paper> )}
                  <AttachmentSection
                    requestId="new-request"
                    attachments={[]}
                    pendingFiles={newAttachments}
                    editable={true}
                    onUpdate={() => {}}
                    onNewFiles={(files) => setNewAttachments(prev => [...prev, ...files])}
                    onRemovePendingFile={handleRemovePendingFile}
                  />
              </Box>
              {errorMessage && ( <Box sx={{ p: 2, flexShrink: 0 }}> <Alert severity="error">{errorMessage}</Alert> </Box> )}
              <Box sx={{ flexShrink: 0, p: 3, borderTop: 1, borderColor: 'divider', bgcolor: 'grey.50' }}>
                <Button variant="contained" color="primary" fullWidth onClick={handleSubmitQuote} disabled={loading}>{loading ? 'Submitting...' : 'Confirm & Submit Request'}</Button>
              </Box>
            </Box>
          );
        case 'SUBMITTED':
          return (
            <Box sx={{ textAlign: 'center', p: 4, display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', height: '100%' }}>
              <Typography variant="h6">Thank you!</Typography>
              <Typography>Your quote request has been submitted. We will get back to you soon.</Typography>
              <Typography variant="caption" color="text.secondary" sx={{ mt: 2 }}>This window will close automatically.</Typography>
            </Box>
          );
        default: return null;
      }
  }

  return (
    <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.4)', zIndex: 1000, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
      <Paper elevation={24} sx={{ background: '#fff', borderRadius: 3, boxShadow: '0 8px 32px rgba(0,0,0,0.18)', maxWidth: 500, width: '95%', position: 'relative', display: 'flex', flexDirection: 'column', maxHeight: '90vh' }}>
        <IconButton onClick={onClose} sx={{ position: 'absolute', top: 16, right: 16, zIndex: 1, color: 'grey.500' }}>
          <XIcon size={24} />
        </IconButton>
        <Typography variant="h5" sx={{ fontWeight: 700, p: 3, pb: 2, color: 'primary.main', flexShrink: 0, borderBottom: 1, borderColor: 'divider' }}>
          Request a Quote
        </Typography>
        <Box sx={{ flex: '1 1 auto', overflowY: 'auto' }}>
          {renderContent()}
        </Box>
        {showDebugPanel && (
          <div style={{ flexShrink: 0, padding: '0 24px 24px 24px', borderTop: '1px solid #eee' }}>
            <DebugInfo status={status} isEmergency={isEmergency} initialCount={initialQuestions.length} followUpCount={followUpQuestions.length} answerCount={allAnswers.length} currentIndex={currentQuestionIndex} />
          </div>
        )}
      </Paper>
    </div>
  );
};

export default QuoteAgentModal;
--- END OF FILE vite-app/src/features/requests/components/QuoteAgentModal.tsx ---

--- START OF FILE vite-app/src/features/requests/components/QuoteFormModal.tsx ---

// vite-app/src/features/requests/components/QuoteFormModal.tsx

import React, { useState, useEffect } from 'react';
import { Box, Typography, Paper, TextField, Button, Divider, InputAdornment, Chip, Grid } from '@mui/material';
import apiClient from '../../../lib/apiClient';
import { getQuoteStatusChipColor } from '../../../lib/statusColors';
import { QuoteRequest, QuoteAttachment } from '../types';

// Import all our reusable components
import ModalHeader from './ModalHeader';
import ModalFooter from './ModalFooter';
import CustomerInfoSection from './CustomerInfoSection';
import AttachmentSection from './AttachmentSection';

interface QuoteFormModalProps {
  isOpen: boolean;
  onClose: (updated?: boolean) => void;
  quote?: any;
  editable: boolean;
  request: QuoteRequest;
  requestId: string;
}

interface Item {
  description: string;
  price: string;
}

const QuoteFormModal: React.FC<QuoteFormModalProps> = ({ isOpen, onClose, quote, editable, request, requestId }) => {
  const [goodUntil, setGoodUntil] = useState('');
  const [laborItems, setLaborItems] = useState<Item[]>([{ description: '', price: '' }]);
  const [materialItems, setMaterialItems] = useState<Item[]>([{ description: '', price: '' }]);
  const [notes, setNotes] = useState('');
  const [newAttachments, setNewAttachments] = useState<File[]>([]);
  const [saving, setSaving] = useState(false);
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [saveError, setSaveError] = useState<string | null>(null);

  useEffect(() => {
    if (isOpen) {
      setNewAttachments([]);
      setSaveError(null);
      setSaveSuccess(false);

      if (quote) {
        let detailsObj: any = {};
        try {
          detailsObj = typeof quote.details === 'string' ? JSON.parse(quote.details) : (quote.details || {});
        } catch (e) {
          console.error("Failed to parse quote details:", e);
          detailsObj = {};
        }
        setLaborItems(detailsObj.labor_items?.length > 0 ? detailsObj.labor_items : [{ description: '', price: '' }]);
        setMaterialItems(detailsObj.material_items?.length > 0 ? detailsObj.material_items : [{ description: '', price: '' }]);
        setNotes(detailsObj.notes || '');
        setGoodUntil(detailsObj.good_until || '');
      } else {
        setLaborItems([{ description: '', price: '' }]);
        setMaterialItems([{ description: '', price: '' }]);
        setNotes('');
        setGoodUntil('');
      }
    }
  }, [quote, isOpen]);

  const handleSaveQuote = async () => {
    setSaveError(null);
    if (!laborItems.some(item => item.description && parseFloat(item.price) > 0) && !materialItems.some(item => item.description && parseFloat(item.price) > 0)) {
      setSaveError('Please add at least one labor or material item with a price.');
      return;
    }
    setSaving(true);

    const laborTotal = laborItems.reduce((sum, item) => sum + (parseFloat(item.price) || 0), 0);
    const materialTotal = materialItems.reduce((sum, item) => sum + (parseFloat(item.price) || 0), 0);
    const subtotal = laborTotal + materialTotal;
    const gst = subtotal * 0.05;
    const pst = subtotal * 0.07;
    const totalPrice = subtotal + gst + pst;

    try {
      const payload = {
        quote_amount: Number(totalPrice.toFixed(2)),
        details: JSON.stringify({
          labor_items: laborItems.filter(item => item.description),
          material_items: materialItems.filter(item => item.description),
          notes,
          good_until: goodUntil,
          tax_details: { gst: Number(gst.toFixed(2)), pst: Number(pst.toFixed(2)) },
        }),
      };

      const { data: savedQuote } = quote?.id
        ? await apiClient.put(`/requests/${requestId}/quotes/${quote.id}`, payload)
        : await apiClient.post(`/requests/${requestId}/quotes`, payload);

      if (newAttachments.length > 0 && savedQuote?.id) {
        const formData = new FormData();
        formData.append('request_id', requestId);
        formData.append('quote_id', savedQuote.id);
        newAttachments.forEach(file => formData.append('attachment', file));
        await apiClient.post('/requests/attachments', formData, { headers: { 'Content-Type': 'multipart/form-data' } });
      }

      setSaveSuccess(true);
      setTimeout(() => {
        setSaveSuccess(false);
        onClose(true);
      }, 1200);

    } catch (err: any) {
      setSaveError(err?.response?.data?.error || err.message || 'Failed to save quote.');
    } finally {
      setSaving(false);
    }
  };

  if (!isOpen) return null;

  const laborTotal = laborItems.reduce((sum, item) => sum + (parseFloat(item.price) || 0), 0);
  const materialTotal = materialItems.reduce((sum, item) => sum + (parseFloat(item.price) || 0), 0);
  const subtotal = laborTotal + materialTotal;
  const gst = subtotal * 0.05;
  const pst = subtotal * 0.07;
  const totalPrice = subtotal + gst + pst;

  const quoteAttachments = request?.quote_attachments?.filter((att: QuoteAttachment) => att.quote_id === quote?.id) || [];
  const headerTitle = quote?.id
    ? `Update Quote #${quote.quote_number}`
    : `Create New Quote for ${request?.problem_category?.replace(/_/g, ' ')}`;

  return (
    <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.6)', zIndex: 1200, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
      <Paper elevation={24} sx={{ width: '95%', maxWidth: '700px', p: 0, position: 'relative', display: 'flex', flexDirection: 'column', bgcolor: '#f4f6f8', maxHeight: '90vh', overflow: 'hidden' }}>

        <ModalHeader title={headerTitle} onClose={() => onClose()} />

        <Box sx={{ flex: '1 1 auto', overflowY: 'auto', p: 3 }}>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>

            <CustomerInfoSection
              request={request}
              isAdmin={false}
              editable={editable}
              goodUntil={goodUntil}
              setGoodUntil={setGoodUntil}
            />

            <Paper variant="outlined" sx={{p: 2}}>
              <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>Itemized Labor</Typography>
              {laborItems.map((item, idx) => (
                <Grid container spacing={1} key={`labor-${idx}`} sx={{ mb: 1 }}>
                  <Grid item xs={8}><TextField label="Description" value={item.description} onChange={e => { const newItems = [...laborItems]; newItems[idx].description = e.target.value; setLaborItems(newItems); }} fullWidth disabled={!editable} size="small" /></Grid>
                  <Grid item xs={4}><TextField label="Price" value={item.price} onChange={e => { const newItems = [...laborItems]; newItems[idx].price = e.target.value; setLaborItems(newItems); }} fullWidth disabled={!editable} size="small" type="number" InputProps={{ startAdornment: <InputAdornment position="start">$</InputAdornment> }} /></Grid>
                </Grid>
              ))}
              {editable && <Button onClick={() => setLaborItems([...laborItems, { description: '', price: '' }])} sx={{ mb: 2, mt: 1 }}>Add Labor Item</Button>}
            </Paper>

            <Paper variant="outlined" sx={{p: 2}}>
              <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>Itemized Materials</Typography>
              {materialItems.map((item, idx) => (
                <Grid container spacing={1} key={`material-${idx}`} sx={{ mb: 1 }}>
                  <Grid item xs={8}><TextField label="Description" value={item.description} onChange={e => { const newItems = [...materialItems]; newItems[idx].description = e.target.value; setMaterialItems(newItems); }} fullWidth disabled={!editable} size="small" /></Grid>
                  <Grid item xs={4}><TextField label="Price" value={item.price} onChange={e => { const newItems = [...materialItems]; newItems[idx].price = e.target.value; setMaterialItems(newItems); }} fullWidth disabled={!editable} size="small" type="number" InputProps={{ startAdornment: <InputAdornment position="start">$</InputAdornment> }} /></Grid>
                </Grid>
              ))}
              {editable && <Button onClick={() => setMaterialItems([...materialItems, { description: '', price: '' }])} sx={{ mb: 2, mt: 1 }}>Add Material Item</Button>}
            </Paper>

            <TextField label="Notes / Clarifications" value={notes} onChange={e => setNotes(e.target.value)} fullWidth multiline rows={3} disabled={!editable} />

            <AttachmentSection
              requestId={requestId}
              quoteId={quote?.id}
              attachments={quoteAttachments}
              pendingFiles={newAttachments}
              editable={editable}
              onUpdate={() => onClose(true)}
              onNewFiles={(files) => setNewAttachments(prev => [...prev, ...files])}
              onRemovePendingFile={(index) => setNewAttachments(prev => prev.filter((_, i) => i !== index))}
            />

            <Box sx={{ textAlign: 'right', mt: 2 }}>
              <Typography variant="body2" color="text.secondary">Subtotal: ${subtotal.toFixed(2)}</Typography>
              <Typography variant="body2" color="text.secondary">GST (5%): ${gst.toFixed(2)}</Typography>
              <Typography variant="body2" color="text.secondary">PST (7%): ${pst.toFixed(2)}</Typography>
              <Typography variant="h5" sx={{ fontWeight: 'bold', mt: 1 }}>Total: ${totalPrice.toFixed(2)}</Typography>
            </Box>
          </Box>
        </Box>

        <ModalFooter>
          <Box>
            {quote?.status && <Chip label={`Status: ${quote.status}`} color={getQuoteStatusChipColor(quote.status)} sx={{ textTransform: 'capitalize' }} />}
          </Box>
          {editable && (
            <Box>
              {saveError && <Typography color="error" sx={{ display: 'inline', mr: 2 }}>{saveError}</Typography>}
              {saveSuccess && <Typography color="success.main" sx={{ display: 'inline', mr: 2 }}>Quote saved!</Typography>}
              <Button variant="contained" color="primary" onClick={handleSaveQuote} disabled={saving || saveSuccess}>
                {saving ? 'Saving...' : (quote?.id ? 'Update Quote' : 'Save Quote')}
              </Button>
            </Box>
          )}
        </ModalFooter>
      </Paper>
    </div>
  );
};

export default QuoteFormModal;
--- END OF FILE vite-app/src/features/requests/components/QuoteFormModal.tsx ---

--- START OF FILE vite-app/src/features/requests/components/QuoteList.tsx ---

// vite-app/src/features/requests/components/QuoteList.tsx

import React, { useState, useCallback } from 'react';
import { useAuth } from '../../auth/AuthContext';
import { Box, Typography, Paper, Button, List, ListItem, ListItemText, Chip } from '@mui/material';
import { FilePlus } from 'lucide-react';
import { QuoteRequest } from '../types';
import QuoteFormModal from './QuoteFormModal';
import { getQuoteStatusChipColor } from '../../../lib/statusColors';

interface QuoteListProps {
  request: QuoteRequest;
  isReadOnly: boolean;
  isUpdating: boolean;
  onAcceptQuote: (quoteId: string) => void;
  onUpdateRequest: () => void;
}

const QuoteList: React.FC<QuoteListProps> = ({ request, isReadOnly, isUpdating, onAcceptQuote, onUpdateRequest }) => {
  const { profile } = useAuth();
  const [showQuoteForm, setShowQuoteForm] = useState(false);
  const [quoteModalMode, setQuoteModalMode] = useState<'create' | 'update'>('create');
  const [selectedQuote, setSelectedQuote] = useState<any | null>(null);

  const isAdmin = profile?.role === 'admin';

  const handleOpenQuoteForm = (mode: 'create' | 'update', quote?: any) => {
    setQuoteModalMode(mode);
    setSelectedQuote(quote || null);
    setShowQuoteForm(true);
  };

  const handleQuoteFormClose = useCallback((updated?: boolean) => {
    setShowQuoteForm(false);
    setSelectedQuote(null);
    if (updated) {
      onUpdateRequest();
    }
  }, [onUpdateRequest]);

  return (
    <>
      <Paper variant="outlined" sx={{ p: 2 }}>
        <Typography variant="overline" color="text.secondary" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <FilePlus size={16} /> Quotes
        </Typography>

        {request.quotes.length === 0 ? (
          <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
            No quotes yet.
          </Typography>
        ) : (
          <List>
            {request.quotes.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime()).map((quote) => (
              <ListItem key={quote.id} disablePadding secondaryAction={
                <Box sx={{ display: 'flex', gap: 1 }}>
                  {!isAdmin && quote.status !== 'accepted' && quote.status !== 'rejected' && request.status !== 'accepted' && (
                    <Button variant="contained" size="small" color="success" onClick={() => onAcceptQuote(quote.id)} disabled={isUpdating}>
                      Accept
                    </Button>
                  )}
                  <Button variant="outlined" size="small" onClick={() => handleOpenQuoteForm('update', quote)}>
                    {isAdmin && !isReadOnly ? 'Update' : 'View Details'}
                  </Button>
                </Box>
              }>
                <ListItemText
                  primaryTypographyProps={{ component: 'div' }}
                  primary={`Quote #${quote.quote_number} - $${quote.quote_amount.toFixed(2)}`}
                  secondary={
                    <Box component="span" sx={{ display: 'flex', alignItems: 'center', gap: 1, mt: 0.5 }}>
                      <Chip label={quote.status || 'N/A'} color={getQuoteStatusChipColor(quote.status)} size="small" sx={{ textTransform: 'capitalize' }} />
                      <Typography variant="caption" color="text.secondary">| Created: {new Date(quote.created_at).toLocaleDateString()}</Typography>
                    </Box>
                  }
                />
              </ListItem>
            ))}
          </List>
        )}

        {isAdmin && !isReadOnly && (
          <Button variant="contained" startIcon={<FilePlus />} sx={{ mt: 2 }} onClick={() => handleOpenQuoteForm('create')}>
            Add New Quote
          </Button>
        )}
      </Paper>

      <QuoteFormModal
        isOpen={showQuoteForm}
        onClose={handleQuoteFormClose}
        quote={selectedQuote}
        editable={isAdmin && !isReadOnly}
        request={request}
        requestId={request.id}
      />
    </>
  );
};

export default QuoteList;
--- END OF FILE vite-app/src/features/requests/components/QuoteList.tsx ---

--- START OF FILE vite-app/src/features/requests/components/RequestActions.tsx ---

// vite-app/src/components/RequestActions.tsx

import React from 'react';
import { Box, Typography, Select, MenuItem, FormControl, InputLabel, Button, Chip } from '@mui/material';
import { Phone } from 'lucide-react';
import { QuoteRequest } from '../types';
import { getRequestStatusChipColor } from '../../../lib/statusColors';

interface RequestActionsProps {
  request: QuoteRequest;
  isAdmin: boolean;
  currentStatus: string;
  isUpdating: boolean;
  onStatusChange: (newStatus: string) => void;
}

const RequestActions: React.FC<RequestActionsProps> = ({ request, isAdmin, currentStatus, isUpdating, onStatusChange }) => {
  return (
    <>
      <Typography component="div" variant="body2" color="text.secondary" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        Status: <Chip label={currentStatus} color={getRequestStatusChipColor(currentStatus)} size="small" sx={{ textTransform: 'capitalize', fontWeight: 'bold' }} />
      </Typography>

      {isAdmin && (
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
          <FormControl size="small" sx={{ minWidth: 150 }}>
            <InputLabel>Update Status</InputLabel>
            <Select
              value={currentStatus}
              label="Update Status"
              onChange={(e) => onStatusChange(e.target.value as string)}
              disabled={isUpdating || request.status === 'completed'}
            >
              <MenuItem value="new">New</MenuItem>
              <MenuItem value="viewed">Viewed</MenuItem>
              <MenuItem value="quoted">Quoted</MenuItem>
              <MenuItem value="accepted">Accepted</MenuItem>
              <MenuItem value="scheduled">Scheduled</MenuItem>
              <MenuItem value="completed">Completed</MenuItem>
            </Select>
          </FormControl>
          <Button
            variant="outlined"
            component="a"
            href={`tel:${request.user_profiles?.phone}`}
            disabled={!request.user_profiles?.phone}
            startIcon={<Phone />}
          >
            Call Customer
          </Button>
        </Box>
      )}
    </>
  );
};

export default RequestActions;
--- END OF FILE vite-app/src/features/requests/components/RequestActions.tsx ---

--- START OF FILE vite-app/src/features/requests/components/RequestDetailModal.tsx ---

// vite-app/src/features/requests/components/RequestDetailModal.tsx

import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../../auth/AuthContext';
import { Box, Paper, Button } from '@mui/material';
import { Zap } from 'lucide-react';
import { QuoteRequest } from '../types';
import AttachmentSection from './AttachmentSection';
import apiClient from '../../../lib/apiClient';
import CustomerInfoSection from './CustomerInfoSection';
import CommunicationLog from './CommunicationLog';
import QuoteList from './QuoteList';
import RequestProblemDetails from './RequestProblemDetails';
import AITriageSummary from './AITriageSummary';
import ModalHeader from './ModalHeader';
import ModalFooter from './ModalFooter';
import RequestActions from './RequestActions';

interface RequestDetailModalProps {
  isOpen: boolean;
  onClose: () => void;
  request: QuoteRequest | null;
  onUpdateRequest: () => void;
}

const RequestDetailModal: React.FC<RequestDetailModalProps> = ({ isOpen, onClose, request, onUpdateRequest }) => {
  const { profile } = useAuth();
  
  // Local state is ONLY for UI interactions that are not driven by props.
  const [isUpdating, setIsUpdating] = useState(false);
  const [isTriaging, setIsTriaging] = useState(false);
  const [scheduledStartDate, setScheduledStartDate] = useState('');
  const [scheduledDateChanged, setScheduledDateChanged] = useState(false);
  
  // *** THE DEFINITIVE FIX: State Synchronization Effect ***
  // This hook ensures that whenever the parent passes a new `request` object,
  // we update the local state for controlled inputs like the date picker.
  // This is the correct way to handle "props driving state" without causing loops.
  useEffect(() => {
    if (request) {
      setScheduledStartDate(request.scheduled_start_date ? new Date(request.scheduled_start_date).toISOString().split('T')[0] : '');
      setScheduledDateChanged(false); // Reset tracking when new data arrives
    }
  }, [request]); // This effect ONLY runs when the `request` prop itself changes.

  const handleStatusUpdate = async (newStatus: string, date?: string | null) => {
    if (!request) return;
    setIsUpdating(true);
    try {
      const payload: { status: string; scheduled_start_date?: string | null } = { status: newStatus };
      if (date !== undefined) payload.scheduled_start_date = date;
      await apiClient.patch(`/requests/${request.id}/status`, payload);
      onUpdateRequest(); // Signal to the parent to refresh its data
    } catch (error) {
      console.error("Failed to update status:", error);
    } finally {
      setIsUpdating(false);
    }
  };

  const handleSaveScheduledDate = async () => {
    if (!request || !scheduledStartDate) return;
    const utcDate = new Date(scheduledStartDate);
    await handleStatusUpdate('scheduled', utcDate.toISOString());
  };

  const handleAcceptQuote = async (quoteId: string) => {
    if (!request) return;
    setIsUpdating(true);
    try {
      await apiClient.post(`/requests/${request.id}/quotes/${quoteId}/accept`);
      onUpdateRequest();
    } catch (error) {
      console.error("Failed to accept quote:", error);
    } finally {
      setIsUpdating(false);
    }
  };
  
  const handleTriageRequest = async () => {
    if (!request) return;
    setIsTriaging(true);
    try {
      await apiClient.post(`/triage/${request.id}`);
      onUpdateRequest();
    } catch (error) {
      console.error("Failed to triage request:", error);
    } finally {
      setIsTriaging(false);
    }
  };

  if (!isOpen || !request) return null;

  const isAdmin = profile?.role === 'admin';
  const isReadOnly = ['completed'].includes(request.status);

  const headerTitle = `Job Docket: ${request.problem_category.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}`;
  const headerSubtitle = `ID: ${request.id} | Received: ${new Date(request.created_at).toLocaleString()}`;
  
  const headerActions = (
    isAdmin && !request.triage_summary ? (
      <Button variant="contained" color="secondary" size="small" onClick={handleTriageRequest} disabled={isTriaging} sx={{ whiteSpace: 'nowrap' }} startIcon={<Zap />}>
        {isTriaging ? 'Triaging...' : 'AI Triage'}
      </Button>
    ) : null
  );

  return (
    <div style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0,0,0,0.6)', zIndex: 1100, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
      <Paper elevation={24} sx={{ width: '95%', maxWidth: '800px', height: '90vh', p: 0, position: 'relative', display: 'flex', flexDirection: 'column', bgcolor: '#f4f6f8', overflow: 'hidden' }}>
        
        <ModalHeader title={headerTitle} subtitle={headerSubtitle} onClose={onClose} actions={headerActions} />

        <Box sx={{ flexGrow: 1, overflowY: 'auto', p: { xs: 2, md: 3 } }}>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
            <CustomerInfoSection 
              request={request} 
              isAdmin={isAdmin} 
              isDateEditable={true} 
              scheduledStartDate={scheduledStartDate} 
              setScheduledStartDate={(date) => { setScheduledStartDate(date); setScheduledDateChanged(true); }}
              currentStatus={request.status} 
              setCurrentStatus={(newStatus) => handleStatusUpdate(newStatus)}
              isUpdating={isUpdating} 
              onSaveScheduledDate={handleSaveScheduledDate} 
              scheduledDateChanged={scheduledDateChanged} 
            />
            {isAdmin && <AITriageSummary request={request} />}
            <RequestProblemDetails request={request} />
            
            <AttachmentSection
              requestId={request.id}
              attachments={request.quote_attachments || []}
              editable={!isReadOnly && (isAdmin || !request.quotes.some(q => q.status === 'accepted'))}
              onUpdate={onUpdateRequest}
            />

            <CommunicationLog
              requestId={request.id}
              initialNotes={request.request_notes || []}
              onNoteAdded={onUpdateRequest}
            />

            <QuoteList 
              request={request}
              isReadOnly={isReadOnly}
              isUpdating={isUpdating}
              onAcceptQuote={handleAcceptQuote}
              onUpdateRequest={onUpdateRequest}
            />
          </Box>
        </Box>

        <ModalFooter>
          <RequestActions 
            request={request} 
            isAdmin={isAdmin} 
            currentStatus={request.status} 
            isUpdating={isUpdating} 
            onStatusChange={(newStatus) => handleStatusUpdate(newStatus)} 
          />
        </ModalFooter>
      </Paper>
    </div>
  );
};

export default RequestDetailModal;
--- END OF FILE vite-app/src/features/requests/components/RequestDetailModal.tsx ---

--- START OF FILE vite-app/src/features/requests/components/RequestProblemDetails.tsx ---

// vite-app/src/components/RequestProblemDetails.tsx

import React from 'react';
import { Box, Typography, Paper, Divider, Grid } from '@mui/material';
import { AlertTriangle } from 'lucide-react';
import { QuoteRequest } from './Dashboard'; // Assuming interfaces are in Dashboard.tsx

// This sub-component now lives inside the component that uses it.
const AnswerItem: React.FC<{ question: string; answer: string }> = ({ question, answer }) => (
  <Grid container spacing={1} sx={{ mb: 1 }}>
    <Grid item xs={12} sm={5}>
      <Typography variant="body2" sx={{ fontWeight: 'bold', color: 'text.secondary' }}>{question}</Typography>
    </Grid>
    <Grid item xs={12} sm={7}>
      <Typography variant="body1">{answer || 'N/A'}</Typography>
    </Grid>
  </Grid>
);

interface RequestProblemDetailsProps {
  request: QuoteRequest;
}

const RequestProblemDetails: React.FC<RequestProblemDetailsProps> = ({ request }) => {
  // Logic to separate the main description from other Q&A
  const problemDescriptionAnswer = request.answers.find(a => a.question.toLowerCase().includes('describe the general problem'));
  const otherAnswers = request.answers.filter(a => !a.question.toLowerCase().includes('describe the general problem'));

  return (
    <Paper variant="outlined">
      <Box sx={{ p: 2, borderLeft: 4, borderColor: 'warning.main', bgcolor: '#fff3e0' }}>
        <Typography variant="overline" color="text.secondary" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <AlertTriangle size={16} /> Reported Problem
        </Typography>
        <Typography variant="body1" sx={{ fontStyle: 'italic', mt: 1 }}>
          "{problemDescriptionAnswer?.answer || 'N/A'}"
        </Typography>
      </Box>
      <Divider />
      <Box sx={{ p: 2 }}>
        <Grid container spacing={2}>
          {otherAnswers.map(ans => (
            <AnswerItem key={ans.question} question={ans.question} answer={ans.answer} />
          ))}
        </Grid>
      </Box>
    </Paper>
  );
};

export default RequestProblemDetails;
--- END OF FILE vite-app/src/features/requests/components/RequestProblemDetails.tsx ---

--- START OF FILE vite-app/src/features/requests/hooks/useRequests.ts ---

// vite-app/src/features/requests/hooks/useRequests.ts

import { useState, useEffect, useCallback } from 'react';
import { supabase } from '../../../lib/supabaseClient';
import { QuoteRequest } from '../types';

export function useRequests(userId?: string) {
  const [requests, setRequests] = useState<QuoteRequest[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // ** THE FIX: Create a STABLE fetch function using useCallback **
  // We remove `requests.length` from the dependency array and fix the loading logic.
  const fetchRequests = useCallback(async () => {
    setLoading(true); // Always set loading to true when a fetch starts
    setError(null);

    try {
      let query = supabase
        .from('requests')
        .select(`*, user_profiles!inner(name, email, phone), quote_attachments(*), quotes(*), request_notes(*)`)
        .order('created_at', { ascending: false });

      if (userId) {
        query = query.eq('user_id', userId);
      }

      const { data, error: fetchError } = await query;

      if (fetchError) throw fetchError;
      setRequests((data as QuoteRequest[]) || []);
    } catch (err: any) {
      console.error("useRequests hook error:", err);
      setError("Failed to fetch requests.");
    } finally {
      setLoading(false);
    }
  }, [userId]); // The only dependency is userId, which is stable.

  // Effect for the initial data fetch. Runs only once when the component mounts or userId changes.
  useEffect(() => {
    fetchRequests();
  }, [fetchRequests]);

  // Effect for the real-time subscriptions. Also runs only once.
  useEffect(() => {
    const channelId = userId ? `user-requests-${userId}` : 'admin-dashboard';
    const channel = supabase.channel(channelId);

    const handleUpdate = (payload: any) => {
      console.log(`Realtime update on channel ${channelId}:`, payload);
      // When an update comes in, we call the stable fetch function.
      fetchRequests();
    };

    const subscriptions = [
        { table: 'requests' },
        { table: 'request_notes' },
        { table: 'quotes' },
        { table: 'quote_attachments' }
    ];

    subscriptions.forEach(({ table }) => {
        channel.on(
            'postgres_changes', 
            { event: '*', schema: 'public', table: table }, 
            handleUpdate
        ).subscribe();
    });

    return () => {
      supabase.removeChannel(channel);
    };
  }, [userId, fetchRequests]); // Dependencies are stable.

  return { requests, loading, error, refreshRequests: fetchRequests };
}
--- END OF FILE vite-app/src/features/requests/hooks/useRequests.ts ---

--- START OF FILE vite-app/src/features/requests/types/index.ts ---

// vite-app/src/features/requests/types/index.ts

export interface Quote {
  id: string;
  quote_number: number; 
  quote_amount: number;
  details: string;
  status: string;
  created_at: string;
}


export interface RequestNote { 
  id: string; 
  note: string; 
  author_role: 'admin' | 'customer'; 
  created_at: string; 
}

export interface QuoteAttachment {
  id: string;
  file_name: string;
  file_url: string;
  mime_type: string;
  quote_id?: string;
}

export interface QuoteRequest {
  id: string;
  created_at: string;
  customer_name: string;
  problem_category: string;
  status: string;
  is_emergency: boolean;
  answers: { question: string; answer: string }[];
  quote_attachments: QuoteAttachment[];
  user_profiles: { name: string; email: string; phone: string; [key: string]: any; } | null;
  service_address: string;
  quotes: Quote[];
  request_notes: RequestNote[];
  scheduled_start_date: string | null;
  triage_summary: string | null;
  priority_score: number | null;
  priority_explanation: string | null;
  profitability_score: number | null;
  profitability_explanation: string | null;
}

--- END OF FILE vite-app/src/features/requests/types/index.ts ---

--- START OF FILE vite-app/src/lib/apiClient.ts ---

// /lib/apiClient.ts
import axios from 'axios';
import { supabase } from './supabaseClient';

const apiClient = axios.create({
  // The base URL is already handled by Vite's proxy,
  // so we just need to start with the '/api' prefix.
  baseURL: '/api',
});

// Axios interceptor to automatically add the auth token to every request
apiClient.interceptors.request.use(
  async (config) => {
    const { data: { session } } = await supabase.auth.getSession();

    if (session?.access_token) {
      config.headers.Authorization = `Bearer ${session.access_token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

export const uploadAttachments = async (requestId: string, files: File[], quoteId?: string) => {
  const formData = new FormData();
  formData.append('request_id', requestId);
  if (quoteId) {
    formData.append('quote_id', quoteId);
  }
  files.forEach(file => {
    formData.append('attachment', file);
  });

  return apiClient.post('/requests/attachments', formData, {
    headers: { 'Content-Type': 'multipart/form-data' },
  });
};

export default apiClient;
--- END OF FILE vite-app/src/lib/apiClient.ts ---

--- START OF FILE vite-app/src/lib/serviceQuoteQuestions.ts ---

export interface ServiceQuoteCategory {
  key: string;
  label: string;
  questions: string[];
}

export const SERVICE_QUOTE_CATEGORIES: ServiceQuoteCategory[] = [
  {
    key: "bathroom_reno",
    label: "Bathroom Renovation",
    questions: [
      "What specific fixtures does the homeowner plan to use, or would they like options/recommendations?",
      "Are there any special requirements or features the homeowner is interested in, such as water-saving or smart fixtures?",
      "Is there an existing blueprint or design plan to follow for the renovation?",
      "Will any additional renovations be happening simultaneously that might affect the plumbing work?",
      "Are there any known issues with the existing plumbing that might complicate the renovation process?"
    ]
  },
  {
    key: "perimeter_drains",
    label: "Perimeter Drains",
    questions: [
      "Is there an existing drainage system?",
      "Have you experienced flooding or pooling water?",
      "What is the age of your property?",
      "Are there any known issues with soil or grading?"
    ]
  },
  {
    key: "water_heater_install",
    label: "Water Heater Installation",
    questions: [
      "What type of water heater do you want installed?",
      "Is there an existing water heater to be replaced?",
      "What is the location for installation?",
      "Are there any space or access constraints?"
    ]
  },
  {
    key: "leak_repair",
    label: "Leak Repair",
    questions: [
      "Where is the leak located?",
      "How severe is the leak?",
      "When did you first notice the leak?",
      "Has any previous repair been attempted?"
    ]
  },
  {
    key: "fixture_install",
    label: "Fixture Installation",
    questions: [
      "What type of fixture do you need installed? (e.g., faucet, toilet, shower)",
      "Is this a replacement or a new installation?",
      "Are there any special features required?",
      "Is the location ready for installation?"
    ]
  },
  {
    key: "main_line_repair",
    label: "Main Line Repair",
    questions: [
      "What issues are you experiencing with the main line?",
      "How old is the main line?",
      "Has the main line been repaired before?",
      "Are there any access issues to the main line?"
    ]
  },
  {
    key: "emergency_service",
    label: "Emergency Service",
    questions: [
      "What is the nature of your emergency?",
      "When did the issue start?",
      "Is water currently shut off?",
      "Have you contacted us before for this issue?"
    ]
  },
  {
    key: "other",
    label: "Other (Describe Your Request)",
    questions: [
      "Please describe your plumbing request or issue in detail.",
      "Are there any specific requirements or concerns?",
      "When would you like the service performed?"
    ]
  }
];

--- END OF FILE vite-app/src/lib/serviceQuoteQuestions.ts ---

--- START OF FILE vite-app/src/lib/servicesData.ts ---

// This file now contains ONLY pure data. No components, no JSX.

export interface ServiceData {
  key: string;
  icon: string; // The icon is now represented by its name (a string)
  title: string;
  description: string;
  features: string[];
}

export const services: ServiceData[] = [
  {
    key: "leak_repair",
    icon: "Droplets",
    title: "Leak Detection & Repair",
    description: "Fast detection and repair of water leaks to prevent damage and save water.",
    features: ["Emergency leak repair", "Pipe inspection", "Slab leak detection"]
  },
  {
    key: "pipe_installation",
    icon: "Wrench",
    title: "Pipe Installation & Repiping",
    description: "Professional installation and replacement for new construction or aging systems.",
    features: ["Full home repiping", "New construction plumbing", "System upgrades"]
  },
  {
    key: "drain_cleaning",
    icon: "Wind",
    title: "Drain Cleaning",
    description: "Clear clogged drains and prevent future blockages with our expert services.",
    features: ["Kitchen & bathroom drains", "Main line sewer cleaning", "Hydro-jetting"]
  },
  {
    key: "water_heater",
    icon: "Thermometer",
    title: "Water Heater Services",
    description: "Reliable installation and repair for tankless and traditional water heaters.",
    features: ["New installations", "24/7 emergency repairs", "Regular maintenance"]
  },
  {
    key: "fixture_services",
    icon: "ShowerHead",
    title: "Fixture Repair & Installation",
    description: "We service all types of plumbing fixtures for your home or business.",
    features: ["Faucets & sinks", "Toilets & bidets", "Showers & tubs"]
  },
  {
    key: "gas_line_services",
    icon: "Settings",
    title: "Gas Line Services",
    description: "Safe and certified installation and repair of natural gas lines.",
    features: ["New appliance hookups", "Leak detection & repair", "System installations"]
  }
];
--- END OF FILE vite-app/src/lib/servicesData.ts ---

--- START OF FILE vite-app/src/lib/statusColors.ts ---

// vite-app/src/lib/statusColors.ts

export const getRequestStatusChipColor = (status: string): 'primary' | 'info' | 'warning' | 'success' | 'default' => {
  const colorMap: { [key: string]: 'primary' | 'info' | 'warning' | 'success' | 'default' } = {
    new: 'primary',
    viewed: 'info',
    quoted: 'warning',
    accepted: 'success',
    scheduled: 'success',
    completed: 'default'
  };
  return colorMap[status] || 'default';
};

export const getQuoteStatusChipColor = (status: string): 'success' | 'error' | 'default' => {
  const colorMap: { [key: string]: 'success' | 'error' | 'default' } = {
    accepted: 'success',
    rejected: 'error',
    sent: 'default',
  };
  return colorMap[status] || 'default';
};

--- END OF FILE vite-app/src/lib/statusColors.ts ---

--- START OF FILE vite-app/src/lib/supabaseClient.ts ---

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

--- END OF FILE vite-app/src/lib/supabaseClient.ts ---

--- START OF FILE vite-app/src/main.tsx ---

// vite-app/src/main.tsx

import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom/client';
import { AuthProvider, useAuth } from './features/auth/AuthContext';
import AuthModal from './features/auth/components/AuthModal';
import QuoteAgentModal from './features/requests/components/QuoteAgentModal';
import ServicesSection from './features/landing/components/ServicesSection';
import ReviewsSection from './features/landing/components/ReviewsSection';
import AboutSection from './features/landing/components/AboutSection';
import ContactSection from './features/landing/components/ContactSection';
import UserMenu from './features/auth/components/UserMenu';
import ProfileModal from './features/profile/components/ProfileModal';
import Dashboard from './features/requests/components/Dashboard';
import MyRequests from './features/requests/components/MyRequests';
import { QuoteRequest } from './features/requests/types';
import {
  Phone,
  Wrench,
  CheckCircle,
  Menu,
  X
} from 'lucide-react';

const AppContent: React.FC = () => {
  const { user, profile, profileIncomplete, refreshProfile } = useAuth();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [showAgentModal, setShowAgentModal] = useState(false);
  const [showProfileModal, setShowProfileModal] = useState(false);
  const [route, setRoute] = useState(window.location.hash);
  
  let myRequestsUpdater: ((request: QuoteRequest) => void) | null = null;

  useEffect(() => {
    const handleHashChange = () => {
      setRoute(window.location.hash);
    };
    window.addEventListener('hashchange', handleHashChange);
    return () => {
      window.removeEventListener('hashchange', handleHashChange);
    };
  }, []);

  const handleOpenQuoteModal = () => {
    if (!user) {
      setShowAuthModal(true);
    } else if (profileIncomplete) {
      // Profile modal is shown automatically
    } else {
      setShowAgentModal(true);
    }
  };

  const handleNewRequestSuccess = (newRequest: QuoteRequest) => {
    if (myRequestsUpdater) {
      myRequestsUpdater(newRequest);
    }
  };

  const renderHomePage = () => (
    <>
      {/* Hero Section */}
      <section className="pt-12 pb-20 bg-blue-600 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 grid lg:grid-cols-2 gap-12 items-center">
          <div>
            <h1 className="text-5xl font-bold leading-tight mb-6">Professional Plumbing Services You Can Trust</h1>
            <p className="text-xl text-blue-100 mb-8">24/7 emergency service, licensed professionals, and guaranteed satisfaction. Serving your community for over 15 years.</p>
            <div className="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4">
              <button
                className="bg-white text-blue-600 px-8 py-4 rounded-lg font-semibold hover:bg-blue-50 transition-colors text-lg shadow"
                onClick={handleOpenQuoteModal}
              >
                <span>Request a Quote</span>
              </button>
              <a href="tel:555-123-4567" className="border-2 border-white text-white px-8 py-4 rounded-lg font-semibold hover:bg-white hover:text-blue-600 transition-colors text-lg flex items-center justify-center space-x-2 shadow">
                <Phone className="w-5 h-5" />
                <span>Call Now</span>
              </a>
            </div>
          </div>
          <div className="relative flex justify-center lg:justify-end">
            <img src="/plumber.jpg" alt="Professional plumber at work" className="rounded-lg shadow-2xl w-full max-w-md object-cover" />
            <div className="absolute -bottom-8 left-8 bg-white p-6 rounded-xl shadow-lg flex items-center space-x-4">
              <div className="bg-green-100 p-3 rounded-full">
                <CheckCircle className="w-6 h-6 text-green-600" />
              </div>
              <div>
                <div className="font-semibold text-gray-900">Licensed & Insured</div>
                <div className="text-gray-600">Fully certified professionals</div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {user && !profileIncomplete && profile?.role !== 'admin' && (
          <MyRequests setAddNewRequestCallback={(updater) => { myRequestsUpdater = updater; }} />
      )}
      
      <ServicesSection />
      <AboutSection />
      <ReviewsSection />
      <ContactSection />
    </>
  );

  return (
    <React.Fragment>
      <div className="min-h-screen flex flex-col bg-gray-100">
        <header className="fixed top-0 left-0 w-full bg-white shadow z-40">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex items-center justify-between h-20">
            <a href="/#" className="flex items-center space-x-4">
              <Wrench className="w-8 h-8 text-blue-600" />
              <span className="text-2xl font-bold text-gray-900">AquaFlow Plumbing</span>
            </a>
            <nav className="hidden md:flex items-center space-x-6">
              <a href="/#services" className="text-gray-700 hover:text-blue-600 transition-colors">Services</a>
              <a href="/#about" className="text-gray-700 hover:text-blue-600 transition-colors">About</a>
              <a href="/#testimonials" className="text-gray-700 hover:text-blue-600 transition-colors">Reviews</a>
              <a href="/#contact" className="text-gray-700 hover:text-blue-600 transition-colors">Contact</a>
              <a href="tel:555-123-4567" className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2">
                <Phone className="w-4 h-4" />
                <span>Call Now</span>
              </a>
              {user ? (
                <UserMenu onOpenProfile={() => setShowProfileModal(true)} />
              ) : (
                <button
                  className="bg-gray-900 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors flex items-center space-x-2 ml-2"
                  onClick={() => setShowAuthModal(true)}
                >
                  <span>Sign In</span>
                </button>
              )}
            </nav>
            <button
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="md:hidden p-2 text-gray-700"
            >
              {isMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
            </button>
          </div>
        </header>
        
        <main className="pt-20 flex-grow">
          {route === '#/dashboard' ? <Dashboard /> : renderHomePage()}
        </main>

        {user && !profileIncomplete && (
          <QuoteAgentModal
            isOpen={showAgentModal}
            onClose={() => setShowAgentModal(false)}
            onSubmissionSuccess={handleNewRequestSuccess}
          />
        )}
        
        <footer className="bg-black text-white py-8">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex flex-col md:flex-row justify-between items-center">
            <div className="flex items-center space-x-2 mb-4 md:mb-0">
              <Wrench className="w-6 h-6 text-blue-400" />
              <span className="text-xl font-bold">AquaFlow Plumbing</span>
            </div>
            <div className="text-gray-400 text-center md:text-right">
              <p>&copy; 2025 AquaFlow Plumbing. All rights reserved.</p>
              <p className="text-sm">Licensed • Insured • Trusted</p>
            </div>
          </div>
        </footer>
        
        {route !== '#/dashboard' && (
            <a
                href="tel:555-123-4567"
                className="fixed bottom-6 right-6 z-50 bg-red-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-red-700 transition-colors inline-flex items-center space-x-2 shadow-lg"
            >
                <Phone className="w-5 h-5" />
                <span>Emergency Line</span>
            </a>
        )}
      </div>

      {!user && <AuthModal isOpen={showAuthModal} onClose={() => setShowAuthModal(false)} />}
      
      {user && profileIncomplete && (
        <ProfileModal
          onComplete={refreshProfile}
        />
      )}

      {user && !profileIncomplete && showProfileModal && (
        <ProfileModal
          isClosable={true}
          onClose={() => setShowProfileModal(false)}
          onComplete={() => {
            refreshProfile();
            setShowProfileModal(false);
          }}
        />
      )}
    </React.Fragment>
  );
};

const App: React.FC = () => {
    return (
        <AuthProvider>
            <AppContent />
        </AuthProvider>
    )
}

const root = document.getElementById('root');
if (root) {
  ReactDOM.createRoot(root).render(<App />);
}
--- END OF FILE vite-app/src/main.tsx ---

--- START OF FILE vite-app/tsconfig.json ---

{
  // Visit https://aka.ms/tsconfig to read more about this file
  "compilerOptions": {
    "allowImportingTsExtensions": false,
    // File Layout
    // "rootDir": "./src",
    // "outDir": "./dist",

    // Environment Settings
    // See also https://aka.ms/tsconfig/module
  "module": "nodenext",
  "moduleResolution": "nodenext",
  "allowSyntheticDefaultImports": true,
    "target": "esnext",
    "types": [],
    // For nodejs:
    // "lib": ["esnext"],
    // "types": ["node"],
    // and npm install -D @types/node

    // Other Outputs
    "sourceMap": true,
    "declaration": true,
    "declarationMap": true,

    // Stricter Typechecking Options
    "noUncheckedIndexedAccess": true,
    "exactOptionalPropertyTypes": true,

    // Style Options
    // "noImplicitReturns": true,
    // "noImplicitOverride": true,
    // "noUnusedLocals": true,
    // "noUnusedParameters": true,
    // "noFallthroughCasesInSwitch": true,
    // "noPropertyAccessFromIndexSignature": true,

    // Recommended Options
    "strict": true,
    "jsx": "react-jsx",
  // "verbatimModuleSyntax": true,
    "isolatedModules": true,
    "noUncheckedSideEffectImports": true,
    "moduleDetection": "force",
    "skipLibCheck": true,
  }
}

--- END OF FILE vite-app/tsconfig.json ---

--- START OF FILE vite-app/vite.config.js ---

import { defineConfig, loadEnv } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path'; // Import path module

export default defineConfig(({ mode }) => {
  // Load environment variables from .env file based on the current mode
  const env = loadEnv(mode, path.resolve(process.cwd(), 'vite-app'), ''); // Load all env variables from vite-app directory

  return {
    plugins: [react()],
    server: {
      proxy: {
        '/api': (env.VITE_BACKEND_BASE_URL || 'http://localhost:3000').replace(/\/$/, '')
      }
    }
  };
});
--- END OF FILE vite-app/vite.config.js ---

