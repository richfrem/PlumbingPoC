#!/usr/bin/env bash
# Pre-commit hook to prevent leaking secrets.
# Rules:
# 1) Block .env files except literal .env.example
# 2) Scan staged files for key assignments; block unless RHS empty or '<REDACTED>'
# 3) Summarize violations

set -euo pipefail
IFS=$'\n\t'

# Configurable exclusions
EXCLUDED_DIRS=("node_modules")
EXCLUDED_PATTERNS=(".githooks/*" "*.jpg" "*.jpeg" "*.png" "*.gif" "*.bmp" "*.tiff" "*.mp4" "*.avi" "*.mov" "*.webm" "*.mkv" "all_markdown_and_code_snapshot_llm_distilled.txt" "playwright-report/index.html")

KEYS="GEMINI_API_KEY|OPENAI_API_KEY|RESEND_API_KEY|SUPABASE_SERVICE_ROLE_KEY|STRIPE_SECRET_KEY|VITE_GOOGLE_MAPS_API_KEY|VITE_SUPABASE_ANON_KEY|API_KEY|SECRET|TOKEN|PASSWORD"
WHITELIST="<REDACTED>|'<REDACTED>'"

# Collect staged files NUL-safe
STAGED=()
while IFS= read -r -d '' f; do STAGED+=("$f"); done < <(git diff --cached --name-only -z)

EXIT_CODE=0
VIOLATIONS=()

for FILE in "${STAGED[@]}"; do
  [ -n "$FILE" ] || continue

  # Check excluded directories
  for dir in "${EXCLUDED_DIRS[@]}"; do
    if [[ "$FILE" == $dir/* ]]; then continue 2; fi
  done

  # Check excluded patterns
  for pat in "${EXCLUDED_PATTERNS[@]}"; do
    if [[ "$FILE" == $pat ]]; then continue 2; fi
  done

  # Rule 1: block .env files except .env.example
  if [[ "$FILE" == *.env* && "$FILE" != ".env.example" ]]; then
    VIOLATIONS+=("BLOCKED .env file: $FILE")
    EXIT_CODE=1
    continue
  fi

  # Skip if not a staged blob (deleted/dir/submodule)
  if ! git show :"$FILE" >/dev/null 2>&1; then continue; fi

  # Rule 2: scan staged content for key assignments
  while IFS=: read -r lineno rest; do
    line="$rest"
    rhs=$(printf '%s\n' "$line" | sed -nE "s/.*($KEYS)\s*[:=]\s*['\"]?([^'\"\s]*)['\"]?.*/\2/p")
    [ -z "$rhs" ] && continue  # no assignment found
    if [[ "$WHITELIST" == *"$rhs"* ]]; then continue; fi  # whitelisted
    VIOLATIONS+=("VIOLATION: $FILE:$lineno -> $line")
    EXIT_CODE=1
  done < <(git show :"$FILE" 2>/dev/null | nl -ba -w1 -s: | grep -Eni "$KEYS" || true)
done

# Rule 3: summarize and exit
if [ $EXIT_CODE -ne 0 ]; then
  echo "COMMIT BLOCKED: Violations found."
  for v in "${VIOLATIONS[@]}"; do echo "$v"; done
  echo "Fix by removing secrets or using '<REDACTED>'."
  exit 1
fi

exit 0